
c:/Users/ashkl/Desktop/Deakin_22/SIT_210/Week_3/Task3.1P/Webhooks/target/2.3.0/photon/Webhooks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001734  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1750  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a1754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000578  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a17c4  080a17c4  000217c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a17ec  080a17ec  000217ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001077ec  00000000  00000000  000217f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013471  00000000  00000000  00128fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016bac  00000000  00000000  0013c44d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ce0  00000000  00000000  00152ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004b10  00000000  00000000  00154cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025fc4  00000000  00000000  001597e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00029ebe  00000000  00000000  0017f7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1ef9  00000000  00000000  001a966b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004840  00000000  00000000  0025b564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f9fa 	bl	80a1426 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fa02 	bl	80a1442 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1754 	.word	0x080a1754
 80a004c:	20000070 	.word	0x20000070
 80a0050:	20000070 	.word	0x20000070
 80a0054:	200005e5 	.word	0x200005e5
 80a0058:	200005e5 	.word	0x200005e5

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fb93 	bl	80a0788 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a1724 	.word	0x080a1724
 80a0080:	080a1744 	.word	0x080a1744

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b816 	b.w	80a00b4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f81b 	bl	80a00c4 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 bb31 	b.w	80a06f8 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 ba03 	b.w	80a04a0 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 ba01 	b.w	80a04a0 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 ba07 	b.w	80a04b0 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
 */

int pin = D6;

void setup() {
  pinMode(pin, INPUT);
 80a00b4:	4b02      	ldr	r3, [pc, #8]	; (80a00c0 <setup+0xc>)
 80a00b6:	2100      	movs	r1, #0
 80a00b8:	8818      	ldrh	r0, [r3, #0]
 80a00ba:	f001 b937 	b.w	80a132c <pinMode>
 80a00be:	bf00      	nop
 80a00c0:	20000000 	.word	0x20000000

080a00c4 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a00c4:	b530      	push	{r4, r5, lr}
  int data = digitalRead(pin);
 80a00c6:	4b1d      	ldr	r3, [pc, #116]	; (80a013c <loop+0x78>)
void loop() {
 80a00c8:	b085      	sub	sp, #20
  int data = digitalRead(pin);
 80a00ca:	8818      	ldrh	r0, [r3, #0]
 80a00cc:	f001 f93f 	bl	80a134e <digitalRead>
 80a00d0:	4604      	mov	r4, r0
  Serial.println(data);
 80a00d2:	f000 fef3 	bl	80a0ebc <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a00d6:	2c00      	cmp	r4, #0
 80a00d8:	4605      	mov	r5, r0
 80a00da:	da2c      	bge.n	80a0136 <loop+0x72>
            t = print('-');
 80a00dc:	212d      	movs	r1, #45	; 0x2d
 80a00de:	f000 fa4f 	bl	80a0580 <_ZN5Print5printEc>
            val = -n;
 80a00e2:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a00e4:	220a      	movs	r2, #10
 80a00e6:	4628      	mov	r0, r5
 80a00e8:	f000 fa59 	bl	80a059e <_ZN5Print11printNumberEmh>
        n += println();
 80a00ec:	4628      	mov	r0, r5
 80a00ee:	f000 fa4a 	bl	80a0586 <_ZN5Print7printlnEv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a00f2:	4b13      	ldr	r3, [pc, #76]	; (80a0140 <loop+0x7c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00f4:	2200      	movs	r2, #0
 80a00f6:	781b      	ldrb	r3, [r3, #0]
 80a00f8:	4912      	ldr	r1, [pc, #72]	; (80a0144 <loop+0x80>)
 80a00fa:	f88d 3000 	strb.w	r3, [sp]
 80a00fe:	a802      	add	r0, sp, #8
 80a0100:	233c      	movs	r3, #60	; 0x3c
 80a0102:	f000 fc99 	bl	80a0a38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0106:	9c03      	ldr	r4, [sp, #12]
 80a0108:	b17c      	cbz	r4, 80a012a <loop+0x66>
      if (--_M_use_count == 0)
 80a010a:	6863      	ldr	r3, [r4, #4]
 80a010c:	3b01      	subs	r3, #1
 80a010e:	6063      	str	r3, [r4, #4]
 80a0110:	b95b      	cbnz	r3, 80a012a <loop+0x66>
          _M_dispose();
 80a0112:	6823      	ldr	r3, [r4, #0]
 80a0114:	4620      	mov	r0, r4
 80a0116:	689b      	ldr	r3, [r3, #8]
 80a0118:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a011a:	68a3      	ldr	r3, [r4, #8]
 80a011c:	3b01      	subs	r3, #1
 80a011e:	60a3      	str	r3, [r4, #8]
 80a0120:	b91b      	cbnz	r3, 80a012a <loop+0x66>
            _M_destroy();
 80a0122:	6823      	ldr	r3, [r4, #0]
 80a0124:	4620      	mov	r0, r4
 80a0126:	68db      	ldr	r3, [r3, #12]
 80a0128:	4798      	blx	r3
  Particle.publish("data", PRIVATE);
  delay(2000);
 80a012a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a012e:	f000 fa89 	bl	80a0644 <delay>
  // The core of your code will likely live here.

 80a0132:	b005      	add	sp, #20
 80a0134:	bd30      	pop	{r4, r5, pc}
            val = n;
 80a0136:	4621      	mov	r1, r4
 80a0138:	e7d4      	b.n	80a00e4 <loop+0x20>
 80a013a:	bf00      	nop
 80a013c:	20000000 	.word	0x20000000
 80a0140:	20000070 	.word	0x20000070
 80a0144:	080a15c8 	.word	0x080a15c8

080a0148 <_GLOBAL__sub_I_pin>:
        val_(val) {
 80a0148:	2201      	movs	r2, #1
 80a014a:	4b01      	ldr	r3, [pc, #4]	; (80a0150 <_GLOBAL__sub_I_pin+0x8>)
 80a014c:	701a      	strb	r2, [r3, #0]
 80a014e:	4770      	bx	lr
 80a0150:	20000070 	.word	0x20000070

080a0154 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0154:	b508      	push	{r3, lr}
 80a0156:	4b02      	ldr	r3, [pc, #8]	; (80a0160 <HAL_Pin_Mode+0xc>)
 80a0158:	681b      	ldr	r3, [r3, #0]
 80a015a:	689b      	ldr	r3, [r3, #8]
 80a015c:	9301      	str	r3, [sp, #4]
 80a015e:	bd08      	pop	{r3, pc}
 80a0160:	080601b0 	.word	0x080601b0

080a0164 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0164:	b508      	push	{r3, lr}
 80a0166:	4b02      	ldr	r3, [pc, #8]	; (80a0170 <HAL_Get_Pin_Mode+0xc>)
 80a0168:	681b      	ldr	r3, [r3, #0]
 80a016a:	68db      	ldr	r3, [r3, #12]
 80a016c:	9301      	str	r3, [sp, #4]
 80a016e:	bd08      	pop	{r3, pc}
 80a0170:	080601b0 	.word	0x080601b0

080a0174 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0174:	b508      	push	{r3, lr}
 80a0176:	4b02      	ldr	r3, [pc, #8]	; (80a0180 <HAL_GPIO_Read+0xc>)
 80a0178:	681b      	ldr	r3, [r3, #0]
 80a017a:	695b      	ldr	r3, [r3, #20]
 80a017c:	9301      	str	r3, [sp, #4]
 80a017e:	bd08      	pop	{r3, pc}
 80a0180:	080601b0 	.word	0x080601b0

080a0184 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0184:	b508      	push	{r3, lr}
 80a0186:	4b02      	ldr	r3, [pc, #8]	; (80a0190 <HAL_RNG_GetRandomNumber+0xc>)
 80a0188:	681b      	ldr	r3, [r3, #0]
 80a018a:	685b      	ldr	r3, [r3, #4]
 80a018c:	9301      	str	r3, [sp, #4]
 80a018e:	bd08      	pop	{r3, pc}
 80a0190:	0806019c 	.word	0x0806019c

080a0194 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0194:	b508      	push	{r3, lr}
 80a0196:	4b02      	ldr	r3, [pc, #8]	; (80a01a0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0198:	681b      	ldr	r3, [r3, #0]
 80a019a:	695b      	ldr	r3, [r3, #20]
 80a019c:	9301      	str	r3, [sp, #4]
 80a019e:	bd08      	pop	{r3, pc}
 80a01a0:	0806019c 	.word	0x0806019c

080a01a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a01a4:	b508      	push	{r3, lr}
 80a01a6:	4b02      	ldr	r3, [pc, #8]	; (80a01b0 <os_mutex_recursive_create+0xc>)
 80a01a8:	681b      	ldr	r3, [r3, #0]
 80a01aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a01ac:	9301      	str	r3, [sp, #4]
 80a01ae:	bd08      	pop	{r3, pc}
 80a01b0:	080601d0 	.word	0x080601d0

080a01b4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a01b4:	b508      	push	{r3, lr}
 80a01b6:	4b02      	ldr	r3, [pc, #8]	; (80a01c0 <os_mutex_recursive_destroy+0xc>)
 80a01b8:	681b      	ldr	r3, [r3, #0]
 80a01ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a01bc:	9301      	str	r3, [sp, #4]
 80a01be:	bd08      	pop	{r3, pc}
 80a01c0:	080601d0 	.word	0x080601d0

080a01c4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a01c4:	b508      	push	{r3, lr}
 80a01c6:	4b02      	ldr	r3, [pc, #8]	; (80a01d0 <hal_usart_init+0xc>)
 80a01c8:	681b      	ldr	r3, [r3, #0]
 80a01ca:	699b      	ldr	r3, [r3, #24]
 80a01cc:	9301      	str	r3, [sp, #4]
 80a01ce:	bd08      	pop	{r3, pc}
 80a01d0:	080601c4 	.word	0x080601c4

080a01d4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a01d4:	b508      	push	{r3, lr}
 80a01d6:	4b02      	ldr	r3, [pc, #8]	; (80a01e0 <hal_usart_write+0xc>)
 80a01d8:	681b      	ldr	r3, [r3, #0]
 80a01da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a01dc:	9301      	str	r3, [sp, #4]
 80a01de:	bd08      	pop	{r3, pc}
 80a01e0:	080601c4 	.word	0x080601c4

080a01e4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a01e4:	b508      	push	{r3, lr}
 80a01e6:	4b02      	ldr	r3, [pc, #8]	; (80a01f0 <hal_usart_available+0xc>)
 80a01e8:	681b      	ldr	r3, [r3, #0]
 80a01ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a01ec:	9301      	str	r3, [sp, #4]
 80a01ee:	bd08      	pop	{r3, pc}
 80a01f0:	080601c4 	.word	0x080601c4

080a01f4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a01f4:	b508      	push	{r3, lr}
 80a01f6:	4b02      	ldr	r3, [pc, #8]	; (80a0200 <hal_usart_read+0xc>)
 80a01f8:	681b      	ldr	r3, [r3, #0]
 80a01fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a01fc:	9301      	str	r3, [sp, #4]
 80a01fe:	bd08      	pop	{r3, pc}
 80a0200:	080601c4 	.word	0x080601c4

080a0204 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0204:	b508      	push	{r3, lr}
 80a0206:	4b02      	ldr	r3, [pc, #8]	; (80a0210 <hal_usart_peek+0xc>)
 80a0208:	681b      	ldr	r3, [r3, #0]
 80a020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a020c:	9301      	str	r3, [sp, #4]
 80a020e:	bd08      	pop	{r3, pc}
 80a0210:	080601c4 	.word	0x080601c4

080a0214 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0214:	b508      	push	{r3, lr}
 80a0216:	4b02      	ldr	r3, [pc, #8]	; (80a0220 <hal_usart_flush+0xc>)
 80a0218:	681b      	ldr	r3, [r3, #0]
 80a021a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a021c:	9301      	str	r3, [sp, #4]
 80a021e:	bd08      	pop	{r3, pc}
 80a0220:	080601c4 	.word	0x080601c4

080a0224 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0224:	b508      	push	{r3, lr}
 80a0226:	4b02      	ldr	r3, [pc, #8]	; (80a0230 <hal_usart_is_enabled+0xc>)
 80a0228:	681b      	ldr	r3, [r3, #0]
 80a022a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a022c:	9301      	str	r3, [sp, #4]
 80a022e:	bd08      	pop	{r3, pc}
 80a0230:	080601c4 	.word	0x080601c4

080a0234 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0234:	b508      	push	{r3, lr}
 80a0236:	4b02      	ldr	r3, [pc, #8]	; (80a0240 <hal_usart_available_data_for_write+0xc>)
 80a0238:	681b      	ldr	r3, [r3, #0]
 80a023a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a023c:	9301      	str	r3, [sp, #4]
 80a023e:	bd08      	pop	{r3, pc}
 80a0240:	080601c4 	.word	0x080601c4

080a0244 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0244:	b508      	push	{r3, lr}
 80a0246:	4b02      	ldr	r3, [pc, #8]	; (80a0250 <hal_i2c_write+0xc>)
 80a0248:	681b      	ldr	r3, [r3, #0]
 80a024a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a024c:	9301      	str	r3, [sp, #4]
 80a024e:	bd08      	pop	{r3, pc}
 80a0250:	080601ac 	.word	0x080601ac

080a0254 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0254:	b508      	push	{r3, lr}
 80a0256:	4b02      	ldr	r3, [pc, #8]	; (80a0260 <hal_i2c_available+0xc>)
 80a0258:	681b      	ldr	r3, [r3, #0]
 80a025a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a025c:	9301      	str	r3, [sp, #4]
 80a025e:	bd08      	pop	{r3, pc}
 80a0260:	080601ac 	.word	0x080601ac

080a0264 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0264:	b508      	push	{r3, lr}
 80a0266:	4b02      	ldr	r3, [pc, #8]	; (80a0270 <hal_i2c_read+0xc>)
 80a0268:	681b      	ldr	r3, [r3, #0]
 80a026a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a026c:	9301      	str	r3, [sp, #4]
 80a026e:	bd08      	pop	{r3, pc}
 80a0270:	080601ac 	.word	0x080601ac

080a0274 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0274:	b508      	push	{r3, lr}
 80a0276:	4b02      	ldr	r3, [pc, #8]	; (80a0280 <hal_i2c_peek+0xc>)
 80a0278:	681b      	ldr	r3, [r3, #0]
 80a027a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a027c:	9301      	str	r3, [sp, #4]
 80a027e:	bd08      	pop	{r3, pc}
 80a0280:	080601ac 	.word	0x080601ac

080a0284 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0284:	b508      	push	{r3, lr}
 80a0286:	4b02      	ldr	r3, [pc, #8]	; (80a0290 <hal_i2c_flush+0xc>)
 80a0288:	681b      	ldr	r3, [r3, #0]
 80a028a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a028c:	9301      	str	r3, [sp, #4]
 80a028e:	bd08      	pop	{r3, pc}
 80a0290:	080601ac 	.word	0x080601ac

080a0294 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0294:	b508      	push	{r3, lr}
 80a0296:	4b02      	ldr	r3, [pc, #8]	; (80a02a0 <hal_i2c_is_enabled+0xc>)
 80a0298:	681b      	ldr	r3, [r3, #0]
 80a029a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a029c:	9301      	str	r3, [sp, #4]
 80a029e:	bd08      	pop	{r3, pc}
 80a02a0:	080601ac 	.word	0x080601ac

080a02a4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a02a4:	b508      	push	{r3, lr}
 80a02a6:	4b03      	ldr	r3, [pc, #12]	; (80a02b4 <hal_i2c_init+0x10>)
 80a02a8:	681b      	ldr	r3, [r3, #0]
 80a02aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a02ae:	9301      	str	r3, [sp, #4]
 80a02b0:	bd08      	pop	{r3, pc}
 80a02b2:	0000      	.short	0x0000
 80a02b4:	080601ac 	.word	0x080601ac

080a02b8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a02b8:	b508      	push	{r3, lr}
 80a02ba:	4b02      	ldr	r3, [pc, #8]	; (80a02c4 <hal_spi_init+0xc>)
 80a02bc:	681b      	ldr	r3, [r3, #0]
 80a02be:	69db      	ldr	r3, [r3, #28]
 80a02c0:	9301      	str	r3, [sp, #4]
 80a02c2:	bd08      	pop	{r3, pc}
 80a02c4:	080601b4 	.word	0x080601b4

080a02c8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a02c8:	b508      	push	{r3, lr}
 80a02ca:	4b02      	ldr	r3, [pc, #8]	; (80a02d4 <hal_spi_is_enabled+0xc>)
 80a02cc:	681b      	ldr	r3, [r3, #0]
 80a02ce:	6a1b      	ldr	r3, [r3, #32]
 80a02d0:	9301      	str	r3, [sp, #4]
 80a02d2:	bd08      	pop	{r3, pc}
 80a02d4:	080601b4 	.word	0x080601b4

080a02d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a02d8:	b508      	push	{r3, lr}
 80a02da:	4b02      	ldr	r3, [pc, #8]	; (80a02e4 <HAL_USB_USART_Init+0xc>)
 80a02dc:	681b      	ldr	r3, [r3, #0]
 80a02de:	681b      	ldr	r3, [r3, #0]
 80a02e0:	9301      	str	r3, [sp, #4]
 80a02e2:	bd08      	pop	{r3, pc}
 80a02e4:	080601d8 	.word	0x080601d8

080a02e8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a02e8:	b508      	push	{r3, lr}
 80a02ea:	4b02      	ldr	r3, [pc, #8]	; (80a02f4 <HAL_USB_USART_Available_Data+0xc>)
 80a02ec:	681b      	ldr	r3, [r3, #0]
 80a02ee:	691b      	ldr	r3, [r3, #16]
 80a02f0:	9301      	str	r3, [sp, #4]
 80a02f2:	bd08      	pop	{r3, pc}
 80a02f4:	080601d8 	.word	0x080601d8

080a02f8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a02f8:	b508      	push	{r3, lr}
 80a02fa:	4b02      	ldr	r3, [pc, #8]	; (80a0304 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a02fc:	681b      	ldr	r3, [r3, #0]
 80a02fe:	695b      	ldr	r3, [r3, #20]
 80a0300:	9301      	str	r3, [sp, #4]
 80a0302:	bd08      	pop	{r3, pc}
 80a0304:	080601d8 	.word	0x080601d8

080a0308 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0308:	b508      	push	{r3, lr}
 80a030a:	4b02      	ldr	r3, [pc, #8]	; (80a0314 <HAL_USB_USART_Receive_Data+0xc>)
 80a030c:	681b      	ldr	r3, [r3, #0]
 80a030e:	699b      	ldr	r3, [r3, #24]
 80a0310:	9301      	str	r3, [sp, #4]
 80a0312:	bd08      	pop	{r3, pc}
 80a0314:	080601d8 	.word	0x080601d8

080a0318 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0318:	b508      	push	{r3, lr}
 80a031a:	4b02      	ldr	r3, [pc, #8]	; (80a0324 <HAL_USB_USART_Send_Data+0xc>)
 80a031c:	681b      	ldr	r3, [r3, #0]
 80a031e:	69db      	ldr	r3, [r3, #28]
 80a0320:	9301      	str	r3, [sp, #4]
 80a0322:	bd08      	pop	{r3, pc}
 80a0324:	080601d8 	.word	0x080601d8

080a0328 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0328:	b508      	push	{r3, lr}
 80a032a:	4b02      	ldr	r3, [pc, #8]	; (80a0334 <HAL_USB_USART_Flush_Data+0xc>)
 80a032c:	681b      	ldr	r3, [r3, #0]
 80a032e:	6a1b      	ldr	r3, [r3, #32]
 80a0330:	9301      	str	r3, [sp, #4]
 80a0332:	bd08      	pop	{r3, pc}
 80a0334:	080601d8 	.word	0x080601d8

080a0338 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0338:	b508      	push	{r3, lr}
 80a033a:	4b02      	ldr	r3, [pc, #8]	; (80a0344 <inet_gethostbyname+0xc>)
 80a033c:	681b      	ldr	r3, [r3, #0]
 80a033e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0340:	9301      	str	r3, [sp, #4]
 80a0342:	bd08      	pop	{r3, pc}
 80a0344:	080601c0 	.word	0x080601c0

080a0348 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b02      	ldr	r3, [pc, #8]	; (80a0354 <set_system_mode+0xc>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	685b      	ldr	r3, [r3, #4]
 80a0350:	9301      	str	r3, [sp, #4]
 80a0352:	bd08      	pop	{r3, pc}
 80a0354:	080601a4 	.word	0x080601a4

080a0358 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <system_delay_ms+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	695b      	ldr	r3, [r3, #20]
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601a4 	.word	0x080601a4

080a0368 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <application_thread_current+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601a4 	.word	0x080601a4

080a0378 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <application_thread_invoke+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601a4 	.word	0x080601a4

080a0388 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b03      	ldr	r3, [pc, #12]	; (80a0398 <system_ctrl_set_app_request_handler+0x10>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0392:	9301      	str	r3, [sp, #4]
 80a0394:	bd08      	pop	{r3, pc}
 80a0396:	0000      	.short	0x0000
 80a0398:	080601a4 	.word	0x080601a4

080a039c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a039c:	b508      	push	{r3, lr}
 80a039e:	4b03      	ldr	r3, [pc, #12]	; (80a03ac <system_ctrl_set_result+0x10>)
 80a03a0:	681b      	ldr	r3, [r3, #0]
 80a03a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a03a6:	9301      	str	r3, [sp, #4]
 80a03a8:	bd08      	pop	{r3, pc}
 80a03aa:	0000      	.short	0x0000
 80a03ac:	080601a4 	.word	0x080601a4

080a03b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a03b0:	b508      	push	{r3, lr}
 80a03b2:	4b02      	ldr	r3, [pc, #8]	; (80a03bc <network_connect+0xc>)
 80a03b4:	681b      	ldr	r3, [r3, #0]
 80a03b6:	685b      	ldr	r3, [r3, #4]
 80a03b8:	9301      	str	r3, [sp, #4]
 80a03ba:	bd08      	pop	{r3, pc}
 80a03bc:	080601c8 	.word	0x080601c8

080a03c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a03c0:	b508      	push	{r3, lr}
 80a03c2:	4b02      	ldr	r3, [pc, #8]	; (80a03cc <network_connecting+0xc>)
 80a03c4:	681b      	ldr	r3, [r3, #0]
 80a03c6:	689b      	ldr	r3, [r3, #8]
 80a03c8:	9301      	str	r3, [sp, #4]
 80a03ca:	bd08      	pop	{r3, pc}
 80a03cc:	080601c8 	.word	0x080601c8

080a03d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a03d0:	b508      	push	{r3, lr}
 80a03d2:	4b02      	ldr	r3, [pc, #8]	; (80a03dc <network_disconnect+0xc>)
 80a03d4:	681b      	ldr	r3, [r3, #0]
 80a03d6:	68db      	ldr	r3, [r3, #12]
 80a03d8:	9301      	str	r3, [sp, #4]
 80a03da:	bd08      	pop	{r3, pc}
 80a03dc:	080601c8 	.word	0x080601c8

080a03e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a03e0:	b508      	push	{r3, lr}
 80a03e2:	4b02      	ldr	r3, [pc, #8]	; (80a03ec <network_ready+0xc>)
 80a03e4:	681b      	ldr	r3, [r3, #0]
 80a03e6:	691b      	ldr	r3, [r3, #16]
 80a03e8:	9301      	str	r3, [sp, #4]
 80a03ea:	bd08      	pop	{r3, pc}
 80a03ec:	080601c8 	.word	0x080601c8

080a03f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a03f0:	b508      	push	{r3, lr}
 80a03f2:	4b02      	ldr	r3, [pc, #8]	; (80a03fc <network_on+0xc>)
 80a03f4:	681b      	ldr	r3, [r3, #0]
 80a03f6:	695b      	ldr	r3, [r3, #20]
 80a03f8:	9301      	str	r3, [sp, #4]
 80a03fa:	bd08      	pop	{r3, pc}
 80a03fc:	080601c8 	.word	0x080601c8

080a0400 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0400:	b508      	push	{r3, lr}
 80a0402:	4b02      	ldr	r3, [pc, #8]	; (80a040c <network_off+0xc>)
 80a0404:	681b      	ldr	r3, [r3, #0]
 80a0406:	699b      	ldr	r3, [r3, #24]
 80a0408:	9301      	str	r3, [sp, #4]
 80a040a:	bd08      	pop	{r3, pc}
 80a040c:	080601c8 	.word	0x080601c8

080a0410 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0410:	b508      	push	{r3, lr}
 80a0412:	4b02      	ldr	r3, [pc, #8]	; (80a041c <network_listen+0xc>)
 80a0414:	681b      	ldr	r3, [r3, #0]
 80a0416:	69db      	ldr	r3, [r3, #28]
 80a0418:	9301      	str	r3, [sp, #4]
 80a041a:	bd08      	pop	{r3, pc}
 80a041c:	080601c8 	.word	0x080601c8

080a0420 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0420:	b508      	push	{r3, lr}
 80a0422:	4b02      	ldr	r3, [pc, #8]	; (80a042c <network_listening+0xc>)
 80a0424:	681b      	ldr	r3, [r3, #0]
 80a0426:	6a1b      	ldr	r3, [r3, #32]
 80a0428:	9301      	str	r3, [sp, #4]
 80a042a:	bd08      	pop	{r3, pc}
 80a042c:	080601c8 	.word	0x080601c8

080a0430 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0430:	b508      	push	{r3, lr}
 80a0432:	4b02      	ldr	r3, [pc, #8]	; (80a043c <network_set_listen_timeout+0xc>)
 80a0434:	681b      	ldr	r3, [r3, #0]
 80a0436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0438:	9301      	str	r3, [sp, #4]
 80a043a:	bd08      	pop	{r3, pc}
 80a043c:	080601c8 	.word	0x080601c8

080a0440 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0440:	b508      	push	{r3, lr}
 80a0442:	4b02      	ldr	r3, [pc, #8]	; (80a044c <network_get_listen_timeout+0xc>)
 80a0444:	681b      	ldr	r3, [r3, #0]
 80a0446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0448:	9301      	str	r3, [sp, #4]
 80a044a:	bd08      	pop	{r3, pc}
 80a044c:	080601c8 	.word	0x080601c8

080a0450 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0450:	b508      	push	{r3, lr}
 80a0452:	4b02      	ldr	r3, [pc, #8]	; (80a045c <network_is_on+0xc>)
 80a0454:	681b      	ldr	r3, [r3, #0]
 80a0456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0458:	9301      	str	r3, [sp, #4]
 80a045a:	bd08      	pop	{r3, pc}
 80a045c:	080601c8 	.word	0x080601c8

080a0460 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0460:	b508      	push	{r3, lr}
 80a0462:	4b02      	ldr	r3, [pc, #8]	; (80a046c <network_is_off+0xc>)
 80a0464:	681b      	ldr	r3, [r3, #0]
 80a0466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0468:	9301      	str	r3, [sp, #4]
 80a046a:	bd08      	pop	{r3, pc}
 80a046c:	080601c8 	.word	0x080601c8

080a0470 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0470:	b508      	push	{r3, lr}
 80a0472:	4b02      	ldr	r3, [pc, #8]	; (80a047c <spark_cloud_flag_connected+0xc>)
 80a0474:	681b      	ldr	r3, [r3, #0]
 80a0476:	695b      	ldr	r3, [r3, #20]
 80a0478:	9301      	str	r3, [sp, #4]
 80a047a:	bd08      	pop	{r3, pc}
 80a047c:	080601cc 	.word	0x080601cc

080a0480 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0480:	b508      	push	{r3, lr}
 80a0482:	4b02      	ldr	r3, [pc, #8]	; (80a048c <spark_send_event+0xc>)
 80a0484:	681b      	ldr	r3, [r3, #0]
 80a0486:	6a1b      	ldr	r3, [r3, #32]
 80a0488:	9301      	str	r3, [sp, #4]
 80a048a:	bd08      	pop	{r3, pc}
 80a048c:	080601cc 	.word	0x080601cc

080a0490 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0490:	b508      	push	{r3, lr}
 80a0492:	4b02      	ldr	r3, [pc, #8]	; (80a049c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0494:	681b      	ldr	r3, [r3, #0]
 80a0496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0498:	9301      	str	r3, [sp, #4]
 80a049a:	bd08      	pop	{r3, pc}
 80a049c:	080601cc 	.word	0x080601cc

080a04a0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a04a0:	b508      	push	{r3, lr}
 80a04a2:	4b02      	ldr	r3, [pc, #8]	; (80a04ac <malloc+0xc>)
 80a04a4:	681b      	ldr	r3, [r3, #0]
 80a04a6:	681b      	ldr	r3, [r3, #0]
 80a04a8:	9301      	str	r3, [sp, #4]
 80a04aa:	bd08      	pop	{r3, pc}
 80a04ac:	080601a0 	.word	0x080601a0

080a04b0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a04b0:	b508      	push	{r3, lr}
 80a04b2:	4b02      	ldr	r3, [pc, #8]	; (80a04bc <free+0xc>)
 80a04b4:	681b      	ldr	r3, [r3, #0]
 80a04b6:	685b      	ldr	r3, [r3, #4]
 80a04b8:	9301      	str	r3, [sp, #4]
 80a04ba:	bd08      	pop	{r3, pc}
 80a04bc:	080601a0 	.word	0x080601a0

080a04c0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a04c0:	b508      	push	{r3, lr}
 80a04c2:	4b02      	ldr	r3, [pc, #8]	; (80a04cc <abort+0xc>)
 80a04c4:	681b      	ldr	r3, [r3, #0]
 80a04c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a04c8:	9301      	str	r3, [sp, #4]
 80a04ca:	bd08      	pop	{r3, pc}
 80a04cc:	080601a0 	.word	0x080601a0

080a04d0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a04d0:	b508      	push	{r3, lr}
 80a04d2:	4b02      	ldr	r3, [pc, #8]	; (80a04dc <_malloc_r+0xc>)
 80a04d4:	681b      	ldr	r3, [r3, #0]
 80a04d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04d8:	9301      	str	r3, [sp, #4]
 80a04da:	bd08      	pop	{r3, pc}
 80a04dc:	080601a0 	.word	0x080601a0

080a04e0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a04e0:	b508      	push	{r3, lr}
 80a04e2:	4b02      	ldr	r3, [pc, #8]	; (80a04ec <newlib_impure_ptr_callback+0xc>)
 80a04e4:	681b      	ldr	r3, [r3, #0]
 80a04e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a04e8:	9301      	str	r3, [sp, #4]
 80a04ea:	bd08      	pop	{r3, pc}
 80a04ec:	080601a0 	.word	0x080601a0

080a04f0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a04f0:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a04f2:	2600      	movs	r6, #0
 80a04f4:	4604      	mov	r4, r0
 80a04f6:	460d      	mov	r5, r1
 80a04f8:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a04fc:	f7ff fe52 	bl	80a01a4 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0500:	4628      	mov	r0, r5
    _spi = spi;
 80a0502:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0504:	f7ff fed8 	bl	80a02b8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0508:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a050a:	6066      	str	r6, [r4, #4]
}
 80a050c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0510 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0510:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0512:	2000      	movs	r0, #0
 80a0514:	4b04      	ldr	r3, [pc, #16]	; (80a0528 <_GLOBAL__sub_I_System+0x18>)
 80a0516:	601a      	str	r2, [r3, #0]
 80a0518:	4b04      	ldr	r3, [pc, #16]	; (80a052c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a051a:	4a05      	ldr	r2, [pc, #20]	; (80a0530 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a051c:	6018      	str	r0, [r3, #0]
 80a051e:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a0520:	7198      	strb	r0, [r3, #6]
 80a0522:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0524:	f7ff bf10 	b.w	80a0348 <set_system_mode>
 80a0528:	20000080 	.word	0x20000080
 80a052c:	20000074 	.word	0x20000074
 80a0530:	ffff0000 	.word	0xffff0000

080a0534 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0536:	4606      	mov	r6, r0
 80a0538:	460d      	mov	r5, r1
  size_t n = 0;
 80a053a:	2400      	movs	r4, #0
 80a053c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a053e:	42bd      	cmp	r5, r7
 80a0540:	d00c      	beq.n	80a055c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0542:	6833      	ldr	r3, [r6, #0]
 80a0544:	4630      	mov	r0, r6
 80a0546:	689b      	ldr	r3, [r3, #8]
 80a0548:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a054c:	4798      	blx	r3
     if (chunk>=0)
 80a054e:	1e03      	subs	r3, r0, #0
 80a0550:	db01      	blt.n	80a0556 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0552:	441c      	add	r4, r3
  while (size--) {
 80a0554:	e7f3      	b.n	80a053e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0556:	2c00      	cmp	r4, #0
 80a0558:	bf08      	it	eq
 80a055a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a055c:	4620      	mov	r0, r4
 80a055e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0560 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0560:	b570      	push	{r4, r5, r6, lr}
 80a0562:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0564:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0566:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0568:	b149      	cbz	r1, 80a057e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a056a:	f000 ffb2 	bl	80a14d2 <strlen>
 80a056e:	682b      	ldr	r3, [r5, #0]
 80a0570:	4602      	mov	r2, r0
 80a0572:	4621      	mov	r1, r4
 80a0574:	4628      	mov	r0, r5
    }
 80a0576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a057a:	68db      	ldr	r3, [r3, #12]
 80a057c:	4718      	bx	r3
    }
 80a057e:	bd70      	pop	{r4, r5, r6, pc}

080a0580 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0580:	6803      	ldr	r3, [r0, #0]
 80a0582:	689b      	ldr	r3, [r3, #8]
 80a0584:	4718      	bx	r3

080a0586 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0586:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0588:	210d      	movs	r1, #13
{
 80a058a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a058c:	f7ff fff8 	bl	80a0580 <_ZN5Print5printEc>
  n += print('\n');
 80a0590:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0592:	4604      	mov	r4, r0
  n += print('\n');
 80a0594:	4628      	mov	r0, r5
 80a0596:	f7ff fff3 	bl	80a0580 <_ZN5Print5printEc>
  return n;
}
 80a059a:	4420      	add	r0, r4
 80a059c:	bd38      	pop	{r3, r4, r5, pc}

080a059e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a059e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a05a0:	2a01      	cmp	r2, #1
 80a05a2:	bf98      	it	ls
 80a05a4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a05a6:	b530      	push	{r4, r5, lr}
 80a05a8:	b08b      	sub	sp, #44	; 0x2c
 80a05aa:	460c      	mov	r4, r1
  *str = '\0';
 80a05ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a05b0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a05b2:	4625      	mov	r5, r4
 80a05b4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a05b8:	fb04 5312 	mls	r3, r4, r2, r5
 80a05bc:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a05be:	2b09      	cmp	r3, #9
 80a05c0:	bf94      	ite	ls
 80a05c2:	3330      	addls	r3, #48	; 0x30
 80a05c4:	3337      	addhi	r3, #55	; 0x37
 80a05c6:	b2db      	uxtb	r3, r3
  } while(n);
 80a05c8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a05ca:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a05ce:	d9f0      	bls.n	80a05b2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a05d0:	f7ff ffc6 	bl	80a0560 <_ZN5Print5writeEPKc>
}
 80a05d4:	b00b      	add	sp, #44	; 0x2c
 80a05d6:	bd30      	pop	{r4, r5, pc}

080a05d8 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a05d8:	2300      	movs	r3, #0
 80a05da:	6840      	ldr	r0, [r0, #4]
 80a05dc:	461a      	mov	r2, r3
 80a05de:	4619      	mov	r1, r3
 80a05e0:	f7ff bf06 	b.w	80a03f0 <network_on>

080a05e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a05e4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a05e6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a05e8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a05ea:	b17c      	cbz	r4, 80a060c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a05ec:	6863      	ldr	r3, [r4, #4]
 80a05ee:	3b01      	subs	r3, #1
 80a05f0:	6063      	str	r3, [r4, #4]
 80a05f2:	b95b      	cbnz	r3, 80a060c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a05f4:	6823      	ldr	r3, [r4, #0]
 80a05f6:	4620      	mov	r0, r4
 80a05f8:	689b      	ldr	r3, [r3, #8]
 80a05fa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a05fc:	68a3      	ldr	r3, [r4, #8]
 80a05fe:	3b01      	subs	r3, #1
 80a0600:	60a3      	str	r3, [r4, #8]
 80a0602:	b91b      	cbnz	r3, 80a060c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0604:	6823      	ldr	r3, [r4, #0]
 80a0606:	4620      	mov	r0, r4
 80a0608:	68db      	ldr	r3, [r3, #12]
 80a060a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a060c:	4628      	mov	r0, r5
 80a060e:	bd38      	pop	{r3, r4, r5, pc}

080a0610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0610:	680b      	ldr	r3, [r1, #0]
 80a0612:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0614:	b113      	cbz	r3, 80a061c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a0616:	685a      	ldr	r2, [r3, #4]
 80a0618:	3201      	adds	r2, #1
 80a061a:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a061c:	4770      	bx	lr
	...

080a0620 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0620:	4b01      	ldr	r3, [pc, #4]	; (80a0628 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0622:	4a02      	ldr	r2, [pc, #8]	; (80a062c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0624:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0626:	4770      	bx	lr
 80a0628:	20000084 	.word	0x20000084
 80a062c:	080a15cd 	.word	0x080a15cd

080a0630 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0630:	4b02      	ldr	r3, [pc, #8]	; (80a063c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0632:	681a      	ldr	r2, [r3, #0]
 80a0634:	4b02      	ldr	r3, [pc, #8]	; (80a0640 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0636:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0638:	4770      	bx	lr
 80a063a:	bf00      	nop
 80a063c:	20000004 	.word	0x20000004
 80a0640:	20000088 	.word	0x20000088

080a0644 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0644:	2100      	movs	r1, #0
 80a0646:	f7ff be87 	b.w	80a0358 <system_delay_ms>

080a064a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a064a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a064c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a064e:	4604      	mov	r4, r0
      if (_M_manager)
 80a0650:	b113      	cbz	r3, 80a0658 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0652:	2203      	movs	r2, #3
 80a0654:	4601      	mov	r1, r0
 80a0656:	4798      	blx	r3
    }
 80a0658:	4620      	mov	r0, r4
 80a065a:	bd10      	pop	{r4, pc}

080a065c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a065c:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a065e:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a0660:	460b      	mov	r3, r1
 80a0662:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0664:	c803      	ldmia	r0, {r0, r1}
 80a0666:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a066a:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a066e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0672:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0676:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a067a:	b002      	add	sp, #8
 80a067c:	bd10      	pop	{r4, pc}
	...

080a0680 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0680:	2200      	movs	r2, #0
 80a0682:	4b01      	ldr	r3, [pc, #4]	; (80a0688 <_GLOBAL__sub_I_RGB+0x8>)
 80a0684:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a0686:	4770      	bx	lr
 80a0688:	2000008c 	.word	0x2000008c

080a068c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a068c:	4b01      	ldr	r3, [pc, #4]	; (80a0694 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a068e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0690:	4770      	bx	lr
 80a0692:	bf00      	nop
 80a0694:	20000008 	.word	0x20000008

080a0698 <serialEventRun>:
{
 80a0698:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a069a:	4b13      	ldr	r3, [pc, #76]	; (80a06e8 <serialEventRun+0x50>)
 80a069c:	b143      	cbz	r3, 80a06b0 <serialEventRun+0x18>
 80a069e:	f000 fc0d 	bl	80a0ebc <_Z16_fetch_usbserialv>
 80a06a2:	6803      	ldr	r3, [r0, #0]
 80a06a4:	691b      	ldr	r3, [r3, #16]
 80a06a6:	4798      	blx	r3
 80a06a8:	2800      	cmp	r0, #0
 80a06aa:	dd01      	ble.n	80a06b0 <serialEventRun+0x18>
        serialEvent();
 80a06ac:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a06b0:	4b0e      	ldr	r3, [pc, #56]	; (80a06ec <serialEventRun+0x54>)
 80a06b2:	b143      	cbz	r3, 80a06c6 <serialEventRun+0x2e>
 80a06b4:	f000 fcb2 	bl	80a101c <_Z22__fetch_global_Serial1v>
 80a06b8:	6803      	ldr	r3, [r0, #0]
 80a06ba:	691b      	ldr	r3, [r3, #16]
 80a06bc:	4798      	blx	r3
 80a06be:	2800      	cmp	r0, #0
 80a06c0:	dd01      	ble.n	80a06c6 <serialEventRun+0x2e>
        serialEvent1();
 80a06c2:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a06c6:	4b0a      	ldr	r3, [pc, #40]	; (80a06f0 <serialEventRun+0x58>)
 80a06c8:	b10b      	cbz	r3, 80a06ce <serialEventRun+0x36>
 80a06ca:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a06ce:	4b09      	ldr	r3, [pc, #36]	; (80a06f4 <serialEventRun+0x5c>)
 80a06d0:	b143      	cbz	r3, 80a06e4 <serialEventRun+0x4c>
 80a06d2:	f000 fc2d 	bl	80a0f30 <_Z17_fetch_usbserial1v>
 80a06d6:	6803      	ldr	r3, [r0, #0]
 80a06d8:	691b      	ldr	r3, [r3, #16]
 80a06da:	4798      	blx	r3
 80a06dc:	2800      	cmp	r0, #0
 80a06de:	dd01      	ble.n	80a06e4 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a06e0:	f3af 8000 	nop.w
}
 80a06e4:	bd08      	pop	{r3, pc}
 80a06e6:	bf00      	nop
	...

080a06f8 <_post_loop>:
{
 80a06f8:	b508      	push	{r3, lr}
	serialEventRun();
 80a06fa:	f7ff ffcd 	bl	80a0698 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a06fe:	f7ff fd49 	bl	80a0194 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0702:	4b01      	ldr	r3, [pc, #4]	; (80a0708 <_post_loop+0x10>)
 80a0704:	6018      	str	r0, [r3, #0]
}
 80a0706:	bd08      	pop	{r3, pc}
 80a0708:	20000518 	.word	0x20000518

080a070c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a070c:	4805      	ldr	r0, [pc, #20]	; (80a0724 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a070e:	4a06      	ldr	r2, [pc, #24]	; (80a0728 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a0710:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0712:	1a12      	subs	r2, r2, r0
 80a0714:	4905      	ldr	r1, [pc, #20]	; (80a072c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a0716:	f000 fe86 	bl	80a1426 <memcpy>
    __backup_sram_signature = signature;
 80a071a:	4b05      	ldr	r3, [pc, #20]	; (80a0730 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a071c:	4a05      	ldr	r2, [pc, #20]	; (80a0734 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a071e:	601a      	str	r2, [r3, #0]
}
 80a0720:	bd08      	pop	{r3, pc}
 80a0722:	bf00      	nop
 80a0724:	40024000 	.word	0x40024000
 80a0728:	40024004 	.word	0x40024004
 80a072c:	080a1750 	.word	0x080a1750
 80a0730:	40024000 	.word	0x40024000
 80a0734:	9a271c1e 	.word	0x9a271c1e

080a0738 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0738:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a073a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a073c:	461a      	mov	r2, r3
 80a073e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0742:	9300      	str	r3, [sp, #0]
 80a0744:	f7ff fe2a 	bl	80a039c <system_ctrl_set_result>
}
 80a0748:	b003      	add	sp, #12
 80a074a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0750 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0750:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0752:	8843      	ldrh	r3, [r0, #2]
 80a0754:	2b0a      	cmp	r3, #10
 80a0756:	d008      	beq.n	80a076a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0758:	2b50      	cmp	r3, #80	; 0x50
 80a075a:	d10b      	bne.n	80a0774 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a075c:	4b09      	ldr	r3, [pc, #36]	; (80a0784 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a075e:	681b      	ldr	r3, [r3, #0]
 80a0760:	b14b      	cbz	r3, 80a0776 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0762:	b003      	add	sp, #12
 80a0764:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0768:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a076a:	f7ff ffe5 	bl	80a0738 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a076e:	b003      	add	sp, #12
 80a0770:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0774:	2300      	movs	r3, #0
 80a0776:	461a      	mov	r2, r3
 80a0778:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a077c:	9300      	str	r3, [sp, #0]
 80a077e:	f7ff fe0d 	bl	80a039c <system_ctrl_set_result>
}
 80a0782:	e7f4      	b.n	80a076e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0784:	200000a0 	.word	0x200000a0

080a0788 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0788:	2100      	movs	r1, #0
{
 80a078a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a078c:	4811      	ldr	r0, [pc, #68]	; (80a07d4 <module_user_init_hook+0x4c>)
 80a078e:	f7ff fea7 	bl	80a04e0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a0792:	4b11      	ldr	r3, [pc, #68]	; (80a07d8 <module_user_init_hook+0x50>)
 80a0794:	681a      	ldr	r2, [r3, #0]
 80a0796:	4b11      	ldr	r3, [pc, #68]	; (80a07dc <module_user_init_hook+0x54>)
 80a0798:	429a      	cmp	r2, r3
 80a079a:	bf0c      	ite	eq
 80a079c:	2201      	moveq	r2, #1
 80a079e:	2200      	movne	r2, #0
 80a07a0:	4b0f      	ldr	r3, [pc, #60]	; (80a07e0 <module_user_init_hook+0x58>)
 80a07a2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a07a4:	d001      	beq.n	80a07aa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a07a6:	f7ff ffb1 	bl	80a070c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a07aa:	f7ff fceb 	bl	80a0184 <HAL_RNG_GetRandomNumber>
 80a07ae:	4604      	mov	r4, r0
    srand(seed);
 80a07b0:	f000 fe50 	bl	80a1454 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a07b4:	4b0b      	ldr	r3, [pc, #44]	; (80a07e4 <module_user_init_hook+0x5c>)
 80a07b6:	b113      	cbz	r3, 80a07be <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a07b8:	4620      	mov	r0, r4
 80a07ba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a07be:	2100      	movs	r1, #0
 80a07c0:	4808      	ldr	r0, [pc, #32]	; (80a07e4 <module_user_init_hook+0x5c>)
 80a07c2:	f7ff fe65 	bl	80a0490 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a07c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a07ca:	2100      	movs	r1, #0
 80a07cc:	4806      	ldr	r0, [pc, #24]	; (80a07e8 <module_user_init_hook+0x60>)
 80a07ce:	f7ff bddb 	b.w	80a0388 <system_ctrl_set_app_request_handler>
 80a07d2:	bf00      	nop
 80a07d4:	080a068d 	.word	0x080a068d
 80a07d8:	40024000 	.word	0x40024000
 80a07dc:	9a271c1e 	.word	0x9a271c1e
 80a07e0:	2000009c 	.word	0x2000009c
 80a07e4:	00000000 	.word	0x00000000
 80a07e8:	080a0751 	.word	0x080a0751

080a07ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a07ec:	4770      	bx	lr

080a07ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a07ee:	2000      	movs	r0, #0
 80a07f0:	4770      	bx	lr

080a07f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a07f2:	b510      	push	{r4, lr}
 80a07f4:	4604      	mov	r4, r0
 80a07f6:	2110      	movs	r1, #16
 80a07f8:	f000 fe08 	bl	80a140c <_ZdlPvj>
 80a07fc:	4620      	mov	r0, r4
 80a07fe:	bd10      	pop	{r4, pc}

080a0800 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a0800:	b508      	push	{r3, lr}
      { delete this; }
 80a0802:	f7ff fff6 	bl	80a07f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0806:	bd08      	pop	{r3, pc}

080a0808 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0808:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a080a:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a080c:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a0810:	6002      	str	r2, [r0, #0]
 80a0812:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a0814:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0816:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a0818:	680c      	ldr	r4, [r1, #0]
 80a081a:	8085      	strh	r5, [r0, #4]
 80a081c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a081e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0820:	bd30      	pop	{r4, r5, pc}

080a0822 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0822:	b510      	push	{r4, lr}
 80a0824:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0826:	6800      	ldr	r0, [r0, #0]
 80a0828:	f7ff fe42 	bl	80a04b0 <free>
}
 80a082c:	4620      	mov	r0, r4
 80a082e:	bd10      	pop	{r4, pc}

080a0830 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a0830:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0832:	68c4      	ldr	r4, [r0, #12]
 80a0834:	b1f4      	cbz	r4, 80a0874 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a0836:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0838:	2b02      	cmp	r3, #2
 80a083a:	d103      	bne.n	80a0844 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a083c:	f104 000c 	add.w	r0, r4, #12
 80a0840:	f7ff ffef 	bl	80a0822 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a0844:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0846:	b135      	cbz	r5, 80a0856 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0848:	4628      	mov	r0, r5
 80a084a:	f7ff fefe 	bl	80a064a <_ZNSt14_Function_baseD1Ev>
 80a084e:	2110      	movs	r1, #16
 80a0850:	4628      	mov	r0, r5
 80a0852:	f000 fddb 	bl	80a140c <_ZdlPvj>
 80a0856:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0858:	b135      	cbz	r5, 80a0868 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a085a:	4628      	mov	r0, r5
 80a085c:	f7ff fef5 	bl	80a064a <_ZNSt14_Function_baseD1Ev>
 80a0860:	2110      	movs	r1, #16
 80a0862:	4628      	mov	r0, r5
 80a0864:	f000 fdd2 	bl	80a140c <_ZdlPvj>
 80a0868:	4620      	mov	r0, r4
 80a086a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a086e:	2114      	movs	r1, #20
 80a0870:	f000 bdcc 	b.w	80a140c <_ZdlPvj>
 80a0874:	bd38      	pop	{r3, r4, r5, pc}

080a0876 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0876:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0878:	460e      	mov	r6, r1
 80a087a:	4604      	mov	r4, r0
 80a087c:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0880:	460d      	mov	r5, r1
 80a0882:	a801      	add	r0, sp, #4
 80a0884:	4631      	mov	r1, r6
 80a0886:	9300      	str	r3, [sp, #0]
 80a0888:	f7ff fec2 	bl	80a0610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a088c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a088e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0890:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a0892:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0894:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a0896:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a0898:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a089a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a089c:	f7ff fea2 	bl	80a05e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a08a0:	4630      	mov	r0, r6
 80a08a2:	f7ff fe9f 	bl	80a05e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a08a6:	4628      	mov	r0, r5
 80a08a8:	2108      	movs	r1, #8
 80a08aa:	f000 fdaf 	bl	80a140c <_ZdlPvj>
        return p;
    }
 80a08ae:	4620      	mov	r0, r4
 80a08b0:	b002      	add	sp, #8
 80a08b2:	bd70      	pop	{r4, r5, r6, pc}

080a08b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a08b4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a08b6:	b510      	push	{r4, lr}
      if (_M_empty())
 80a08b8:	b90a      	cbnz	r2, 80a08be <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a08ba:	f000 fdab 	bl	80a1414 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a08be:	68c3      	ldr	r3, [r0, #12]
    }
 80a08c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a08c4:	4718      	bx	r3

080a08c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a08c6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a08c8:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a08ca:	f100 0110 	add.w	r1, r0, #16
 80a08ce:	f7ff fff1 	bl	80a08b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a08d2:	bd08      	pop	{r3, pc}

080a08d4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a08d4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a08d6:	b510      	push	{r4, lr}
      if (_M_empty())
 80a08d8:	b90a      	cbnz	r2, 80a08de <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a08da:	f000 fd9b 	bl	80a1414 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a08de:	68c3      	ldr	r3, [r0, #12]
    }
 80a08e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a08e4:	4718      	bx	r3

080a08e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a08e6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a08e8:	6800      	ldr	r0, [r0, #0]
 80a08ea:	f100 0110 	add.w	r1, r0, #16
 80a08ee:	f7ff fff1 	bl	80a08d4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a08f2:	bd08      	pop	{r3, pc}

080a08f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a08f4:	b538      	push	{r3, r4, r5, lr}
 80a08f6:	2300      	movs	r3, #0
 80a08f8:	4604      	mov	r4, r0
 80a08fa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a08fc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a08fe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0900:	f7ff fbc9 	bl	80a0096 <_Znwj>
 80a0904:	b128      	cbz	r0, 80a0912 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a0906:	2301      	movs	r3, #1
 80a0908:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a090c:	4b02      	ldr	r3, [pc, #8]	; (80a0918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a090e:	60c5      	str	r5, [r0, #12]
 80a0910:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0912:	6020      	str	r0, [r4, #0]
	}
 80a0914:	4620      	mov	r0, r4
 80a0916:	bd38      	pop	{r3, r4, r5, pc}
 80a0918:	080a15f8 	.word	0x080a15f8

080a091c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a091c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a091e:	2300      	movs	r3, #0
 80a0920:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a0922:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0924:	4604      	mov	r4, r0
 80a0926:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a0928:	b12b      	cbz	r3, 80a0936 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a092a:	2202      	movs	r2, #2
 80a092c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a092e:	68eb      	ldr	r3, [r5, #12]
 80a0930:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0932:	68ab      	ldr	r3, [r5, #8]
 80a0934:	60a3      	str	r3, [r4, #8]
    }
 80a0936:	4620      	mov	r0, r4
 80a0938:	bd38      	pop	{r3, r4, r5, pc}
	...

080a093c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a093e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a0940:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0942:	4668      	mov	r0, sp
 80a0944:	f7ff ff60 	bl	80a0808 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a0948:	f04f 0302 	mov.w	r3, #2
 80a094c:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a0950:	2a00      	cmp	r2, #0
 80a0952:	d103      	bne.n	80a095c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a0954:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a0958:	2900      	cmp	r1, #0
 80a095a:	d1f7      	bne.n	80a094c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a095c:	d125      	bne.n	80a09aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a095e:	f104 050c 	add.w	r5, r4, #12
 80a0962:	4669      	mov	r1, sp
 80a0964:	4628      	mov	r0, r5
 80a0966:	f7ff ff4f 	bl	80a0808 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a096a:	2301      	movs	r3, #1
 80a096c:	f3bf 8f5b 	dmb	ish
 80a0970:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a0972:	2000      	movs	r0, #0
 80a0974:	f3bf 8f5b 	dmb	ish
 80a0978:	f104 0308 	add.w	r3, r4, #8
 80a097c:	e853 6f00 	ldrex	r6, [r3]
 80a0980:	e843 0200 	strex	r2, r0, [r3]
 80a0984:	2a00      	cmp	r2, #0
 80a0986:	d1f9      	bne.n	80a097c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a0988:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a098c:	b16e      	cbz	r6, 80a09aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a098e:	f7ff fceb 	bl	80a0368 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a0992:	b178      	cbz	r0, 80a09b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0994:	4629      	mov	r1, r5
 80a0996:	4630      	mov	r0, r6
 80a0998:	f7ff ff8c 	bl	80a08b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a099c:	4630      	mov	r0, r6
 80a099e:	f7ff fe54 	bl	80a064a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a09a2:	2110      	movs	r1, #16
 80a09a4:	4630      	mov	r0, r6
 80a09a6:	f000 fd31 	bl	80a140c <_ZdlPvj>
        p_->setError(std::move(error));
 80a09aa:	4668      	mov	r0, sp
 80a09ac:	f7ff ff39 	bl	80a0822 <_ZN8particle5ErrorD1Ev>
    }
 80a09b0:	b009      	add	sp, #36	; 0x24
 80a09b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a09b4:	4631      	mov	r1, r6
 80a09b6:	a802      	add	r0, sp, #8
 80a09b8:	f7ff ffb0 	bl	80a091c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a09bc:	68e0      	ldr	r0, [r4, #12]
 80a09be:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a09c2:	b108      	cbz	r0, 80a09c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a09c4:	f000 fd6a 	bl	80a149c <strdup>
        type_(type) {
 80a09c8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a09ca:	2010      	movs	r0, #16
 80a09cc:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a09d0:	f7ff fb61 	bl	80a0096 <_Znwj>
 80a09d4:	4605      	mov	r5, r0
 80a09d6:	b1e8      	cbz	r0, 80a0a14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a09d8:	2700      	movs	r7, #0
 80a09da:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a09dc:	2018      	movs	r0, #24
 80a09de:	f7ff fb5a 	bl	80a0096 <_Znwj>
 80a09e2:	4604      	mov	r4, r0
 80a09e4:	b188      	cbz	r0, 80a0a0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a09e6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a09e8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a09ea:	a802      	add	r0, sp, #8
 80a09ec:	f7ff fe36 	bl	80a065c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a09f0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a09f2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a09f4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a09f6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a09f8:	9204      	str	r2, [sp, #16]
 80a09fa:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a09fc:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a09fe:	60e3      	str	r3, [r4, #12]
 80a0a00:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a0a04:	9205      	str	r2, [sp, #20]
 80a0a06:	f7ff feff 	bl	80a0808 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a0a0a:	4b08      	ldr	r3, [pc, #32]	; (80a0a2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0a0c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0a0e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0a10:	4b07      	ldr	r3, [pc, #28]	; (80a0a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a0a12:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a0a14:	a806      	add	r0, sp, #24
 80a0a16:	f7ff ff04 	bl	80a0822 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a0a1a:	a802      	add	r0, sp, #8
 80a0a1c:	f7ff fe15 	bl	80a064a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0a20:	2200      	movs	r2, #0
 80a0a22:	4629      	mov	r1, r5
 80a0a24:	4803      	ldr	r0, [pc, #12]	; (80a0a34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a0a26:	f7ff fca7 	bl	80a0378 <application_thread_invoke>
 80a0a2a:	e7b7      	b.n	80a099c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a0a2c:	080a08c7 	.word	0x080a08c7
 80a0a30:	080a0b5d 	.word	0x080a0b5d
 80a0a34:	080a1065 	.word	0x080a1065

080a0a38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0a3c:	b08a      	sub	sp, #40	; 0x28
 80a0a3e:	4605      	mov	r5, r0
 80a0a40:	460c      	mov	r4, r1
 80a0a42:	4617      	mov	r7, r2
 80a0a44:	4698      	mov	r8, r3
 80a0a46:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0a4a:	f7ff fd11 	bl	80a0470 <spark_cloud_flag_connected>
 80a0a4e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a0a50:	4682      	mov	sl, r0
 80a0a52:	bb38      	cbnz	r0, 80a0aa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a0a54:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0a58:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0a5a:	a905      	add	r1, sp, #20
 80a0a5c:	4630      	mov	r0, r6
 80a0a5e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0a62:	f7ff fed1 	bl	80a0808 <_ZN8particle5ErrorC1EOS0_>
 80a0a66:	2014      	movs	r0, #20
 80a0a68:	f7ff fb15 	bl	80a0096 <_Znwj>
 80a0a6c:	4604      	mov	r4, r0
 80a0a6e:	b148      	cbz	r0, 80a0a84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0a70:	2302      	movs	r3, #2
 80a0a72:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0a74:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0a76:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0a7a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a0a7c:	4631      	mov	r1, r6
 80a0a7e:	300c      	adds	r0, #12
 80a0a80:	f7ff fec2 	bl	80a0808 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0a84:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a0a86:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0a88:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a0a8c:	f7ff ff32 	bl	80a08f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0a90:	4630      	mov	r0, r6
 80a0a92:	f7ff fec6 	bl	80a0822 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a0a96:	a805      	add	r0, sp, #20
 80a0a98:	f7ff fec3 	bl	80a0822 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a0a9c:	4628      	mov	r0, r5
 80a0a9e:	b00a      	add	sp, #40	; 0x28
 80a0aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0aa4:	230c      	movs	r3, #12
 80a0aa6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0aaa:	2014      	movs	r0, #20
 80a0aac:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a0ab0:	9307      	str	r3, [sp, #28]
 80a0ab2:	f7ff faf0 	bl	80a0096 <_Znwj>
 80a0ab6:	4601      	mov	r1, r0
 80a0ab8:	b128      	cbz	r0, 80a0ac6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0aba:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a0abe:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0ac2:	f880 a001 	strb.w	sl, [r0, #1]
 80a0ac6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0ac8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a0aca:	f7ff ff13 	bl	80a08f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a0ace:	4b22      	ldr	r3, [pc, #136]	; (80a0b58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0ad0:	2008      	movs	r0, #8
 80a0ad2:	9308      	str	r3, [sp, #32]
 80a0ad4:	f7ff fadf 	bl	80a0096 <_Znwj>
 80a0ad8:	4682      	mov	sl, r0
 80a0ada:	b128      	cbz	r0, 80a0ae8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0adc:	9b03      	ldr	r3, [sp, #12]
 80a0ade:	a904      	add	r1, sp, #16
 80a0ae0:	f840 3b04 	str.w	r3, [r0], #4
 80a0ae4:	f7ff fd94 	bl	80a0610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0ae8:	4642      	mov	r2, r8
 80a0aea:	4639      	mov	r1, r7
 80a0aec:	4620      	mov	r0, r4
 80a0aee:	9600      	str	r6, [sp, #0]
 80a0af0:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a0af4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0af8:	f7ff fcc2 	bl	80a0480 <spark_send_event>
 80a0afc:	b9b8      	cbnz	r0, 80a0b2e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a0afe:	9b03      	ldr	r3, [sp, #12]
 80a0b00:	785b      	ldrb	r3, [r3, #1]
 80a0b02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0b06:	b993      	cbnz	r3, 80a0b2e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a0b08:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a0b0c:	a905      	add	r1, sp, #20
 80a0b0e:	a803      	add	r0, sp, #12
 80a0b10:	9205      	str	r2, [sp, #20]
 80a0b12:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0b16:	f7ff ff11 	bl	80a093c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0b1a:	a805      	add	r0, sp, #20
 80a0b1c:	f7ff fe81 	bl	80a0822 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0b20:	a805      	add	r0, sp, #20
 80a0b22:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0b24:	f7ff fea7 	bl	80a0876 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a0b28:	a806      	add	r0, sp, #24
 80a0b2a:	f7ff fd5b 	bl	80a05e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0b2e:	9b03      	ldr	r3, [sp, #12]
 80a0b30:	a904      	add	r1, sp, #16
 80a0b32:	a806      	add	r0, sp, #24
 80a0b34:	9305      	str	r3, [sp, #20]
 80a0b36:	f7ff fd6b 	bl	80a0610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0b3a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0b3c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0b3e:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a0b40:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0b42:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a0b44:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a0b46:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a0b48:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a0b4a:	f7ff fd4b 	bl	80a05e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0b4e:	a804      	add	r0, sp, #16
 80a0b50:	f7ff fd48 	bl	80a05e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a0b54:	e7a2      	b.n	80a0a9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a0b56:	bf00      	nop
 80a0b58:	080a0c21 	.word	0x080a0c21

080a0b5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a0b5c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b60:	4605      	mov	r5, r0
	  switch (__op)
 80a0b62:	d007      	beq.n	80a0b74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a0b64:	2a03      	cmp	r2, #3
 80a0b66:	d018      	beq.n	80a0b9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a0b68:	2a01      	cmp	r2, #1
 80a0b6a:	d101      	bne.n	80a0b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a0b6c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0b6e:	6003      	str	r3, [r0, #0]
	}
 80a0b70:	2000      	movs	r0, #0
 80a0b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0b74:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a0b76:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0b78:	f7ff fa8d 	bl	80a0096 <_Znwj>
 80a0b7c:	4604      	mov	r4, r0
 80a0b7e:	b150      	cbz	r0, 80a0b96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0b80:	4631      	mov	r1, r6
 80a0b82:	f7ff fecb 	bl	80a091c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a0b86:	6930      	ldr	r0, [r6, #16]
 80a0b88:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0b8c:	b108      	cbz	r0, 80a0b92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a0b8e:	f000 fc85 	bl	80a149c <strdup>
        type_(type) {
 80a0b92:	6120      	str	r0, [r4, #16]
 80a0b94:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a0b96:	602c      	str	r4, [r5, #0]
	}
 80a0b98:	e7ea      	b.n	80a0b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a0b9a:	6804      	ldr	r4, [r0, #0]
 80a0b9c:	2c00      	cmp	r4, #0
 80a0b9e:	d0e7      	beq.n	80a0b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a0ba0:	f104 0010 	add.w	r0, r4, #16
 80a0ba4:	f7ff fe3d 	bl	80a0822 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a0ba8:	4620      	mov	r0, r4
 80a0baa:	f7ff fd4e 	bl	80a064a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a0bae:	2118      	movs	r1, #24
 80a0bb0:	4620      	mov	r0, r4
 80a0bb2:	f000 fc2b 	bl	80a140c <_ZdlPvj>
 80a0bb6:	e7db      	b.n	80a0b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a0bb8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a0bb8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a0bba:	2300      	movs	r3, #0
 80a0bbc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a0bbe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0bc0:	4604      	mov	r4, r0
 80a0bc2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a0bc4:	b12b      	cbz	r3, 80a0bd2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0bc6:	2202      	movs	r2, #2
 80a0bc8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0bca:	68eb      	ldr	r3, [r5, #12]
 80a0bcc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0bce:	68ab      	ldr	r3, [r5, #8]
 80a0bd0:	60a3      	str	r3, [r4, #8]
    }
 80a0bd2:	4620      	mov	r0, r4
 80a0bd4:	bd38      	pop	{r3, r4, r5, pc}

080a0bd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a0bd6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0bd8:	b570      	push	{r4, r5, r6, lr}
 80a0bda:	4604      	mov	r4, r0
	  switch (__op)
 80a0bdc:	d007      	beq.n	80a0bee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a0bde:	2a03      	cmp	r2, #3
 80a0be0:	d012      	beq.n	80a0c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a0be2:	2a01      	cmp	r2, #1
 80a0be4:	d101      	bne.n	80a0bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a0be6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0be8:	6003      	str	r3, [r0, #0]
	}
 80a0bea:	2000      	movs	r0, #0
 80a0bec:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0bee:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a0bf0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0bf2:	f7ff fa50 	bl	80a0096 <_Znwj>
 80a0bf6:	4605      	mov	r5, r0
 80a0bf8:	b120      	cbz	r0, 80a0c04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a0bfa:	4631      	mov	r1, r6
 80a0bfc:	f7ff ffdc 	bl	80a0bb8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0c00:	7c33      	ldrb	r3, [r6, #16]
 80a0c02:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a0c04:	6025      	str	r5, [r4, #0]
	}
 80a0c06:	e7f0      	b.n	80a0bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a0c08:	6804      	ldr	r4, [r0, #0]
 80a0c0a:	2c00      	cmp	r4, #0
 80a0c0c:	d0ed      	beq.n	80a0bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a0c0e:	4620      	mov	r0, r4
 80a0c10:	f7ff fd1b 	bl	80a064a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a0c14:	2114      	movs	r1, #20
 80a0c16:	4620      	mov	r0, r4
 80a0c18:	f000 fbf8 	bl	80a140c <_ZdlPvj>
 80a0c1c:	e7e5      	b.n	80a0bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a0c20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a0c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0c22:	4604      	mov	r4, r0
 80a0c24:	b089      	sub	sp, #36	; 0x24
 80a0c26:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a0c28:	a801      	add	r0, sp, #4
 80a0c2a:	4611      	mov	r1, r2
 80a0c2c:	f7ff fe23 	bl	80a0876 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a0c30:	b1a4      	cbz	r4, 80a0c5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a0c32:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0c34:	b11d      	cbz	r5, 80a0c3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a0c36:	4628      	mov	r0, r5
 80a0c38:	f000 fc30 	bl	80a149c <strdup>
 80a0c3c:	4605      	mov	r5, r0
 80a0c3e:	a801      	add	r0, sp, #4
 80a0c40:	a903      	add	r1, sp, #12
        type_(type) {
 80a0c42:	9503      	str	r5, [sp, #12]
 80a0c44:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a0c48:	f7ff fe78 	bl	80a093c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0c4c:	a803      	add	r0, sp, #12
 80a0c4e:	f7ff fde8 	bl	80a0822 <_ZN8particle5ErrorD1Ev>
 80a0c52:	a802      	add	r0, sp, #8
 80a0c54:	f7ff fcc6 	bl	80a05e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a0c58:	b009      	add	sp, #36	; 0x24
 80a0c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a0c5c:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a0c5e:	9d01      	ldr	r5, [sp, #4]
 80a0c60:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a0c64:	2a00      	cmp	r2, #0
 80a0c66:	d103      	bne.n	80a0c70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a0c68:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a0c6c:	2900      	cmp	r1, #0
 80a0c6e:	d1f7      	bne.n	80a0c60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a0c70:	d1ef      	bne.n	80a0c52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a0c72:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a0c74:	f3bf 8f5b 	dmb	ish
 80a0c78:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a0c7a:	f3bf 8f5b 	dmb	ish
 80a0c7e:	1d2b      	adds	r3, r5, #4
 80a0c80:	e853 6f00 	ldrex	r6, [r3]
 80a0c84:	e843 4200 	strex	r2, r4, [r3]
 80a0c88:	2a00      	cmp	r2, #0
 80a0c8a:	d1f9      	bne.n	80a0c80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a0c8c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a0c90:	2e00      	cmp	r6, #0
 80a0c92:	d0de      	beq.n	80a0c52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a0c94:	4620      	mov	r0, r4
 80a0c96:	f7ff fb67 	bl	80a0368 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a0c9a:	4607      	mov	r7, r0
 80a0c9c:	b160      	cbz	r0, 80a0cb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0c9e:	4630      	mov	r0, r6
 80a0ca0:	f105 010c 	add.w	r1, r5, #12
 80a0ca4:	f7ff fe16 	bl	80a08d4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a0ca8:	4630      	mov	r0, r6
 80a0caa:	f7ff fcce 	bl	80a064a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a0cae:	2110      	movs	r1, #16
 80a0cb0:	4630      	mov	r0, r6
 80a0cb2:	f000 fbab 	bl	80a140c <_ZdlPvj>
 80a0cb6:	e7cc      	b.n	80a0c52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0cb8:	4631      	mov	r1, r6
 80a0cba:	a803      	add	r0, sp, #12
 80a0cbc:	f7ff ff7c 	bl	80a0bb8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0cc0:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0cc2:	2010      	movs	r0, #16
 80a0cc4:	f88d 301c 	strb.w	r3, [sp, #28]
 80a0cc8:	f7ff f9e5 	bl	80a0096 <_Znwj>
 80a0ccc:	4605      	mov	r5, r0
 80a0cce:	b1d0      	cbz	r0, 80a0d06 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a0cd0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0cd2:	2014      	movs	r0, #20
 80a0cd4:	f7ff f9df 	bl	80a0096 <_Znwj>
 80a0cd8:	4604      	mov	r4, r0
 80a0cda:	b178      	cbz	r0, 80a0cfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a0cdc:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a0cde:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a0ce0:	a803      	add	r0, sp, #12
 80a0ce2:	f7ff fcbb 	bl	80a065c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0ce6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0ce8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0cea:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0cec:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a0cee:	9205      	str	r2, [sp, #20]
 80a0cf0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0cf2:	60e3      	str	r3, [r4, #12]
 80a0cf4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a0cf8:	9206      	str	r2, [sp, #24]
 80a0cfa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0cfc:	4b06      	ldr	r3, [pc, #24]	; (80a0d18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0cfe:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0d00:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0d02:	4b06      	ldr	r3, [pc, #24]	; (80a0d1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a0d04:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a0d06:	a803      	add	r0, sp, #12
 80a0d08:	f7ff fc9f 	bl	80a064a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0d0c:	2200      	movs	r2, #0
 80a0d0e:	4629      	mov	r1, r5
 80a0d10:	4803      	ldr	r0, [pc, #12]	; (80a0d20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a0d12:	f7ff fb31 	bl	80a0378 <application_thread_invoke>
 80a0d16:	e7c7      	b.n	80a0ca8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a0d18:	080a08e7 	.word	0x080a08e7
 80a0d1c:	080a0bd7 	.word	0x080a0bd7
 80a0d20:	080a1065 	.word	0x080a1065

080a0d24 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0d24:	4770      	bx	lr

080a0d26 <_ZN9IPAddressD0Ev>:
 80a0d26:	b510      	push	{r4, lr}
 80a0d28:	4604      	mov	r4, r0
 80a0d2a:	2118      	movs	r1, #24
 80a0d2c:	f000 fb6e 	bl	80a140c <_ZdlPvj>
 80a0d30:	4620      	mov	r0, r4
 80a0d32:	bd10      	pop	{r4, pc}

080a0d34 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d36:	460e      	mov	r6, r1
 80a0d38:	2400      	movs	r4, #0
 80a0d3a:	f100 0708 	add.w	r7, r0, #8
 80a0d3e:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0d40:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0d44:	220a      	movs	r2, #10
 80a0d46:	4630      	mov	r0, r6
 80a0d48:	f7ff fc29 	bl	80a059e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0d4c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0d4e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0d50:	d101      	bne.n	80a0d56 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0d52:	4620      	mov	r0, r4
 80a0d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0d56:	2c00      	cmp	r4, #0
 80a0d58:	d0f2      	beq.n	80a0d40 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0d5a:	212e      	movs	r1, #46	; 0x2e
 80a0d5c:	4630      	mov	r0, r6
 80a0d5e:	f7ff fc0f 	bl	80a0580 <_ZN5Print5printEc>
 80a0d62:	4404      	add	r4, r0
 80a0d64:	e7ec      	b.n	80a0d40 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0d68 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0d68:	b510      	push	{r4, lr}
 80a0d6a:	4604      	mov	r4, r0
 80a0d6c:	4b04      	ldr	r3, [pc, #16]	; (80a0d80 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0d6e:	2211      	movs	r2, #17
 80a0d70:	2100      	movs	r1, #0
 80a0d72:	f840 3b04 	str.w	r3, [r0], #4
 80a0d76:	f000 fb64 	bl	80a1442 <memset>
}
 80a0d7a:	4620      	mov	r0, r4
 80a0d7c:	bd10      	pop	{r4, pc}
 80a0d7e:	bf00      	nop
 80a0d80:	080a1614 	.word	0x080a1614

080a0d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0d84:	4603      	mov	r3, r0
 80a0d86:	4a07      	ldr	r2, [pc, #28]	; (80a0da4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0d88:	b510      	push	{r4, lr}
 80a0d8a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0d8e:	f101 0210 	add.w	r2, r1, #16
 80a0d92:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0d96:	4291      	cmp	r1, r2
 80a0d98:	f843 4b04 	str.w	r4, [r3], #4
 80a0d9c:	d1f9      	bne.n	80a0d92 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0d9e:	780a      	ldrb	r2, [r1, #0]
 80a0da0:	701a      	strb	r2, [r3, #0]
}
 80a0da2:	bd10      	pop	{r4, pc}
 80a0da4:	080a1614 	.word	0x080a1614

080a0da8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a0da8:	4a02      	ldr	r2, [pc, #8]	; (80a0db4 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a0daa:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0dae:	2204      	movs	r2, #4
 80a0db0:	7502      	strb	r2, [r0, #20]
}
 80a0db2:	4770      	bx	lr
 80a0db4:	080a1614 	.word	0x080a1614

080a0db8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0db8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0dba:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0dbe:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0dc2:	2304      	movs	r3, #4
 80a0dc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0dc8:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0dcc:	6044      	str	r4, [r0, #4]
 80a0dce:	7503      	strb	r3, [r0, #20]
}
 80a0dd0:	bd10      	pop	{r4, pc}
	...

080a0dd4 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0dd6:	4d04      	ldr	r5, [pc, #16]	; (80a0de8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0dd8:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0dda:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0dde:	9500      	str	r5, [sp, #0]
 80a0de0:	f7ff ffea 	bl	80a0db8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0de4:	b003      	add	sp, #12
 80a0de6:	bd30      	pop	{r4, r5, pc}
 80a0de8:	080a1614 	.word	0x080a1614

080a0dec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0dec:	7441      	strb	r1, [r0, #17]
}
 80a0dee:	4770      	bx	lr

080a0df0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0df0:	4770      	bx	lr

080a0df2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0df2:	4770      	bx	lr

080a0df4 <_ZN9USBSerial4readEv>:
{
 80a0df4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0df6:	2100      	movs	r1, #0
 80a0df8:	7c00      	ldrb	r0, [r0, #16]
 80a0dfa:	f7ff fa85 	bl	80a0308 <HAL_USB_USART_Receive_Data>
}
 80a0dfe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0e02:	bd08      	pop	{r3, pc}

080a0e04 <_ZN9USBSerial4peekEv>:
{
 80a0e04:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0e06:	2101      	movs	r1, #1
 80a0e08:	7c00      	ldrb	r0, [r0, #16]
 80a0e0a:	f7ff fa7d 	bl	80a0308 <HAL_USB_USART_Receive_Data>
}
 80a0e0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0e12:	bd08      	pop	{r3, pc}

080a0e14 <_ZN9USBSerial17availableForWriteEv>:
{
 80a0e14:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0e16:	7c00      	ldrb	r0, [r0, #16]
 80a0e18:	f7ff fa6e 	bl	80a02f8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0e1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e20:	bd08      	pop	{r3, pc}

080a0e22 <_ZN9USBSerial9availableEv>:
{
 80a0e22:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0e24:	7c00      	ldrb	r0, [r0, #16]
 80a0e26:	f7ff fa5f 	bl	80a02e8 <HAL_USB_USART_Available_Data>
}
 80a0e2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e2e:	bd08      	pop	{r3, pc}

080a0e30 <_ZN9USBSerial5writeEh>:
{
 80a0e30:	b538      	push	{r3, r4, r5, lr}
 80a0e32:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0e34:	7c00      	ldrb	r0, [r0, #16]
{
 80a0e36:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0e38:	f7ff fa5e 	bl	80a02f8 <HAL_USB_USART_Available_Data_For_Write>
 80a0e3c:	2800      	cmp	r0, #0
 80a0e3e:	dc01      	bgt.n	80a0e44 <_ZN9USBSerial5writeEh+0x14>
 80a0e40:	7c60      	ldrb	r0, [r4, #17]
 80a0e42:	b128      	cbz	r0, 80a0e50 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0e44:	4629      	mov	r1, r5
 80a0e46:	7c20      	ldrb	r0, [r4, #16]
 80a0e48:	f7ff fa66 	bl	80a0318 <HAL_USB_USART_Send_Data>
 80a0e4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0e50:	bd38      	pop	{r3, r4, r5, pc}

080a0e52 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0e52:	7c00      	ldrb	r0, [r0, #16]
 80a0e54:	f7ff ba68 	b.w	80a0328 <HAL_USB_USART_Flush_Data>

080a0e58 <_ZN9USBSerialD0Ev>:
 80a0e58:	b510      	push	{r4, lr}
 80a0e5a:	4604      	mov	r4, r0
 80a0e5c:	2114      	movs	r1, #20
 80a0e5e:	f000 fad5 	bl	80a140c <_ZdlPvj>
 80a0e62:	4620      	mov	r0, r4
 80a0e64:	bd10      	pop	{r4, pc}

080a0e66 <__tcf_1>:
 80a0e66:	4770      	bx	lr

080a0e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0e68:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0e6e:	4604      	mov	r4, r0
 80a0e70:	4608      	mov	r0, r1
 80a0e72:	2100      	movs	r1, #0
 80a0e74:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0e78:	4b04      	ldr	r3, [pc, #16]	; (80a0e8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0e7a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0e7c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0e7e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0e80:	4611      	mov	r1, r2
  _blocking = true;
 80a0e82:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0e84:	f7ff fa28 	bl	80a02d8 <HAL_USB_USART_Init>
}
 80a0e88:	4620      	mov	r0, r4
 80a0e8a:	bd10      	pop	{r4, pc}
 80a0e8c:	080a1628 	.word	0x080a1628

080a0e90 <_Z19acquireSerialBufferv>:
{
 80a0e90:	b510      	push	{r4, lr}
 80a0e92:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0e94:	2214      	movs	r2, #20
 80a0e96:	2100      	movs	r1, #0
 80a0e98:	f000 fad3 	bl	80a1442 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a0e9c:	4b05      	ldr	r3, [pc, #20]	; (80a0eb4 <_Z19acquireSerialBufferv+0x24>)
}
 80a0e9e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a0ea0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0ea2:	4b05      	ldr	r3, [pc, #20]	; (80a0eb8 <_Z19acquireSerialBufferv+0x28>)
 80a0ea4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0ea6:	f240 1301 	movw	r3, #257	; 0x101
 80a0eaa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0eac:	2381      	movs	r3, #129	; 0x81
 80a0eae:	8223      	strh	r3, [r4, #16]
}
 80a0eb0:	bd10      	pop	{r4, pc}
 80a0eb2:	bf00      	nop
 80a0eb4:	200000d4 	.word	0x200000d4
 80a0eb8:	200001d5 	.word	0x200001d5

080a0ebc <_Z16_fetch_usbserialv>:
{
 80a0ebc:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0ebe:	4d0e      	ldr	r5, [pc, #56]	; (80a0ef8 <_Z16_fetch_usbserialv+0x3c>)
{
 80a0ec0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0ec2:	a801      	add	r0, sp, #4
 80a0ec4:	f7ff ffe4 	bl	80a0e90 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0ec8:	7829      	ldrb	r1, [r5, #0]
 80a0eca:	f3bf 8f5b 	dmb	ish
 80a0ece:	f011 0401 	ands.w	r4, r1, #1
 80a0ed2:	d10e      	bne.n	80a0ef2 <_Z16_fetch_usbserialv+0x36>
 80a0ed4:	4628      	mov	r0, r5
 80a0ed6:	f7ff f8e4 	bl	80a00a2 <__cxa_guard_acquire>
 80a0eda:	b150      	cbz	r0, 80a0ef2 <_Z16_fetch_usbserialv+0x36>
 80a0edc:	4621      	mov	r1, r4
 80a0ede:	aa01      	add	r2, sp, #4
 80a0ee0:	4806      	ldr	r0, [pc, #24]	; (80a0efc <_Z16_fetch_usbserialv+0x40>)
 80a0ee2:	f7ff ffc1 	bl	80a0e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0ee6:	4628      	mov	r0, r5
 80a0ee8:	f7ff f8e0 	bl	80a00ac <__cxa_guard_release>
 80a0eec:	4804      	ldr	r0, [pc, #16]	; (80a0f00 <_Z16_fetch_usbserialv+0x44>)
 80a0eee:	f000 fa94 	bl	80a141a <atexit>
	return _usbserial;
}
 80a0ef2:	4802      	ldr	r0, [pc, #8]	; (80a0efc <_Z16_fetch_usbserialv+0x40>)
 80a0ef4:	b007      	add	sp, #28
 80a0ef6:	bd30      	pop	{r4, r5, pc}
 80a0ef8:	200000a4 	.word	0x200000a4
 80a0efc:	200000ac 	.word	0x200000ac
 80a0f00:	080a0df1 	.word	0x080a0df1

080a0f04 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0f04:	b510      	push	{r4, lr}
 80a0f06:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0f08:	2214      	movs	r2, #20
 80a0f0a:	2100      	movs	r1, #0
 80a0f0c:	f000 fa99 	bl	80a1442 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0f10:	4b05      	ldr	r3, [pc, #20]	; (80a0f28 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0f12:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a0f14:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0f16:	4b05      	ldr	r3, [pc, #20]	; (80a0f2c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0f18:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0f1a:	f240 1301 	movw	r3, #257	; 0x101
 80a0f1e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0f20:	2381      	movs	r3, #129	; 0x81
 80a0f22:	8223      	strh	r3, [r4, #16]
}
 80a0f24:	bd10      	pop	{r4, pc}
 80a0f26:	bf00      	nop
 80a0f28:	20000256 	.word	0x20000256
 80a0f2c:	20000357 	.word	0x20000357

080a0f30 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0f30:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0f32:	4c0e      	ldr	r4, [pc, #56]	; (80a0f6c <_Z17_fetch_usbserial1v+0x3c>)
{
 80a0f34:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0f36:	a801      	add	r0, sp, #4
 80a0f38:	f7ff ffe4 	bl	80a0f04 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0f3c:	7823      	ldrb	r3, [r4, #0]
 80a0f3e:	f3bf 8f5b 	dmb	ish
 80a0f42:	07db      	lsls	r3, r3, #31
 80a0f44:	d40e      	bmi.n	80a0f64 <_Z17_fetch_usbserial1v+0x34>
 80a0f46:	4620      	mov	r0, r4
 80a0f48:	f7ff f8ab 	bl	80a00a2 <__cxa_guard_acquire>
 80a0f4c:	b150      	cbz	r0, 80a0f64 <_Z17_fetch_usbserial1v+0x34>
 80a0f4e:	2101      	movs	r1, #1
 80a0f50:	aa01      	add	r2, sp, #4
 80a0f52:	4807      	ldr	r0, [pc, #28]	; (80a0f70 <_Z17_fetch_usbserial1v+0x40>)
 80a0f54:	f7ff ff88 	bl	80a0e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0f58:	4620      	mov	r0, r4
 80a0f5a:	f7ff f8a7 	bl	80a00ac <__cxa_guard_release>
 80a0f5e:	4805      	ldr	r0, [pc, #20]	; (80a0f74 <_Z17_fetch_usbserial1v+0x44>)
 80a0f60:	f000 fa5b 	bl	80a141a <atexit>
  return _usbserial1;
}
 80a0f64:	4802      	ldr	r0, [pc, #8]	; (80a0f70 <_Z17_fetch_usbserial1v+0x40>)
 80a0f66:	b006      	add	sp, #24
 80a0f68:	bd10      	pop	{r4, pc}
 80a0f6a:	bf00      	nop
 80a0f6c:	200000a8 	.word	0x200000a8
 80a0f70:	200000c0 	.word	0x200000c0
 80a0f74:	080a0e67 	.word	0x080a0e67

080a0f78 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a0f78:	4770      	bx	lr

080a0f7a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0f7a:	7441      	strb	r1, [r0, #17]
}
 80a0f7c:	4770      	bx	lr

080a0f7e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0f7e:	4770      	bx	lr

080a0f80 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a0f80:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0f82:	7c00      	ldrb	r0, [r0, #16]
 80a0f84:	f7ff f956 	bl	80a0234 <hal_usart_available_data_for_write>
}
 80a0f88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f8c:	bd08      	pop	{r3, pc}

080a0f8e <_ZN11USARTSerial9availableEv>:
{
 80a0f8e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a0f90:	7c00      	ldrb	r0, [r0, #16]
 80a0f92:	f7ff f927 	bl	80a01e4 <hal_usart_available>
}
 80a0f96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f9a:	bd08      	pop	{r3, pc}

080a0f9c <_ZN11USARTSerial4peekEv>:
{
 80a0f9c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0f9e:	7c00      	ldrb	r0, [r0, #16]
 80a0fa0:	f7ff f930 	bl	80a0204 <hal_usart_peek>
}
 80a0fa4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0fa8:	bd08      	pop	{r3, pc}

080a0faa <_ZN11USARTSerial4readEv>:
{
 80a0faa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0fac:	7c00      	ldrb	r0, [r0, #16]
 80a0fae:	f7ff f921 	bl	80a01f4 <hal_usart_read>
}
 80a0fb2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0fb6:	bd08      	pop	{r3, pc}

080a0fb8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a0fb8:	7c00      	ldrb	r0, [r0, #16]
 80a0fba:	f7ff b92b 	b.w	80a0214 <hal_usart_flush>

080a0fbe <_ZN11USARTSerial5writeEh>:
{
 80a0fbe:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0fc0:	7c46      	ldrb	r6, [r0, #17]
{
 80a0fc2:	4604      	mov	r4, r0
 80a0fc4:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0fc6:	b12e      	cbz	r6, 80a0fd4 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a0fc8:	4629      	mov	r1, r5
 80a0fca:	7c20      	ldrb	r0, [r4, #16]
}
 80a0fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a0fd0:	f7ff b900 	b.w	80a01d4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0fd4:	7c00      	ldrb	r0, [r0, #16]
 80a0fd6:	f7ff f92d 	bl	80a0234 <hal_usart_available_data_for_write>
 80a0fda:	2800      	cmp	r0, #0
 80a0fdc:	dcf4      	bgt.n	80a0fc8 <_ZN11USARTSerial5writeEh+0xa>
}
 80a0fde:	4630      	mov	r0, r6
 80a0fe0:	bd70      	pop	{r4, r5, r6, pc}

080a0fe2 <_ZN11USARTSerialD0Ev>:
 80a0fe2:	b510      	push	{r4, lr}
 80a0fe4:	4604      	mov	r4, r0
 80a0fe6:	2114      	movs	r1, #20
 80a0fe8:	f000 fa10 	bl	80a140c <_ZdlPvj>
 80a0fec:	4620      	mov	r0, r4
 80a0fee:	bd10      	pop	{r4, pc}

080a0ff0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a0ff0:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0ff4:	b510      	push	{r4, lr}
 80a0ff6:	4604      	mov	r4, r0
 80a0ff8:	4608      	mov	r0, r1
 80a0ffa:	4611      	mov	r1, r2
 80a0ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1000:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1004:	4a04      	ldr	r2, [pc, #16]	; (80a1018 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1006:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1008:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a100a:	2201      	movs	r2, #1
 80a100c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a100e:	461a      	mov	r2, r3
 80a1010:	f7ff f8d8 	bl	80a01c4 <hal_usart_init>
}
 80a1014:	4620      	mov	r0, r4
 80a1016:	bd10      	pop	{r4, pc}
 80a1018:	080a1658 	.word	0x080a1658

080a101c <_Z22__fetch_global_Serial1v>:
{
 80a101c:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a101e:	4d0c      	ldr	r5, [pc, #48]	; (80a1050 <_Z22__fetch_global_Serial1v+0x34>)
 80a1020:	7829      	ldrb	r1, [r5, #0]
 80a1022:	f3bf 8f5b 	dmb	ish
 80a1026:	f011 0401 	ands.w	r4, r1, #1
 80a102a:	d10f      	bne.n	80a104c <_Z22__fetch_global_Serial1v+0x30>
 80a102c:	4628      	mov	r0, r5
 80a102e:	f7ff f838 	bl	80a00a2 <__cxa_guard_acquire>
 80a1032:	b158      	cbz	r0, 80a104c <_Z22__fetch_global_Serial1v+0x30>
 80a1034:	4621      	mov	r1, r4
 80a1036:	4b07      	ldr	r3, [pc, #28]	; (80a1054 <_Z22__fetch_global_Serial1v+0x38>)
 80a1038:	4a07      	ldr	r2, [pc, #28]	; (80a1058 <_Z22__fetch_global_Serial1v+0x3c>)
 80a103a:	4808      	ldr	r0, [pc, #32]	; (80a105c <_Z22__fetch_global_Serial1v+0x40>)
 80a103c:	f7ff ffd8 	bl	80a0ff0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1040:	4628      	mov	r0, r5
 80a1042:	f7ff f833 	bl	80a00ac <__cxa_guard_release>
 80a1046:	4806      	ldr	r0, [pc, #24]	; (80a1060 <_Z22__fetch_global_Serial1v+0x44>)
 80a1048:	f000 f9e7 	bl	80a141a <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a104c:	4803      	ldr	r0, [pc, #12]	; (80a105c <_Z22__fetch_global_Serial1v+0x40>)
 80a104e:	bd38      	pop	{r3, r4, r5, pc}
 80a1050:	200003d8 	.word	0x200003d8
 80a1054:	20000460 	.word	0x20000460
 80a1058:	200003dc 	.word	0x200003dc
 80a105c:	200004e4 	.word	0x200004e4
 80a1060:	080a0f7f 	.word	0x080a0f7f

080a1064 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1064:	b510      	push	{r4, lr}
      if (_M_empty())
 80a1066:	6883      	ldr	r3, [r0, #8]
 80a1068:	4604      	mov	r4, r0
 80a106a:	b90b      	cbnz	r3, 80a1070 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a106c:	f000 f9d2 	bl	80a1414 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1070:	68c3      	ldr	r3, [r0, #12]
 80a1072:	4798      	blx	r3
      if (_M_manager)
 80a1074:	68a3      	ldr	r3, [r4, #8]
 80a1076:	b11b      	cbz	r3, 80a1080 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1078:	2203      	movs	r2, #3
 80a107a:	4621      	mov	r1, r4
 80a107c:	4620      	mov	r0, r4
 80a107e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1080:	4620      	mov	r0, r4
}
 80a1082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a1086:	2110      	movs	r1, #16
 80a1088:	f000 b9c0 	b.w	80a140c <_ZdlPvj>

080a108c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a108c:	4770      	bx	lr

080a108e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a108e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1090:	4606      	mov	r6, r0
 80a1092:	4615      	mov	r5, r2
 80a1094:	460c      	mov	r4, r1
 80a1096:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1098:	42bc      	cmp	r4, r7
 80a109a:	d006      	beq.n	80a10aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a109c:	6833      	ldr	r3, [r6, #0]
 80a109e:	4630      	mov	r0, r6
 80a10a0:	689b      	ldr	r3, [r3, #8]
 80a10a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a10a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a10a8:	e7f6      	b.n	80a1098 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a10aa:	4628      	mov	r0, r5
 80a10ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a10ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a10ae:	2200      	movs	r2, #0
 80a10b0:	7c00      	ldrb	r0, [r0, #16]
 80a10b2:	f7ff b8c7 	b.w	80a0244 <hal_i2c_write>

080a10b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a10b6:	2100      	movs	r1, #0
 80a10b8:	7c00      	ldrb	r0, [r0, #16]
 80a10ba:	f7ff b8cb 	b.w	80a0254 <hal_i2c_available>

080a10be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a10be:	2100      	movs	r1, #0
 80a10c0:	7c00      	ldrb	r0, [r0, #16]
 80a10c2:	f7ff b8cf 	b.w	80a0264 <hal_i2c_read>

080a10c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a10c6:	2100      	movs	r1, #0
 80a10c8:	7c00      	ldrb	r0, [r0, #16]
 80a10ca:	f7ff b8d3 	b.w	80a0274 <hal_i2c_peek>

080a10ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a10ce:	2100      	movs	r1, #0
 80a10d0:	7c00      	ldrb	r0, [r0, #16]
 80a10d2:	f7ff b8d7 	b.w	80a0284 <hal_i2c_flush>

080a10d6 <_ZN7TwoWireD0Ev>:
 80a10d6:	b510      	push	{r4, lr}
 80a10d8:	4604      	mov	r4, r0
 80a10da:	2114      	movs	r1, #20
 80a10dc:	f000 f996 	bl	80a140c <_ZdlPvj>
 80a10e0:	4620      	mov	r0, r4
 80a10e2:	bd10      	pop	{r4, pc}

080a10e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a10e4:	b510      	push	{r4, lr}
 80a10e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a10ea:	4604      	mov	r4, r0
 80a10ec:	4608      	mov	r0, r1
 80a10ee:	2100      	movs	r1, #0
 80a10f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a10f4:	4b03      	ldr	r3, [pc, #12]	; (80a1104 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a10f6:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a10f8:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a10fa:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a10fc:	f7ff f8d2 	bl	80a02a4 <hal_i2c_init>
}
 80a1100:	4620      	mov	r0, r4
 80a1102:	bd10      	pop	{r4, pc}
 80a1104:	080a1688 	.word	0x080a1688

080a1108 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1108:	2200      	movs	r2, #0
 80a110a:	6840      	ldr	r0, [r0, #4]
 80a110c:	4611      	mov	r1, r2
 80a110e:	f7ff b967 	b.w	80a03e0 <network_ready>

080a1112 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1112:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1114:	4615      	mov	r5, r2
 80a1116:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1118:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a111a:	460e      	mov	r6, r1
 80a111c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a111e:	2100      	movs	r1, #0
 80a1120:	a803      	add	r0, sp, #12
 80a1122:	f000 f98e 	bl	80a1442 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1126:	4628      	mov	r0, r5
 80a1128:	f000 f9d3 	bl	80a14d2 <strlen>
 80a112c:	2700      	movs	r7, #0
 80a112e:	b281      	uxth	r1, r0
 80a1130:	6873      	ldr	r3, [r6, #4]
 80a1132:	4628      	mov	r0, r5
 80a1134:	9700      	str	r7, [sp, #0]
 80a1136:	aa03      	add	r2, sp, #12
 80a1138:	f7ff f8fe 	bl	80a0338 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a113c:	b130      	cbz	r0, 80a114c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a113e:	4639      	mov	r1, r7
 80a1140:	4620      	mov	r0, r4
 80a1142:	f7ff fe31 	bl	80a0da8 <_ZN9IPAddressC1Em>
    }
 80a1146:	4620      	mov	r0, r4
 80a1148:	b009      	add	sp, #36	; 0x24
 80a114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a114c:	4620      	mov	r0, r4
 80a114e:	a903      	add	r1, sp, #12
 80a1150:	f7ff fe18 	bl	80a0d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1154:	e7f7      	b.n	80a1146 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a1156 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a1156:	2200      	movs	r2, #0
 80a1158:	6840      	ldr	r0, [r0, #4]
 80a115a:	4611      	mov	r1, r2
 80a115c:	f7ff b960 	b.w	80a0420 <network_listening>

080a1160 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1160:	2200      	movs	r2, #0
 80a1162:	6840      	ldr	r0, [r0, #4]
 80a1164:	4611      	mov	r1, r2
 80a1166:	f7ff b96b 	b.w	80a0440 <network_get_listen_timeout>

080a116a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a116a:	2200      	movs	r2, #0
 80a116c:	6840      	ldr	r0, [r0, #4]
 80a116e:	f7ff b95f 	b.w	80a0430 <network_set_listen_timeout>

080a1172 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1172:	2200      	movs	r2, #0
 80a1174:	6840      	ldr	r0, [r0, #4]
 80a1176:	f081 0101 	eor.w	r1, r1, #1
 80a117a:	f7ff b949 	b.w	80a0410 <network_listen>

080a117e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a117e:	2300      	movs	r3, #0
 80a1180:	6840      	ldr	r0, [r0, #4]
 80a1182:	461a      	mov	r2, r3
 80a1184:	4619      	mov	r1, r3
 80a1186:	f7ff b93b 	b.w	80a0400 <network_off>

080a118a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a118a:	2200      	movs	r2, #0
 80a118c:	6840      	ldr	r0, [r0, #4]
 80a118e:	4611      	mov	r1, r2
 80a1190:	f7ff b916 	b.w	80a03c0 <network_connecting>

080a1194 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1194:	2200      	movs	r2, #0
 80a1196:	2102      	movs	r1, #2
 80a1198:	6840      	ldr	r0, [r0, #4]
 80a119a:	f7ff b919 	b.w	80a03d0 <network_disconnect>

080a119e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a119e:	2300      	movs	r3, #0
 80a11a0:	6840      	ldr	r0, [r0, #4]
 80a11a2:	461a      	mov	r2, r3
 80a11a4:	f7ff b904 	b.w	80a03b0 <network_connect>

080a11a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a11a8:	2204      	movs	r2, #4
 80a11aa:	4b02      	ldr	r3, [pc, #8]	; (80a11b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a11ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a11ae:	4a02      	ldr	r2, [pc, #8]	; (80a11b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a11b0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a11b2:	4770      	bx	lr
 80a11b4:	200004f8 	.word	0x200004f8
 80a11b8:	080a16b0 	.word	0x080a16b0

080a11bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a11bc:	2300      	movs	r3, #0
 80a11be:	6840      	ldr	r0, [r0, #4]
 80a11c0:	461a      	mov	r2, r3
 80a11c2:	f7ff b8f5 	b.w	80a03b0 <network_connect>

080a11c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a11c6:	2200      	movs	r2, #0
 80a11c8:	2102      	movs	r1, #2
 80a11ca:	6840      	ldr	r0, [r0, #4]
 80a11cc:	f7ff b900 	b.w	80a03d0 <network_disconnect>

080a11d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a11d0:	2200      	movs	r2, #0
 80a11d2:	6840      	ldr	r0, [r0, #4]
 80a11d4:	4611      	mov	r1, r2
 80a11d6:	f7ff b8f3 	b.w	80a03c0 <network_connecting>

080a11da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a11da:	2200      	movs	r2, #0
 80a11dc:	6840      	ldr	r0, [r0, #4]
 80a11de:	4611      	mov	r1, r2
 80a11e0:	f7ff b8fe 	b.w	80a03e0 <network_ready>

080a11e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a11e4:	2300      	movs	r3, #0
 80a11e6:	6840      	ldr	r0, [r0, #4]
 80a11e8:	461a      	mov	r2, r3
 80a11ea:	4619      	mov	r1, r3
 80a11ec:	f7ff b900 	b.w	80a03f0 <network_on>

080a11f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a11f0:	2300      	movs	r3, #0
 80a11f2:	6840      	ldr	r0, [r0, #4]
 80a11f4:	461a      	mov	r2, r3
 80a11f6:	4619      	mov	r1, r3
 80a11f8:	f7ff b902 	b.w	80a0400 <network_off>

080a11fc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a11fc:	2100      	movs	r1, #0
 80a11fe:	6840      	ldr	r0, [r0, #4]
 80a1200:	f7ff b926 	b.w	80a0450 <network_is_on>

080a1204 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1204:	2100      	movs	r1, #0
 80a1206:	6840      	ldr	r0, [r0, #4]
 80a1208:	f7ff b92a 	b.w	80a0460 <network_is_off>

080a120c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a120c:	2200      	movs	r2, #0
 80a120e:	6840      	ldr	r0, [r0, #4]
 80a1210:	f081 0101 	eor.w	r1, r1, #1
 80a1214:	f7ff b8fc 	b.w	80a0410 <network_listen>

080a1218 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1218:	2200      	movs	r2, #0
 80a121a:	6840      	ldr	r0, [r0, #4]
 80a121c:	f7ff b908 	b.w	80a0430 <network_set_listen_timeout>

080a1220 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1220:	2200      	movs	r2, #0
 80a1222:	6840      	ldr	r0, [r0, #4]
 80a1224:	4611      	mov	r1, r2
 80a1226:	f7ff b90b 	b.w	80a0440 <network_get_listen_timeout>

080a122a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a122a:	2200      	movs	r2, #0
 80a122c:	6840      	ldr	r0, [r0, #4]
 80a122e:	4611      	mov	r1, r2
 80a1230:	f7ff b8f6 	b.w	80a0420 <network_listening>

080a1234 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1234:	b570      	push	{r4, r5, r6, lr}
 80a1236:	4615      	mov	r5, r2
 80a1238:	b08e      	sub	sp, #56	; 0x38
 80a123a:	4604      	mov	r4, r0
    IPAddress addr;
 80a123c:	a808      	add	r0, sp, #32
 80a123e:	f7ff fd93 	bl	80a0d68 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a1242:	2211      	movs	r2, #17
 80a1244:	2100      	movs	r1, #0
 80a1246:	a803      	add	r0, sp, #12
 80a1248:	f000 f8fb 	bl	80a1442 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a124c:	2600      	movs	r6, #0
 80a124e:	4628      	mov	r0, r5
 80a1250:	f000 f93f 	bl	80a14d2 <strlen>
 80a1254:	4b0a      	ldr	r3, [pc, #40]	; (80a1280 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1256:	9600      	str	r6, [sp, #0]
 80a1258:	b281      	uxth	r1, r0
 80a125a:	685b      	ldr	r3, [r3, #4]
 80a125c:	4628      	mov	r0, r5
 80a125e:	aa03      	add	r2, sp, #12
 80a1260:	f7ff f86a 	bl	80a0338 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1264:	b130      	cbz	r0, 80a1274 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1266:	4631      	mov	r1, r6
 80a1268:	4620      	mov	r0, r4
 80a126a:	f7ff fd9d 	bl	80a0da8 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a126e:	4620      	mov	r0, r4
 80a1270:	b00e      	add	sp, #56	; 0x38
 80a1272:	bd70      	pop	{r4, r5, r6, pc}
 80a1274:	4620      	mov	r0, r4
 80a1276:	a903      	add	r1, sp, #12
 80a1278:	f7ff fd84 	bl	80a0d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a127c:	e7f7      	b.n	80a126e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a127e:	bf00      	nop
 80a1280:	200004f8 	.word	0x200004f8

080a1284 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1284:	4b02      	ldr	r3, [pc, #8]	; (80a1290 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1286:	4a03      	ldr	r2, [pc, #12]	; (80a1294 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1288:	601a      	str	r2, [r3, #0]
 80a128a:	2200      	movs	r2, #0
 80a128c:	605a      	str	r2, [r3, #4]

} // spark
 80a128e:	4770      	bx	lr
 80a1290:	20000500 	.word	0x20000500
 80a1294:	080a16ec 	.word	0x080a16ec

080a1298 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1298:	4b02      	ldr	r3, [pc, #8]	; (80a12a4 <__tcf_0+0xc>)
 80a129a:	6898      	ldr	r0, [r3, #8]
 80a129c:	b108      	cbz	r0, 80a12a2 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a129e:	f7fe bf89 	b.w	80a01b4 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a12a2:	4770      	bx	lr
 80a12a4:	2000050c 	.word	0x2000050c

080a12a8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a12a8:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a12aa:	b570      	push	{r4, r5, r6, lr}
 80a12ac:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a12ae:	d901      	bls.n	80a12b4 <pinAvailable+0xc>
    return false;
 80a12b0:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a12b2:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a12b4:	f1a0 030d 	sub.w	r3, r0, #13
 80a12b8:	2b02      	cmp	r3, #2
 80a12ba:	d90b      	bls.n	80a12d4 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a12bc:	2801      	cmp	r0, #1
 80a12be:	d824      	bhi.n	80a130a <pinAvailable+0x62>
 80a12c0:	f000 f880 	bl	80a13c4 <_Z19__fetch_global_Wirev>
 80a12c4:	2100      	movs	r1, #0
 80a12c6:	7c00      	ldrb	r0, [r0, #16]
 80a12c8:	f7fe ffe4 	bl	80a0294 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a12cc:	f080 0001 	eor.w	r0, r0, #1
 80a12d0:	b2c0      	uxtb	r0, r0
 80a12d2:	e7ee      	b.n	80a12b2 <pinAvailable+0xa>
 80a12d4:	4e12      	ldr	r6, [pc, #72]	; (80a1320 <pinAvailable+0x78>)
 80a12d6:	7831      	ldrb	r1, [r6, #0]
 80a12d8:	f3bf 8f5b 	dmb	ish
 80a12dc:	f011 0501 	ands.w	r5, r1, #1
 80a12e0:	d10d      	bne.n	80a12fe <pinAvailable+0x56>
 80a12e2:	4630      	mov	r0, r6
 80a12e4:	f7fe fedd 	bl	80a00a2 <__cxa_guard_acquire>
 80a12e8:	b148      	cbz	r0, 80a12fe <pinAvailable+0x56>
 80a12ea:	4629      	mov	r1, r5
 80a12ec:	480d      	ldr	r0, [pc, #52]	; (80a1324 <pinAvailable+0x7c>)
 80a12ee:	f7ff f8ff 	bl	80a04f0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a12f2:	4630      	mov	r0, r6
 80a12f4:	f7fe feda 	bl	80a00ac <__cxa_guard_release>
 80a12f8:	480b      	ldr	r0, [pc, #44]	; (80a1328 <pinAvailable+0x80>)
 80a12fa:	f000 f88e 	bl	80a141a <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a12fe:	4b09      	ldr	r3, [pc, #36]	; (80a1324 <pinAvailable+0x7c>)
 80a1300:	7818      	ldrb	r0, [r3, #0]
 80a1302:	f7fe ffe1 	bl	80a02c8 <hal_spi_is_enabled>
 80a1306:	2800      	cmp	r0, #0
 80a1308:	d1d2      	bne.n	80a12b0 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a130a:	3c12      	subs	r4, #18
 80a130c:	2c01      	cmp	r4, #1
 80a130e:	d805      	bhi.n	80a131c <pinAvailable+0x74>
 80a1310:	f7ff fe84 	bl	80a101c <_Z22__fetch_global_Serial1v>
 80a1314:	7c00      	ldrb	r0, [r0, #16]
 80a1316:	f7fe ff85 	bl	80a0224 <hal_usart_is_enabled>
 80a131a:	e7d7      	b.n	80a12cc <pinAvailable+0x24>
  return true; // 'pin' is available
 80a131c:	2001      	movs	r0, #1
 80a131e:	e7c8      	b.n	80a12b2 <pinAvailable+0xa>
 80a1320:	20000508 	.word	0x20000508
 80a1324:	2000050c 	.word	0x2000050c
 80a1328:	080a1299 	.word	0x080a1299

080a132c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a132c:	2817      	cmp	r0, #23
{
 80a132e:	b538      	push	{r3, r4, r5, lr}
 80a1330:	4604      	mov	r4, r0
 80a1332:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1334:	d80a      	bhi.n	80a134c <pinMode+0x20>
 80a1336:	29ff      	cmp	r1, #255	; 0xff
 80a1338:	d008      	beq.n	80a134c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a133a:	f7ff ffb5 	bl	80a12a8 <pinAvailable>
 80a133e:	b128      	cbz	r0, 80a134c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a1340:	4629      	mov	r1, r5
 80a1342:	4620      	mov	r0, r4
}
 80a1344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a1348:	f7fe bf04 	b.w	80a0154 <HAL_Pin_Mode>
}
 80a134c:	bd38      	pop	{r3, r4, r5, pc}

080a134e <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a134e:	b510      	push	{r4, lr}
 80a1350:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1352:	f7fe ff07 	bl	80a0164 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a1356:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a1358:	b2db      	uxtb	r3, r3
 80a135a:	2b01      	cmp	r3, #1
 80a135c:	d908      	bls.n	80a1370 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a135e:	4620      	mov	r0, r4
 80a1360:	f7ff ffa2 	bl	80a12a8 <pinAvailable>
 80a1364:	b120      	cbz	r0, 80a1370 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1366:	4620      	mov	r0, r4
}
 80a1368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a136c:	f7fe bf02 	b.w	80a0174 <HAL_GPIO_Read>
}
 80a1370:	2000      	movs	r0, #0
 80a1372:	bd10      	pop	{r4, pc}

080a1374 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1374:	2300      	movs	r3, #0
 80a1376:	b507      	push	{r0, r1, r2, lr}
 80a1378:	461a      	mov	r2, r3
 80a137a:	4619      	mov	r1, r3
 80a137c:	9300      	str	r3, [sp, #0]
 80a137e:	4803      	ldr	r0, [pc, #12]	; (80a138c <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1380:	f7ff fd28 	bl	80a0dd4 <_ZN9IPAddressC1Ehhhh>
 80a1384:	b003      	add	sp, #12
 80a1386:	f85d fb04 	ldr.w	pc, [sp], #4
 80a138a:	bf00      	nop
 80a138c:	2000051c 	.word	0x2000051c

080a1390 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1390:	4770      	bx	lr
	...

080a1394 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a1394:	2300      	movs	r3, #0
{
 80a1396:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1398:	2520      	movs	r5, #32
 80a139a:	8043      	strh	r3, [r0, #2]
 80a139c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a139e:	4e08      	ldr	r6, [pc, #32]	; (80a13c0 <_Z17acquireWireBufferv+0x2c>)
{
 80a13a0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a13a2:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a13a4:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a13a6:	6085      	str	r5, [r0, #8]
 80a13a8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a13aa:	4628      	mov	r0, r5
 80a13ac:	f000 f830 	bl	80a1410 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a13b0:	4631      	mov	r1, r6
	};
 80a13b2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a13b4:	4628      	mov	r0, r5
 80a13b6:	f000 f82b 	bl	80a1410 <_ZnajRKSt9nothrow_t>
	};
 80a13ba:	60e0      	str	r0, [r4, #12]
}
 80a13bc:	4620      	mov	r0, r4
 80a13be:	bd70      	pop	{r4, r5, r6, pc}
 80a13c0:	080a1720 	.word	0x080a1720

080a13c4 <_Z19__fetch_global_Wirev>:
{
 80a13c4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a13c6:	4d0e      	ldr	r5, [pc, #56]	; (80a1400 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a13c8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a13ca:	7829      	ldrb	r1, [r5, #0]
 80a13cc:	f3bf 8f5b 	dmb	ish
 80a13d0:	f011 0401 	ands.w	r4, r1, #1
 80a13d4:	d111      	bne.n	80a13fa <_Z19__fetch_global_Wirev+0x36>
 80a13d6:	4628      	mov	r0, r5
 80a13d8:	f7fe fe63 	bl	80a00a2 <__cxa_guard_acquire>
 80a13dc:	b168      	cbz	r0, 80a13fa <_Z19__fetch_global_Wirev+0x36>
 80a13de:	a801      	add	r0, sp, #4
 80a13e0:	f7ff ffd8 	bl	80a1394 <_Z17acquireWireBufferv>
 80a13e4:	4621      	mov	r1, r4
 80a13e6:	aa01      	add	r2, sp, #4
 80a13e8:	4806      	ldr	r0, [pc, #24]	; (80a1404 <_Z19__fetch_global_Wirev+0x40>)
 80a13ea:	f7ff fe7b 	bl	80a10e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a13ee:	4628      	mov	r0, r5
 80a13f0:	f7fe fe5c 	bl	80a00ac <__cxa_guard_release>
 80a13f4:	4804      	ldr	r0, [pc, #16]	; (80a1408 <_Z19__fetch_global_Wirev+0x44>)
 80a13f6:	f000 f810 	bl	80a141a <atexit>
	return wire;
}
 80a13fa:	4802      	ldr	r0, [pc, #8]	; (80a1404 <_Z19__fetch_global_Wirev+0x40>)
 80a13fc:	b007      	add	sp, #28
 80a13fe:	bd30      	pop	{r4, r5, pc}
 80a1400:	20000534 	.word	0x20000534
 80a1404:	20000538 	.word	0x20000538
 80a1408:	080a1391 	.word	0x080a1391

080a140c <_ZdlPvj>:
 80a140c:	f7fe be47 	b.w	80a009e <_ZdlPv>

080a1410 <_ZnajRKSt9nothrow_t>:
 80a1410:	f7fe be43 	b.w	80a009a <_Znaj>

080a1414 <_ZSt25__throw_bad_function_callv>:
 80a1414:	b508      	push	{r3, lr}
 80a1416:	f7ff f853 	bl	80a04c0 <abort>

080a141a <atexit>:
 80a141a:	2300      	movs	r3, #0
 80a141c:	4601      	mov	r1, r0
 80a141e:	461a      	mov	r2, r3
 80a1420:	4618      	mov	r0, r3
 80a1422:	f000 b85f 	b.w	80a14e4 <__register_exitproc>

080a1426 <memcpy>:
 80a1426:	440a      	add	r2, r1
 80a1428:	4291      	cmp	r1, r2
 80a142a:	f100 33ff 	add.w	r3, r0, #4294967295
 80a142e:	d100      	bne.n	80a1432 <memcpy+0xc>
 80a1430:	4770      	bx	lr
 80a1432:	b510      	push	{r4, lr}
 80a1434:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1438:	4291      	cmp	r1, r2
 80a143a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a143e:	d1f9      	bne.n	80a1434 <memcpy+0xe>
 80a1440:	bd10      	pop	{r4, pc}

080a1442 <memset>:
 80a1442:	4603      	mov	r3, r0
 80a1444:	4402      	add	r2, r0
 80a1446:	4293      	cmp	r3, r2
 80a1448:	d100      	bne.n	80a144c <memset+0xa>
 80a144a:	4770      	bx	lr
 80a144c:	f803 1b01 	strb.w	r1, [r3], #1
 80a1450:	e7f9      	b.n	80a1446 <memset+0x4>
	...

080a1454 <srand>:
 80a1454:	b538      	push	{r3, r4, r5, lr}
 80a1456:	4b0d      	ldr	r3, [pc, #52]	; (80a148c <srand+0x38>)
 80a1458:	4604      	mov	r4, r0
 80a145a:	681d      	ldr	r5, [r3, #0]
 80a145c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a145e:	b97b      	cbnz	r3, 80a1480 <srand+0x2c>
 80a1460:	2018      	movs	r0, #24
 80a1462:	f7ff f81d 	bl	80a04a0 <malloc>
 80a1466:	4a0a      	ldr	r2, [pc, #40]	; (80a1490 <srand+0x3c>)
 80a1468:	4b0a      	ldr	r3, [pc, #40]	; (80a1494 <srand+0x40>)
 80a146a:	63a8      	str	r0, [r5, #56]	; 0x38
 80a146c:	e9c0 2300 	strd	r2, r3, [r0]
 80a1470:	4b09      	ldr	r3, [pc, #36]	; (80a1498 <srand+0x44>)
 80a1472:	2201      	movs	r2, #1
 80a1474:	6083      	str	r3, [r0, #8]
 80a1476:	230b      	movs	r3, #11
 80a1478:	8183      	strh	r3, [r0, #12]
 80a147a:	2300      	movs	r3, #0
 80a147c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1480:	2200      	movs	r2, #0
 80a1482:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1484:	611c      	str	r4, [r3, #16]
 80a1486:	615a      	str	r2, [r3, #20]
 80a1488:	bd38      	pop	{r3, r4, r5, pc}
 80a148a:	bf00      	nop
 80a148c:	20000008 	.word	0x20000008
 80a1490:	abcd330e 	.word	0xabcd330e
 80a1494:	e66d1234 	.word	0xe66d1234
 80a1498:	0005deec 	.word	0x0005deec

080a149c <strdup>:
 80a149c:	4b02      	ldr	r3, [pc, #8]	; (80a14a8 <strdup+0xc>)
 80a149e:	4601      	mov	r1, r0
 80a14a0:	6818      	ldr	r0, [r3, #0]
 80a14a2:	f000 b803 	b.w	80a14ac <_strdup_r>
 80a14a6:	bf00      	nop
 80a14a8:	20000008 	.word	0x20000008

080a14ac <_strdup_r>:
 80a14ac:	b570      	push	{r4, r5, r6, lr}
 80a14ae:	4604      	mov	r4, r0
 80a14b0:	4608      	mov	r0, r1
 80a14b2:	460d      	mov	r5, r1
 80a14b4:	f000 f80d 	bl	80a14d2 <strlen>
 80a14b8:	1c46      	adds	r6, r0, #1
 80a14ba:	4631      	mov	r1, r6
 80a14bc:	4620      	mov	r0, r4
 80a14be:	f7ff f807 	bl	80a04d0 <_malloc_r>
 80a14c2:	4604      	mov	r4, r0
 80a14c4:	b118      	cbz	r0, 80a14ce <_strdup_r+0x22>
 80a14c6:	4632      	mov	r2, r6
 80a14c8:	4629      	mov	r1, r5
 80a14ca:	f7ff ffac 	bl	80a1426 <memcpy>
 80a14ce:	4620      	mov	r0, r4
 80a14d0:	bd70      	pop	{r4, r5, r6, pc}

080a14d2 <strlen>:
 80a14d2:	4603      	mov	r3, r0
 80a14d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a14d8:	2a00      	cmp	r2, #0
 80a14da:	d1fb      	bne.n	80a14d4 <strlen+0x2>
 80a14dc:	1a18      	subs	r0, r3, r0
 80a14de:	3801      	subs	r0, #1
 80a14e0:	4770      	bx	lr
	...

080a14e4 <__register_exitproc>:
 80a14e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a14e8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a15a8 <__register_exitproc+0xc4>
 80a14ec:	4606      	mov	r6, r0
 80a14ee:	f8d8 0000 	ldr.w	r0, [r8]
 80a14f2:	461f      	mov	r7, r3
 80a14f4:	460d      	mov	r5, r1
 80a14f6:	4691      	mov	r9, r2
 80a14f8:	f000 f858 	bl	80a15ac <__retarget_lock_acquire_recursive>
 80a14fc:	4b26      	ldr	r3, [pc, #152]	; (80a1598 <__register_exitproc+0xb4>)
 80a14fe:	681c      	ldr	r4, [r3, #0]
 80a1500:	b934      	cbnz	r4, 80a1510 <__register_exitproc+0x2c>
 80a1502:	4c26      	ldr	r4, [pc, #152]	; (80a159c <__register_exitproc+0xb8>)
 80a1504:	601c      	str	r4, [r3, #0]
 80a1506:	4b26      	ldr	r3, [pc, #152]	; (80a15a0 <__register_exitproc+0xbc>)
 80a1508:	b113      	cbz	r3, 80a1510 <__register_exitproc+0x2c>
 80a150a:	681b      	ldr	r3, [r3, #0]
 80a150c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a1510:	6863      	ldr	r3, [r4, #4]
 80a1512:	2b1f      	cmp	r3, #31
 80a1514:	dd07      	ble.n	80a1526 <__register_exitproc+0x42>
 80a1516:	f8d8 0000 	ldr.w	r0, [r8]
 80a151a:	f000 f849 	bl	80a15b0 <__retarget_lock_release_recursive>
 80a151e:	f04f 30ff 	mov.w	r0, #4294967295
 80a1522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1526:	b35e      	cbz	r6, 80a1580 <__register_exitproc+0x9c>
 80a1528:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a152c:	b988      	cbnz	r0, 80a1552 <__register_exitproc+0x6e>
 80a152e:	4b1d      	ldr	r3, [pc, #116]	; (80a15a4 <__register_exitproc+0xc0>)
 80a1530:	b923      	cbnz	r3, 80a153c <__register_exitproc+0x58>
 80a1532:	f8d8 0000 	ldr.w	r0, [r8]
 80a1536:	f000 f83a 	bl	80a15ae <__retarget_lock_release>
 80a153a:	e7f0      	b.n	80a151e <__register_exitproc+0x3a>
 80a153c:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a1540:	f7fe ffae 	bl	80a04a0 <malloc>
 80a1544:	2800      	cmp	r0, #0
 80a1546:	d0f4      	beq.n	80a1532 <__register_exitproc+0x4e>
 80a1548:	2300      	movs	r3, #0
 80a154a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a154e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a1552:	2201      	movs	r2, #1
 80a1554:	6863      	ldr	r3, [r4, #4]
 80a1556:	2e02      	cmp	r6, #2
 80a1558:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a155c:	fa02 f203 	lsl.w	r2, r2, r3
 80a1560:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a1564:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a1568:	ea43 0302 	orr.w	r3, r3, r2
 80a156c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a1570:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a1574:	bf02      	ittt	eq
 80a1576:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a157a:	431a      	orreq	r2, r3
 80a157c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a1580:	6863      	ldr	r3, [r4, #4]
 80a1582:	f8d8 0000 	ldr.w	r0, [r8]
 80a1586:	1c5a      	adds	r2, r3, #1
 80a1588:	3302      	adds	r3, #2
 80a158a:	6062      	str	r2, [r4, #4]
 80a158c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a1590:	f000 f80e 	bl	80a15b0 <__retarget_lock_release_recursive>
 80a1594:	2000      	movs	r0, #0
 80a1596:	e7c4      	b.n	80a1522 <__register_exitproc+0x3e>
 80a1598:	200005d8 	.word	0x200005d8
 80a159c:	2000054c 	.word	0x2000054c
 80a15a0:	00000000 	.word	0x00000000
 80a15a4:	080a04a1 	.word	0x080a04a1
 80a15a8:	2000006c 	.word	0x2000006c

080a15ac <__retarget_lock_acquire_recursive>:
 80a15ac:	4770      	bx	lr

080a15ae <__retarget_lock_release>:
 80a15ae:	4770      	bx	lr

080a15b0 <__retarget_lock_release_recursive>:
 80a15b0:	4770      	bx	lr

080a15b2 <link_code_end>:
	...

080a15b4 <dynalib_user>:
 80a15b4:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a15c4:	0000 0000 6164 6174 6100 7070 2500 2d59     ....data.app.%Y-
 80a15d4:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
 80a15e4:	6100 6373 6974 656d 0000 0000               .asctime....

080a15f0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a15f8:	07ed 080a 07f3 080a 0831 080a 0801 080a     ........1.......
 80a1608:	07ef 080a                                   ....

080a160c <_ZTV9IPAddress>:
	...
 80a1614:	0d35 080a 0d25 080a 0d27 080a               5...%...'...

080a1620 <_ZTV9USBSerial>:
	...
 80a1628:	0df3 080a 0e59 080a 0e31 080a 0535 080a     ....Y...1...5...
 80a1638:	0e23 080a 0df5 080a 0e05 080a 0e53 080a     #...........S...
 80a1648:	0e15 080a 0ded 080a                         ........

080a1650 <_ZTV11USARTSerial>:
	...
 80a1658:	0f79 080a 0fe3 080a 0fbf 080a 0535 080a     y...........5...
 80a1668:	0f8f 080a 0fab 080a 0f9d 080a 0fb9 080a     ................
 80a1678:	0f7b 080a 0f81 080a                         {.......

080a1680 <_ZTV7TwoWire>:
	...
 80a1688:	108d 080a 10d7 080a 10af 080a 108f 080a     ................
 80a1698:	10b7 080a 10bf 080a 10c7 080a 10cf 080a     ................

080a16a8 <_ZTVN5spark9WiFiClassE>:
	...
 80a16b0:	119f 080a 1195 080a 118b 080a 1109 080a     ................
 80a16c0:	05d9 080a 117f 080a 11fd 080a 1205 080a     ................
 80a16d0:	1173 080a 116b 080a 1161 080a 1157 080a     s...k...a...W...
 80a16e0:	1113 080a                                   ....

080a16e4 <_ZTVN5spark12NetworkClassE>:
	...
 80a16ec:	11bd 080a 11c7 080a 11d1 080a 11db 080a     ................
 80a16fc:	11e5 080a 11f1 080a 11fd 080a 1205 080a     ................
 80a170c:	120d 080a 1219 080a 1221 080a 122b 080a     ........!...+...
 80a171c:	1235 080a                                   5...

080a1720 <_ZSt7nothrow>:
	...

080a1721 <link_const_variable_data_end>:
 80a1721:	00          	.byte	0x00
	...

080a1724 <link_constructors_location>:
 80a1724:	080a0149 	.word	0x080a0149
 80a1728:	080a0511 	.word	0x080a0511
 80a172c:	080a0621 	.word	0x080a0621
 80a1730:	080a0631 	.word	0x080a0631
 80a1734:	080a0681 	.word	0x080a0681
 80a1738:	080a11a9 	.word	0x080a11a9
 80a173c:	080a1285 	.word	0x080a1285
 80a1740:	080a1375 	.word	0x080a1375

080a1744 <link_constructors_end>:
	...
