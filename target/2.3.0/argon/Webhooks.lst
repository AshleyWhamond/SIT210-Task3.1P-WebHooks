
c:/Users/ashkl/Desktop/Deakin_22/SIT_210/Week_3/Task3.1P/Webhooks/target/2.3.0/argon/Webhooks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002b44  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d6b60  000d6b60  00006b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d6b68  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e518  000d6b6c  0001e518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000268  2003e588  2003e588  0002e588  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d6bdc  000d6bdc  00026bdc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d6c04  000d6c04  00026c04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014d0a8  00000000  00000000  00026c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00016894  00000000  00000000  00173cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002a8a5  00000000  00000000  0018a544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000027e0  00000000  00000000  001b4de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007690  00000000  00000000  001b75c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00039f8e  00000000  00000000  001bec59  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00037ec2  00000000  00000000  001f8be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010c17d  00000000  00000000  00230aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00006d80  00000000  00000000  0033cc28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fbbb 	bl	d67a8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fbc3 	bl	d67c4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e518 	.word	0x2003e518
   d4048:	000d6b6c 	.word	0x000d6b6c
   d404c:	2003e588 	.word	0x2003e588
   d4050:	2003e588 	.word	0x2003e588
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 ff7b 	bl	d4f58 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6b30 	.word	0x000d6b30
   d407c:	000d6b54 	.word	0x000d6b54

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b816 	b.w	d40b0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f83f 	bl	d4108 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bf1b 	b.w	d4ec8 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bcb7 	b.w	d4a04 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bcb5 	b.w	d4a04 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bcbb 	b.w	d4a14 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <setup>:

int dhtPin = D2;
DHT dht(dhtPin);

void setup()
{
   d40b0:	b508      	push	{r3, lr}
  pinMode(dhtPin, INPUT);
   d40b2:	4b07      	ldr	r3, [pc, #28]	; (d40d0 <setup+0x20>)
   d40b4:	2100      	movs	r1, #0
   d40b6:	8818      	ldrh	r0, [r3, #0]
   d40b8:	f001 fd0a 	bl	d5ad0 <pinMode>

  Serial.println("DHT11 Begin!!!");
   d40bc:	f001 fae6 	bl	d568c <_Z16_fetch_usbserialv>
   d40c0:	4904      	ldr	r1, [pc, #16]	; (d40d4 <setup+0x24>)
   d40c2:	f000 fe80 	bl	d4dc6 <_ZN5Print7printlnEPKc>

  dht.begin();
}
   d40c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  dht.begin();
   d40ca:	4803      	ldr	r0, [pc, #12]	; (d40d8 <setup+0x28>)
   d40cc:	f000 b8f2 	b.w	d42b4 <_ZN3DHT5beginEv>
   d40d0:	2003e518 	.word	0x2003e518
   d40d4:	000d6948 	.word	0x000d6948
   d40d8:	2003e58c 	.word	0x2003e58c

000d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40dc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d40de:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d40e0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d40e2:	b17c      	cbz	r4, d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d40e4:	6863      	ldr	r3, [r4, #4]
   d40e6:	3b01      	subs	r3, #1
   d40e8:	6063      	str	r3, [r4, #4]
   d40ea:	b95b      	cbnz	r3, d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d40ec:	6823      	ldr	r3, [r4, #0]
   d40ee:	4620      	mov	r0, r4
   d40f0:	689b      	ldr	r3, [r3, #8]
   d40f2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40f4:	68a3      	ldr	r3, [r4, #8]
   d40f6:	3b01      	subs	r3, #1
   d40f8:	60a3      	str	r3, [r4, #8]
   d40fa:	b91b      	cbnz	r3, d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d40fc:	6823      	ldr	r3, [r4, #0]
   d40fe:	4620      	mov	r0, r4
   d4100:	68db      	ldr	r3, [r3, #12]
   d4102:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4104:	4628      	mov	r0, r5
   d4106:	bd38      	pop	{r3, r4, r5, pc}

000d4108 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
   d4108:	b510      	push	{r4, lr}
   d410a:	ed2d 8b02 	vpush	{d8}
  delay(30000);
   d410e:	f247 5030 	movw	r0, #30000	; 0x7530
{
   d4112:	b088      	sub	sp, #32
  delay(30000);
   d4114:	f000 fe92 	bl	d4e3c <delay>

  // Read Humidity
  float h = dht.getHumidity();
   d4118:	4838      	ldr	r0, [pc, #224]	; (d41fc <loop+0xf4>)
   d411a:	f000 faad 	bl	d4678 <_ZN3DHT11getHumidityEv>
  // Read temperature as Celsius
  float t = dht.getTempCelcius();
   d411e:	4837      	ldr	r0, [pc, #220]	; (d41fc <loop+0xf4>)
  float h = dht.getHumidity();
   d4120:	eef0 8a40 	vmov.f32	s17, s0
  float t = dht.getTempCelcius();
   d4124:	f000 fa96 	bl	d4654 <_ZN3DHT14getTempCelciusEv>


  // Check if any reads failed
  if (isnan(h) || isnan(t))
   d4128:	eef4 8a68 	vcmp.f32	s17, s17
   d412c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float t = dht.getTempCelcius();
   d4130:	eeb0 8a40 	vmov.f32	s16, s0
  if (isnan(h) || isnan(t))
   d4134:	d604      	bvs.n	d4140 <loop+0x38>
   d4136:	eeb4 0a40 	vcmp.f32	s0, s0
   d413a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d413e:	d73a      	bvc.n	d41b6 <loop+0xae>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4140:	4c2f      	ldr	r4, [pc, #188]	; (d4200 <loop+0xf8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4142:	4930      	ldr	r1, [pc, #192]	; (d4204 <loop+0xfc>)
   d4144:	7823      	ldrb	r3, [r4, #0]
   d4146:	f88d 3000 	strb.w	r3, [sp]
   d414a:	2200      	movs	r2, #0
   d414c:	233c      	movs	r3, #60	; 0x3c
   d414e:	a804      	add	r0, sp, #16
   d4150:	f001 f85a 	bl	d5208 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4154:	a805      	add	r0, sp, #20
   d4156:	f7ff ffc1 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  {
    Particle.publish("Failed to read from DHT11 sensor!");
    Particle.publish("Hum Error", String (h));
   d415a:	eeb0 0a68 	vmov.f32	s0, s17
   d415e:	2106      	movs	r1, #6
   d4160:	a804      	add	r0, sp, #16
   d4162:	f000 fdd0 	bl	d4d06 <_ZN6StringC1Efi>
   d4166:	7823      	ldrb	r3, [r4, #0]
   d4168:	9a04      	ldr	r2, [sp, #16]
   d416a:	4927      	ldr	r1, [pc, #156]	; (d4208 <loop+0x100>)
   d416c:	f88d 3000 	strb.w	r3, [sp]
   d4170:	a802      	add	r0, sp, #8
   d4172:	233c      	movs	r3, #60	; 0x3c
   d4174:	f001 f848 	bl	d5208 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4178:	a803      	add	r0, sp, #12
   d417a:	f7ff ffaf 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d417e:	a804      	add	r0, sp, #16
   d4180:	f000 fd64 	bl	d4c4c <_ZN6StringD1Ev>
    Particle.publish("Temp Error", String (t));
   d4184:	2106      	movs	r1, #6
   d4186:	eeb0 0a48 	vmov.f32	s0, s16
   d418a:	a804      	add	r0, sp, #16
   d418c:	f000 fdbb 	bl	d4d06 <_ZN6StringC1Efi>
   d4190:	7823      	ldrb	r3, [r4, #0]
   d4192:	9a04      	ldr	r2, [sp, #16]
   d4194:	491d      	ldr	r1, [pc, #116]	; (d420c <loop+0x104>)
   d4196:	f88d 3000 	strb.w	r3, [sp]
   d419a:	233c      	movs	r3, #60	; 0x3c
   d419c:	a802      	add	r0, sp, #8
   d419e:	f001 f833 	bl	d5208 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d41a2:	a803      	add	r0, sp, #12
   d41a4:	f7ff ff9a 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    
    return;
  }

  Particle.publish("Humidity:", String(h), PRIVATE);
  Particle.publish("Temp:", String(t), PRIVATE);
   d41a8:	a804      	add	r0, sp, #16
   d41aa:	f000 fd4f 	bl	d4c4c <_ZN6StringD1Ev>
   d41ae:	b008      	add	sp, #32
   d41b0:	ecbd 8b02 	vpop	{d8}
   d41b4:	bd10      	pop	{r4, pc}
  Particle.publish("Humidity:", String(h), PRIVATE);
   d41b6:	4c16      	ldr	r4, [pc, #88]	; (d4210 <loop+0x108>)
   d41b8:	eeb0 0a68 	vmov.f32	s0, s17
   d41bc:	2106      	movs	r1, #6
   d41be:	a804      	add	r0, sp, #16
   d41c0:	f000 fda1 	bl	d4d06 <_ZN6StringC1Efi>
   d41c4:	7823      	ldrb	r3, [r4, #0]
   d41c6:	9a04      	ldr	r2, [sp, #16]
   d41c8:	4912      	ldr	r1, [pc, #72]	; (d4214 <loop+0x10c>)
   d41ca:	f88d 3000 	strb.w	r3, [sp]
   d41ce:	a802      	add	r0, sp, #8
   d41d0:	233c      	movs	r3, #60	; 0x3c
   d41d2:	f001 f819 	bl	d5208 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d41d6:	a803      	add	r0, sp, #12
   d41d8:	f7ff ff80 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d41dc:	a804      	add	r0, sp, #16
   d41de:	f000 fd35 	bl	d4c4c <_ZN6StringD1Ev>
  Particle.publish("Temp:", String(t), PRIVATE);
   d41e2:	2106      	movs	r1, #6
   d41e4:	eeb0 0a48 	vmov.f32	s0, s16
   d41e8:	a804      	add	r0, sp, #16
   d41ea:	f000 fd8c 	bl	d4d06 <_ZN6StringC1Efi>
   d41ee:	7823      	ldrb	r3, [r4, #0]
   d41f0:	f88d 3000 	strb.w	r3, [sp]
   d41f4:	9a04      	ldr	r2, [sp, #16]
   d41f6:	4908      	ldr	r1, [pc, #32]	; (d4218 <loop+0x110>)
   d41f8:	233c      	movs	r3, #60	; 0x3c
   d41fa:	e7cf      	b.n	d419c <loop+0x94>
   d41fc:	2003e58c 	.word	0x2003e58c
   d4200:	2003e588 	.word	0x2003e588
   d4204:	000d6957 	.word	0x000d6957
   d4208:	000d6979 	.word	0x000d6979
   d420c:	000d6983 	.word	0x000d6983
   d4210:	2003e589 	.word	0x2003e589
   d4214:	000d698e 	.word	0x000d698e
   d4218:	000d6998 	.word	0x000d6998

000d421c <_GLOBAL__sub_I_dhtPin>:
        val_(val) {
   d421c:	4b05      	ldr	r3, [pc, #20]	; (d4234 <_GLOBAL__sub_I_dhtPin+0x18>)
DHT dht(dhtPin);
   d421e:	4806      	ldr	r0, [pc, #24]	; (d4238 <_GLOBAL__sub_I_dhtPin+0x1c>)
   d4220:	2200      	movs	r2, #0
   d4222:	701a      	strb	r2, [r3, #0]
   d4224:	4b05      	ldr	r3, [pc, #20]	; (d423c <_GLOBAL__sub_I_dhtPin+0x20>)
   d4226:	2201      	movs	r2, #1
   d4228:	701a      	strb	r2, [r3, #0]
   d422a:	4b05      	ldr	r3, [pc, #20]	; (d4240 <_GLOBAL__sub_I_dhtPin+0x24>)
   d422c:	2206      	movs	r2, #6
   d422e:	7819      	ldrb	r1, [r3, #0]
   d4230:	f000 b83b 	b.w	d42aa <_ZN3DHTC1Ehh>
   d4234:	2003e588 	.word	0x2003e588
   d4238:	2003e58c 	.word	0x2003e58c
   d423c:	2003e589 	.word	0x2003e589
   d4240:	2003e518 	.word	0x2003e518

000d4244 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4244:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4246:	6803      	ldr	r3, [r0, #0]
   d4248:	2b2f      	cmp	r3, #47	; 0x2f
{
   d424a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d424c:	d904      	bls.n	d4258 <nrf_gpio_pin_port_decode+0x14>
   d424e:	4a07      	ldr	r2, [pc, #28]	; (d426c <nrf_gpio_pin_port_decode+0x28>)
   d4250:	2100      	movs	r1, #0
   d4252:	200a      	movs	r0, #10
   d4254:	f000 fb22 	bl	d489c <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4258:	6823      	ldr	r3, [r4, #0]
   d425a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d425c:	bf83      	ittte	hi
   d425e:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d4262:	4803      	ldrhi	r0, [pc, #12]	; (d4270 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4264:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d4266:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d426a:	bd10      	pop	{r4, pc}
   d426c:	000d46ed 	.word	0x000d46ed
   d4270:	50000300 	.word	0x50000300

000d4274 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4274:	b507      	push	{r0, r1, r2, lr}
   d4276:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4278:	a801      	add	r0, sp, #4
   d427a:	f7ff ffe3 	bl	d4244 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d427e:	9a01      	ldr	r2, [sp, #4]
   d4280:	2301      	movs	r3, #1
   d4282:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4284:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d4288:	b003      	add	sp, #12
   d428a:	f85d fb04 	ldr.w	pc, [sp], #4

000d428e <nrf_gpio_pin_read>:
{
   d428e:	b507      	push	{r0, r1, r2, lr}
   d4290:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4292:	a801      	add	r0, sp, #4
   d4294:	f7ff ffd6 	bl	d4244 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4298:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d429a:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d429e:	40d8      	lsrs	r0, r3
}
   d42a0:	f000 0001 	and.w	r0, r0, #1
   d42a4:	b003      	add	sp, #12
   d42a6:	f85d fb04 	ldr.w	pc, [sp], #4

000d42aa <_ZN3DHTC1Ehh>:
#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
	_count = count;
   d42aa:	7202      	strb	r2, [r0, #8]
	firstreading = true;
   d42ac:	2201      	movs	r2, #1
	_pin = pin;
   d42ae:	7181      	strb	r1, [r0, #6]
	firstreading = true;
   d42b0:	7402      	strb	r2, [r0, #16]
}
   d42b2:	4770      	bx	lr

000d42b4 <_ZN3DHT5beginEv>:

void DHT::begin(void)
{
   d42b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d42b8:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42ba:	4c1e      	ldr	r4, [pc, #120]	; (d4334 <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d42bc:	7980      	ldrb	r0, [r0, #6]
   d42be:	f8df 8078 	ldr.w	r8, [pc, #120]	; d4338 <_ZN3DHT5beginEv+0x84>
   d42c2:	2100      	movs	r1, #0
   d42c4:	f001 fc04 	bl	d5ad0 <pinMode>
	pinSetFast(_pin);
   d42c8:	79ae      	ldrb	r6, [r5, #6]
   d42ca:	7823      	ldrb	r3, [r4, #0]
   d42cc:	f3bf 8f5b 	dmb	ish
   d42d0:	f013 0f01 	tst.w	r3, #1
   d42d4:	d10a      	bne.n	d42ec <_ZN3DHT5beginEv+0x38>
   d42d6:	4620      	mov	r0, r4
   d42d8:	f7ff fee1 	bl	d409e <__cxa_guard_acquire>
   d42dc:	b130      	cbz	r0, d42ec <_ZN3DHT5beginEv+0x38>
   d42de:	f000 f9dd 	bl	d469c <HAL_Pin_Map>
   d42e2:	f8c8 0000 	str.w	r0, [r8]
   d42e6:	4620      	mov	r0, r4
   d42e8:	f7ff fede 	bl	d40a8 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42ec:	f8d8 3000 	ldr.w	r3, [r8]
   d42f0:	0136      	lsls	r6, r6, #4
   d42f2:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42f4:	7823      	ldrb	r3, [r4, #0]
   d42f6:	f3bf 8f5b 	dmb	ish
   d42fa:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42fc:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4300:	d40a      	bmi.n	d4318 <_ZN3DHT5beginEv+0x64>
   d4302:	480c      	ldr	r0, [pc, #48]	; (d4334 <_ZN3DHT5beginEv+0x80>)
   d4304:	f7ff fecb 	bl	d409e <__cxa_guard_acquire>
   d4308:	b130      	cbz	r0, d4318 <_ZN3DHT5beginEv+0x64>
   d430a:	f000 f9c7 	bl	d469c <HAL_Pin_Map>
   d430e:	f8c8 0000 	str.w	r0, [r8]
   d4312:	4808      	ldr	r0, [pc, #32]	; (d4334 <_ZN3DHT5beginEv+0x80>)
   d4314:	f7ff fec8 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4318:	f8d8 3000 	ldr.w	r3, [r8]
   d431c:	4433      	add	r3, r6
   d431e:	785b      	ldrb	r3, [r3, #1]
   d4320:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d4324:	ea43 0007 	orr.w	r0, r3, r7
   d4328:	f7ff ffa4 	bl	d4274 <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d432c:	2300      	movs	r3, #0
   d432e:	60eb      	str	r3, [r5, #12]
}
   d4330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4334:	2003e5a0 	.word	0x2003e5a0
   d4338:	2003e5a4 	.word	0x2003e5a4

000d433c <_ZN3DHT4readEv>:
	return NAN;
}


boolean DHT::read(void)
{
   d433c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4340:	4604      	mov	r4, r0
   d4342:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4344:	f000 f9da 	bl	d46fc <HAL_Timer_Get_Milli_Seconds>
	u32 currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   d4348:	68e3      	ldr	r3, [r4, #12]
   d434a:	4283      	cmp	r3, r0
	{
// ie there was a rollover
		_lastreadtime = 0;
   d434c:	bf84      	itt	hi
   d434e:	2300      	movhi	r3, #0
   d4350:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4352:	7c23      	ldrb	r3, [r4, #16]
   d4354:	b92b      	cbnz	r3, d4362 <_ZN3DHT4readEv+0x26>
   d4356:	68e3      	ldr	r3, [r4, #12]
   d4358:	1ac0      	subs	r0, r0, r3
   d435a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d435e:	f0c0 8160 	bcc.w	d4622 <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4362:	2500      	movs	r5, #0
   d4364:	7425      	strb	r5, [r4, #16]
   d4366:	f000 f9c9 	bl	d46fc <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d436a:	4eb0      	ldr	r6, [pc, #704]	; (d462c <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d436c:	6025      	str	r5, [r4, #0]
   d436e:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d4370:	60e0      	str	r0, [r4, #12]

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d4372:	79a7      	ldrb	r7, [r4, #6]
   d4374:	7833      	ldrb	r3, [r6, #0]
   d4376:	4dae      	ldr	r5, [pc, #696]	; (d4630 <_ZN3DHT4readEv+0x2f4>)
   d4378:	f3bf 8f5b 	dmb	ish
   d437c:	f013 0f01 	tst.w	r3, #1
   d4380:	d109      	bne.n	d4396 <_ZN3DHT4readEv+0x5a>
   d4382:	4630      	mov	r0, r6
   d4384:	f7ff fe8b 	bl	d409e <__cxa_guard_acquire>
   d4388:	b128      	cbz	r0, d4396 <_ZN3DHT4readEv+0x5a>
   d438a:	f000 f987 	bl	d469c <HAL_Pin_Map>
   d438e:	6028      	str	r0, [r5, #0]
   d4390:	4630      	mov	r0, r6
   d4392:	f7ff fe89 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4396:	682b      	ldr	r3, [r5, #0]
   d4398:	013f      	lsls	r7, r7, #4
   d439a:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d439e:	7833      	ldrb	r3, [r6, #0]
   d43a0:	f3bf 8f5b 	dmb	ish
   d43a4:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43a6:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43aa:	d409      	bmi.n	d43c0 <_ZN3DHT4readEv+0x84>
   d43ac:	489f      	ldr	r0, [pc, #636]	; (d462c <_ZN3DHT4readEv+0x2f0>)
   d43ae:	f7ff fe76 	bl	d409e <__cxa_guard_acquire>
   d43b2:	b128      	cbz	r0, d43c0 <_ZN3DHT4readEv+0x84>
   d43b4:	f000 f972 	bl	d469c <HAL_Pin_Map>
   d43b8:	6028      	str	r0, [r5, #0]
   d43ba:	489c      	ldr	r0, [pc, #624]	; (d462c <_ZN3DHT4readEv+0x2f0>)
   d43bc:	f7ff fe74 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43c0:	682b      	ldr	r3, [r5, #0]
   d43c2:	441f      	add	r7, r3
   d43c4:	7878      	ldrb	r0, [r7, #1]
   d43c6:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d43ca:	ea40 0008 	orr.w	r0, r0, r8
   d43ce:	f7ff ff51 	bl	d4274 <nrf_gpio_pin_set>
	delay(250);
   d43d2:	20fa      	movs	r0, #250	; 0xfa
   d43d4:	f000 fd32 	bl	d4e3c <delay>

// send begin signal
	pinMode(_pin, OUTPUT);
   d43d8:	79a0      	ldrb	r0, [r4, #6]
   d43da:	2101      	movs	r1, #1
   d43dc:	f001 fb78 	bl	d5ad0 <pinMode>
	pinResetFast(_pin);
   d43e0:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43e2:	7833      	ldrb	r3, [r6, #0]
   d43e4:	f3bf 8f5b 	dmb	ish
   d43e8:	07da      	lsls	r2, r3, #31
   d43ea:	d409      	bmi.n	d4400 <_ZN3DHT4readEv+0xc4>
   d43ec:	488f      	ldr	r0, [pc, #572]	; (d462c <_ZN3DHT4readEv+0x2f0>)
   d43ee:	f7ff fe56 	bl	d409e <__cxa_guard_acquire>
   d43f2:	b128      	cbz	r0, d4400 <_ZN3DHT4readEv+0xc4>
   d43f4:	f000 f952 	bl	d469c <HAL_Pin_Map>
   d43f8:	6028      	str	r0, [r5, #0]
   d43fa:	488c      	ldr	r0, [pc, #560]	; (d462c <_ZN3DHT4readEv+0x2f0>)
   d43fc:	f7ff fe54 	bl	d40a8 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4400:	682b      	ldr	r3, [r5, #0]
   d4402:	013f      	lsls	r7, r7, #4
   d4404:	5ddb      	ldrb	r3, [r3, r7]
   d4406:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d440a:	7833      	ldrb	r3, [r6, #0]
   d440c:	f3bf 8f5b 	dmb	ish
   d4410:	07db      	lsls	r3, r3, #31
   d4412:	d409      	bmi.n	d4428 <_ZN3DHT4readEv+0xec>
   d4414:	4885      	ldr	r0, [pc, #532]	; (d462c <_ZN3DHT4readEv+0x2f0>)
   d4416:	f7ff fe42 	bl	d409e <__cxa_guard_acquire>
   d441a:	b128      	cbz	r0, d4428 <_ZN3DHT4readEv+0xec>
   d441c:	f000 f93e 	bl	d469c <HAL_Pin_Map>
   d4420:	6028      	str	r0, [r5, #0]
   d4422:	4882      	ldr	r0, [pc, #520]	; (d462c <_ZN3DHT4readEv+0x2f0>)
   d4424:	f7ff fe40 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4428:	682b      	ldr	r3, [r5, #0]
   d442a:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d442c:	a803      	add	r0, sp, #12
   d442e:	787b      	ldrb	r3, [r7, #1]
   d4430:	f003 031f 	and.w	r3, r3, #31
   d4434:	ea43 0308 	orr.w	r3, r3, r8
   d4438:	9303      	str	r3, [sp, #12]
   d443a:	f7ff ff03 	bl	d4244 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d443e:	9a03      	ldr	r2, [sp, #12]
   d4440:	2301      	movs	r3, #1
   d4442:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4444:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d4448:	2014      	movs	r0, #20
   d444a:	f000 fcf7 	bl	d4e3c <delay>
	noInterrupts();
   d444e:	f001 f943 	bl	d56d8 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d4452:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4454:	7833      	ldrb	r3, [r6, #0]
   d4456:	f3bf 8f5b 	dmb	ish
   d445a:	07d8      	lsls	r0, r3, #31
   d445c:	d409      	bmi.n	d4472 <_ZN3DHT4readEv+0x136>
   d445e:	4873      	ldr	r0, [pc, #460]	; (d462c <_ZN3DHT4readEv+0x2f0>)
   d4460:	f7ff fe1d 	bl	d409e <__cxa_guard_acquire>
   d4464:	b128      	cbz	r0, d4472 <_ZN3DHT4readEv+0x136>
   d4466:	f000 f919 	bl	d469c <HAL_Pin_Map>
   d446a:	6028      	str	r0, [r5, #0]
   d446c:	486f      	ldr	r0, [pc, #444]	; (d462c <_ZN3DHT4readEv+0x2f0>)
   d446e:	f7ff fe1b 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4472:	682b      	ldr	r3, [r5, #0]
   d4474:	013f      	lsls	r7, r7, #4
   d4476:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d447a:	7833      	ldrb	r3, [r6, #0]
   d447c:	f3bf 8f5b 	dmb	ish
   d4480:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4482:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4486:	d409      	bmi.n	d449c <_ZN3DHT4readEv+0x160>
   d4488:	4868      	ldr	r0, [pc, #416]	; (d462c <_ZN3DHT4readEv+0x2f0>)
   d448a:	f7ff fe08 	bl	d409e <__cxa_guard_acquire>
   d448e:	b128      	cbz	r0, d449c <_ZN3DHT4readEv+0x160>
   d4490:	f000 f904 	bl	d469c <HAL_Pin_Map>
   d4494:	6028      	str	r0, [r5, #0]
   d4496:	4865      	ldr	r0, [pc, #404]	; (d462c <_ZN3DHT4readEv+0x2f0>)
   d4498:	f7ff fe06 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d449c:	682b      	ldr	r3, [r5, #0]
   d449e:	441f      	add	r7, r3
   d44a0:	7878      	ldrb	r0, [r7, #1]
   d44a2:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d44a6:	ea40 0008 	orr.w	r0, r0, r8
   d44aa:	f7ff fee3 	bl	d4274 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d44ae:	2028      	movs	r0, #40	; 0x28
   d44b0:	f000 f91c 	bl	d46ec <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d44b4:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44b6:	f8df 8174 	ldr.w	r8, [pc, #372]	; d462c <_ZN3DHT4readEv+0x2f0>
   d44ba:	2100      	movs	r1, #0
   d44bc:	f001 fb08 	bl	d5ad0 <pinMode>

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
   d44c0:	2700      	movs	r7, #0
	u8 laststate = HIGH;
   d44c2:	2301      	movs	r3, #1
	u8 j = 0, i;
   d44c4:	46ba      	mov	sl, r7
	u8 laststate = HIGH;
   d44c6:	9300      	str	r3, [sp, #0]
		counter = 0;
   d44c8:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d44cc:	f894 b006 	ldrb.w	fp, [r4, #6]
   d44d0:	7833      	ldrb	r3, [r6, #0]
   d44d2:	f3bf 8f5b 	dmb	ish
   d44d6:	07da      	lsls	r2, r3, #31
   d44d8:	d409      	bmi.n	d44ee <_ZN3DHT4readEv+0x1b2>
   d44da:	4640      	mov	r0, r8
   d44dc:	f7ff fddf 	bl	d409e <__cxa_guard_acquire>
   d44e0:	b128      	cbz	r0, d44ee <_ZN3DHT4readEv+0x1b2>
   d44e2:	f000 f8db 	bl	d469c <HAL_Pin_Map>
   d44e6:	6028      	str	r0, [r5, #0]
   d44e8:	4640      	mov	r0, r8
   d44ea:	f7ff fddd 	bl	d40a8 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44ee:	682b      	ldr	r3, [r5, #0]
   d44f0:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d44f4:	f813 300b 	ldrb.w	r3, [r3, fp]
   d44f8:	015b      	lsls	r3, r3, #5
   d44fa:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44fc:	7833      	ldrb	r3, [r6, #0]
   d44fe:	f3bf 8f5b 	dmb	ish
   d4502:	07db      	lsls	r3, r3, #31
   d4504:	d409      	bmi.n	d451a <_ZN3DHT4readEv+0x1de>
   d4506:	4640      	mov	r0, r8
   d4508:	f7ff fdc9 	bl	d409e <__cxa_guard_acquire>
   d450c:	b128      	cbz	r0, d451a <_ZN3DHT4readEv+0x1de>
   d450e:	f000 f8c5 	bl	d469c <HAL_Pin_Map>
   d4512:	6028      	str	r0, [r5, #0]
   d4514:	4640      	mov	r0, r8
   d4516:	f7ff fdc7 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d451a:	682b      	ldr	r3, [r5, #0]
   d451c:	445b      	add	r3, fp
   d451e:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4522:	9b01      	ldr	r3, [sp, #4]
   d4524:	f00b 0b1f 	and.w	fp, fp, #31
   d4528:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d452c:	4658      	mov	r0, fp
   d452e:	f7ff feae 	bl	d428e <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4532:	4658      	mov	r0, fp
   d4534:	f7ff feab 	bl	d428e <nrf_gpio_pin_read>
   d4538:	9b00      	ldr	r3, [sp, #0]
   d453a:	4283      	cmp	r3, r0
   d453c:	d109      	bne.n	d4552 <_ZN3DHT4readEv+0x216>
			counter++;
   d453e:	f109 0901 	add.w	r9, r9, #1
   d4542:	fa5f f989 	uxtb.w	r9, r9
   d4546:	2001      	movs	r0, #1
   d4548:	f000 f8d0 	bl	d46ec <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d454c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d4550:	d1bc      	bne.n	d44cc <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4552:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4556:	7833      	ldrb	r3, [r6, #0]
   d4558:	f3bf 8f5b 	dmb	ish
   d455c:	07d8      	lsls	r0, r3, #31
   d455e:	d409      	bmi.n	d4574 <_ZN3DHT4readEv+0x238>
   d4560:	4640      	mov	r0, r8
   d4562:	f7ff fd9c 	bl	d409e <__cxa_guard_acquire>
   d4566:	b128      	cbz	r0, d4574 <_ZN3DHT4readEv+0x238>
   d4568:	f000 f898 	bl	d469c <HAL_Pin_Map>
   d456c:	6028      	str	r0, [r5, #0]
   d456e:	4640      	mov	r0, r8
   d4570:	f7ff fd9a 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4574:	682b      	ldr	r3, [r5, #0]
   d4576:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d457a:	f813 300b 	ldrb.w	r3, [r3, fp]
   d457e:	015b      	lsls	r3, r3, #5
   d4580:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4582:	7833      	ldrb	r3, [r6, #0]
   d4584:	f3bf 8f5b 	dmb	ish
   d4588:	07d9      	lsls	r1, r3, #31
   d458a:	d409      	bmi.n	d45a0 <_ZN3DHT4readEv+0x264>
   d458c:	4640      	mov	r0, r8
   d458e:	f7ff fd86 	bl	d409e <__cxa_guard_acquire>
   d4592:	b128      	cbz	r0, d45a0 <_ZN3DHT4readEv+0x264>
   d4594:	f000 f882 	bl	d469c <HAL_Pin_Map>
   d4598:	6028      	str	r0, [r5, #0]
   d459a:	4640      	mov	r0, r8
   d459c:	f7ff fd84 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45a0:	682b      	ldr	r3, [r5, #0]
   d45a2:	445b      	add	r3, fp
   d45a4:	f893 b001 	ldrb.w	fp, [r3, #1]
   d45a8:	9b00      	ldr	r3, [sp, #0]
   d45aa:	f00b 0b1f 	and.w	fp, fp, #31
   d45ae:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d45b2:	4658      	mov	r0, fp
   d45b4:	f7ff fe6b 	bl	d428e <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d45b8:	4658      	mov	r0, fp
   d45ba:	f7ff fe68 	bl	d428e <nrf_gpio_pin_read>

		if (counter == 255) break;
   d45be:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d45c2:	b2c3      	uxtb	r3, r0
   d45c4:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d45c6:	d018      	beq.n	d45fa <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
   d45c8:	2f03      	cmp	r7, #3
   d45ca:	d911      	bls.n	d45f0 <_ZN3DHT4readEv+0x2b4>
   d45cc:	07fa      	lsls	r2, r7, #31
   d45ce:	d40f      	bmi.n	d45f0 <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d45d0:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d45d4:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d45d8:	5ca3      	ldrb	r3, [r4, r2]
   d45da:	005b      	lsls	r3, r3, #1
   d45dc:	b2db      	uxtb	r3, r3
   d45de:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d45e0:	7a21      	ldrb	r1, [r4, #8]
   d45e2:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d45e4:	bf3c      	itt	cc
   d45e6:	f043 0301 	orrcc.w	r3, r3, #1
   d45ea:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d45ec:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d45f0:	3701      	adds	r7, #1
   d45f2:	b2ff      	uxtb	r7, r7
   d45f4:	2f55      	cmp	r7, #85	; 0x55
   d45f6:	f47f af67 	bne.w	d44c8 <_ZN3DHT4readEv+0x18c>
		}

	}

	interrupts();
   d45fa:	f001 f86f 	bl	d56dc <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// Verify that the data is correct
	if ((j >= 40) &&
   d45fe:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d4602:	d910      	bls.n	d4626 <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4604:	7863      	ldrb	r3, [r4, #1]
   d4606:	7820      	ldrb	r0, [r4, #0]
   d4608:	4418      	add	r0, r3
   d460a:	78a3      	ldrb	r3, [r4, #2]
   d460c:	4418      	add	r0, r3
   d460e:	78e3      	ldrb	r3, [r4, #3]
   d4610:	4418      	add	r0, r3
   d4612:	7923      	ldrb	r3, [r4, #4]
   d4614:	b2c0      	uxtb	r0, r0
	if ((j >= 40) &&
   d4616:	1ac3      	subs	r3, r0, r3
   d4618:	4258      	negs	r0, r3
   d461a:	4158      	adcs	r0, r3
		return true;
	}

	return false;

}
   d461c:	b005      	add	sp, #20
   d461e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d4622:	2001      	movs	r0, #1
   d4624:	e7fa      	b.n	d461c <_ZN3DHT4readEv+0x2e0>
	return false;
   d4626:	2000      	movs	r0, #0
   d4628:	e7f8      	b.n	d461c <_ZN3DHT4readEv+0x2e0>
   d462a:	bf00      	nop
   d462c:	2003e5a0 	.word	0x2003e5a0
   d4630:	2003e5a4 	.word	0x2003e5a4

000d4634 <_ZN3DHT15readTemperatureEv>:
{
   d4634:	b510      	push	{r4, lr}
   d4636:	4604      	mov	r4, r0
	if (read())
   d4638:	f7ff fe80 	bl	d433c <_ZN3DHT4readEv>
   d463c:	b128      	cbz	r0, d464a <_ZN3DHT15readTemperatureEv+0x16>
		f = data[2];
   d463e:	78a3      	ldrb	r3, [r4, #2]
   d4640:	ee00 3a10 	vmov	s0, r3
   d4644:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d4648:	bd10      	pop	{r4, pc}
	return NAN;
   d464a:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4650 <_ZN3DHT15readTemperatureEv+0x1c>
   d464e:	e7fb      	b.n	d4648 <_ZN3DHT15readTemperatureEv+0x14>
   d4650:	7fc00000 	.word	0x7fc00000

000d4654 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d4654:	f7ff bfee 	b.w	d4634 <_ZN3DHT15readTemperatureEv>

000d4658 <_ZN3DHT12readHumidityEv>:
{
   d4658:	b510      	push	{r4, lr}
   d465a:	4604      	mov	r4, r0
	if (read())
   d465c:	f7ff fe6e 	bl	d433c <_ZN3DHT4readEv>
   d4660:	b128      	cbz	r0, d466e <_ZN3DHT12readHumidityEv+0x16>
		f = data[0];
   d4662:	7823      	ldrb	r3, [r4, #0]
   d4664:	ee00 3a10 	vmov	s0, r3
   d4668:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d466c:	bd10      	pop	{r4, pc}
	return NAN;
   d466e:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4674 <_ZN3DHT12readHumidityEv+0x1c>
   d4672:	e7fb      	b.n	d466c <_ZN3DHT12readHumidityEv+0x14>
   d4674:	7fc00000 	.word	0x7fc00000

000d4678 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d4678:	f7ff bfee 	b.w	d4658 <_ZN3DHT12readHumidityEv>

000d467c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <netdb_freeaddrinfo+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	689b      	ldr	r3, [r3, #8]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	00030268 	.word	0x00030268

000d468c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <netdb_getaddrinfo+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	68db      	ldr	r3, [r3, #12]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	00030268 	.word	0x00030268

000d469c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <HAL_Pin_Map+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	681b      	ldr	r3, [r3, #0]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	0003022c 	.word	0x0003022c

000d46ac <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <HAL_Pin_Mode+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	689b      	ldr	r3, [r3, #8]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	0003022c 	.word	0x0003022c

000d46bc <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <HAL_Interrupts_Enable_All+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	6a1b      	ldr	r3, [r3, #32]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	0003022c 	.word	0x0003022c

000d46cc <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <HAL_Interrupts_Disable_All+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	0003022c 	.word	0x0003022c

000d46dc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <HAL_RNG_GetRandomNumber+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	685b      	ldr	r3, [r3, #4]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030218 	.word	0x00030218

000d46ec <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <HAL_Delay_Microseconds+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	68db      	ldr	r3, [r3, #12]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	00030218 	.word	0x00030218

000d46fc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	695b      	ldr	r3, [r3, #20]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030218 	.word	0x00030218

000d470c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <os_mutex_recursive_create+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030248 	.word	0x00030248

000d471c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <inet_inet_ntop+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	695b      	ldr	r3, [r3, #20]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030264 	.word	0x00030264

000d472c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <hal_usart_init+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	681b      	ldr	r3, [r3, #0]
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	0003023c 	.word	0x0003023c

000d473c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <hal_usart_write+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	68db      	ldr	r3, [r3, #12]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	0003023c 	.word	0x0003023c

000d474c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <hal_usart_available+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	691b      	ldr	r3, [r3, #16]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	0003023c 	.word	0x0003023c

000d475c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <hal_usart_read+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	695b      	ldr	r3, [r3, #20]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	0003023c 	.word	0x0003023c

000d476c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <hal_usart_peek+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	699b      	ldr	r3, [r3, #24]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	0003023c 	.word	0x0003023c

000d477c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <hal_usart_flush+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	69db      	ldr	r3, [r3, #28]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	0003023c 	.word	0x0003023c

000d478c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <hal_usart_is_enabled+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	6a1b      	ldr	r3, [r3, #32]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	0003023c 	.word	0x0003023c

000d479c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <hal_usart_available_data_for_write+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	0003023c 	.word	0x0003023c

000d47ac <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <hal_i2c_write+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	6a1b      	ldr	r3, [r3, #32]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030228 	.word	0x00030228

000d47bc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <hal_i2c_available+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030228 	.word	0x00030228

000d47cc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <hal_i2c_read+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030228 	.word	0x00030228

000d47dc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <hal_i2c_peek+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030228 	.word	0x00030228

000d47ec <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <hal_i2c_flush+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030228 	.word	0x00030228

000d47fc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <hal_i2c_is_enabled+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030228 	.word	0x00030228

000d480c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <hal_i2c_init+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030228 	.word	0x00030228

000d481c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <hal_spi_init+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	69db      	ldr	r3, [r3, #28]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030230 	.word	0x00030230

000d482c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <hal_spi_is_enabled+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	6a1b      	ldr	r3, [r3, #32]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030230 	.word	0x00030230

000d483c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <HAL_USB_USART_Init+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	681b      	ldr	r3, [r3, #0]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	0003024c 	.word	0x0003024c

000d484c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <HAL_USB_USART_Available_Data+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	691b      	ldr	r3, [r3, #16]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	0003024c 	.word	0x0003024c

000d485c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	695b      	ldr	r3, [r3, #20]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	0003024c 	.word	0x0003024c

000d486c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <HAL_USB_USART_Receive_Data+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	699b      	ldr	r3, [r3, #24]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	0003024c 	.word	0x0003024c

000d487c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <HAL_USB_USART_Send_Data+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	69db      	ldr	r3, [r3, #28]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	0003024c 	.word	0x0003024c

000d488c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <HAL_USB_USART_Flush_Data+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	6a1b      	ldr	r3, [r3, #32]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	0003024c 	.word	0x0003024c

000d489c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <panic_+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030260 	.word	0x00030260

000d48ac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <set_system_mode+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	685b      	ldr	r3, [r3, #4]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	00030220 	.word	0x00030220

000d48bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <system_delay_ms+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	695b      	ldr	r3, [r3, #20]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	00030220 	.word	0x00030220

000d48cc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <application_thread_current+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	00030220 	.word	0x00030220

000d48dc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <application_thread_invoke+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030220 	.word	0x00030220

000d48ec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b03      	ldr	r3, [pc, #12]	; (d48fc <system_ctrl_set_app_request_handler+0x10>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d48f6:	9301      	str	r3, [sp, #4]
   d48f8:	bd08      	pop	{r3, pc}
   d48fa:	0000      	.short	0x0000
   d48fc:	00030220 	.word	0x00030220

000d4900 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b03      	ldr	r3, [pc, #12]	; (d4910 <system_ctrl_set_result+0x10>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d490a:	9301      	str	r3, [sp, #4]
   d490c:	bd08      	pop	{r3, pc}
   d490e:	0000      	.short	0x0000
   d4910:	00030220 	.word	0x00030220

000d4914 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <network_connect+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	685b      	ldr	r3, [r3, #4]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030240 	.word	0x00030240

000d4924 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <network_connecting+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	689b      	ldr	r3, [r3, #8]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030240 	.word	0x00030240

000d4934 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <network_disconnect+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	68db      	ldr	r3, [r3, #12]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030240 	.word	0x00030240

000d4944 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <network_ready+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	691b      	ldr	r3, [r3, #16]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030240 	.word	0x00030240

000d4954 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <network_on+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	695b      	ldr	r3, [r3, #20]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030240 	.word	0x00030240

000d4964 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <network_off+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	699b      	ldr	r3, [r3, #24]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030240 	.word	0x00030240

000d4974 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <network_listen+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	69db      	ldr	r3, [r3, #28]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030240 	.word	0x00030240

000d4984 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <network_listening+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6a1b      	ldr	r3, [r3, #32]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030240 	.word	0x00030240

000d4994 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <network_set_listen_timeout+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030240 	.word	0x00030240

000d49a4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <network_get_listen_timeout+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030240 	.word	0x00030240

000d49b4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <network_is_on+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030240 	.word	0x00030240

000d49c4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <network_is_off+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030240 	.word	0x00030240

000d49d4 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <spark_cloud_flag_connected+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	695b      	ldr	r3, [r3, #20]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030244 	.word	0x00030244

000d49e4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <spark_send_event+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6a1b      	ldr	r3, [r3, #32]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030244 	.word	0x00030244

000d49f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <spark_set_random_seed_from_cloud_handler+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030244 	.word	0x00030244

000d4a04 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <malloc+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	681b      	ldr	r3, [r3, #0]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	0003021c 	.word	0x0003021c

000d4a14 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <free+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	685b      	ldr	r3, [r3, #4]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	0003021c 	.word	0x0003021c

000d4a24 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <realloc+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	689b      	ldr	r3, [r3, #8]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	0003021c 	.word	0x0003021c

000d4a34 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <abort+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	0003021c 	.word	0x0003021c

000d4a44 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <_malloc_r+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	0003021c 	.word	0x0003021c

000d4a54 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <newlib_impure_ptr_callback+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003021c 	.word	0x0003021c

000d4a64 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a64:	2200      	movs	r2, #0
   d4a66:	6840      	ldr	r0, [r0, #4]
   d4a68:	4611      	mov	r1, r2
   d4a6a:	f7ff bf8b 	b.w	d4984 <network_listening>

000d4a6e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4a6e:	2200      	movs	r2, #0
   d4a70:	6840      	ldr	r0, [r0, #4]
   d4a72:	4611      	mov	r1, r2
   d4a74:	f7ff bf96 	b.w	d49a4 <network_get_listen_timeout>

000d4a78 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4a78:	6840      	ldr	r0, [r0, #4]
   d4a7a:	2200      	movs	r2, #0
   d4a7c:	f7ff bf8a 	b.w	d4994 <network_set_listen_timeout>

000d4a80 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a80:	6840      	ldr	r0, [r0, #4]
   d4a82:	2200      	movs	r2, #0
   d4a84:	f081 0101 	eor.w	r1, r1, #1
   d4a88:	f7ff bf74 	b.w	d4974 <network_listen>

000d4a8c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4a8c:	2300      	movs	r3, #0
   d4a8e:	6840      	ldr	r0, [r0, #4]
   d4a90:	461a      	mov	r2, r3
   d4a92:	4619      	mov	r1, r3
   d4a94:	f7ff bf66 	b.w	d4964 <network_off>

000d4a98 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4a98:	2300      	movs	r3, #0
   d4a9a:	6840      	ldr	r0, [r0, #4]
   d4a9c:	461a      	mov	r2, r3
   d4a9e:	4619      	mov	r1, r3
   d4aa0:	f7ff bf58 	b.w	d4954 <network_on>

000d4aa4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4aa4:	2200      	movs	r2, #0
   d4aa6:	6840      	ldr	r0, [r0, #4]
   d4aa8:	4611      	mov	r1, r2
   d4aaa:	f7ff bf4b 	b.w	d4944 <network_ready>

000d4aae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4aae:	2200      	movs	r2, #0
   d4ab0:	6840      	ldr	r0, [r0, #4]
   d4ab2:	4611      	mov	r1, r2
   d4ab4:	f7ff bf36 	b.w	d4924 <network_connecting>

000d4ab8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ab8:	6840      	ldr	r0, [r0, #4]
   d4aba:	2200      	movs	r2, #0
   d4abc:	2102      	movs	r1, #2
   d4abe:	f7ff bf39 	b.w	d4934 <network_disconnect>

000d4ac2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4ac2:	2300      	movs	r3, #0
   d4ac4:	6840      	ldr	r0, [r0, #4]
   d4ac6:	461a      	mov	r2, r3
   d4ac8:	f7ff bf24 	b.w	d4914 <network_connect>

000d4acc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4acc:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4ace:	2203      	movs	r2, #3
   d4ad0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4ad2:	4a02      	ldr	r2, [pc, #8]	; (d4adc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4ad4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4ad6:	4770      	bx	lr
   d4ad8:	2003e5a8 	.word	0x2003e5a8
   d4adc:	000d69a8 	.word	0x000d69a8

000d4ae0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4ae0:	b510      	push	{r4, lr}
   d4ae2:	4604      	mov	r4, r0
   d4ae4:	4608      	mov	r0, r1
{
    _spi = spi;
   d4ae6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4ae8:	f7ff fe98 	bl	d481c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4aec:	2300      	movs	r3, #0
   d4aee:	6063      	str	r3, [r4, #4]
}
   d4af0:	4620      	mov	r0, r4
   d4af2:	bd10      	pop	{r4, pc}

000d4af4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4af4:	4b05      	ldr	r3, [pc, #20]	; (d4b0c <_GLOBAL__sub_I_System+0x18>)
   d4af6:	2202      	movs	r2, #2
   d4af8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4afa:	4b05      	ldr	r3, [pc, #20]	; (d4b10 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d4afc:	4a05      	ldr	r2, [pc, #20]	; (d4b14 <_GLOBAL__sub_I_System+0x20>)
   d4afe:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4b00:	2000      	movs	r0, #0
   d4b02:	6018      	str	r0, [r3, #0]
   d4b04:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d4b06:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b08:	f7ff bed0 	b.w	d48ac <set_system_mode>
   d4b0c:	2003e5bc 	.word	0x2003e5bc
   d4b10:	2003e5b0 	.word	0x2003e5b0
   d4b14:	ffff0000 	.word	0xffff0000

000d4b18 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4b18:	b510      	push	{r4, lr}
   d4b1a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4b1c:	f001 fe9b 	bl	d6856 <strlen>
   d4b20:	3801      	subs	r0, #1
   d4b22:	1823      	adds	r3, r4, r0
   d4b24:	4620      	mov	r0, r4
	while(i<j){
   d4b26:	4283      	cmp	r3, r0
   d4b28:	d906      	bls.n	d4b38 <_Z11str_reversePc+0x20>
		c = *i;
   d4b2a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4b2c:	7819      	ldrb	r1, [r3, #0]
   d4b2e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4b32:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d4b36:	e7f6      	b.n	d4b26 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d4b38:	bd10      	pop	{r4, pc}

000d4b3a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4b3a:	b570      	push	{r4, r5, r6, lr}
   d4b3c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4b3e:	1e91      	subs	r1, r2, #2
   d4b40:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4b42:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d4b44:	d822      	bhi.n	d4b8c <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d4b46:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d4b48:	b16d      	cbz	r5, d4b66 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4b4a:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d4b4e:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d4b52:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d4b54:	2d09      	cmp	r5, #9
                *ptr += '0';
   d4b56:	bf94      	ite	ls
   d4b58:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4b5a:	3157      	addhi	r1, #87	; 0x57
   d4b5c:	b2c9      	uxtb	r1, r1
   d4b5e:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d4b62:	4635      	mov	r5, r6
	while(a){
   d4b64:	e7f0      	b.n	d4b48 <ultoa+0xe>
   d4b66:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d4b68:	4423      	add	r3, r4
            *ptr++ = '0';
   d4b6a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d4b6c:	4293      	cmp	r3, r2
   d4b6e:	d902      	bls.n	d4b76 <ultoa+0x3c>
            *ptr++ = '0';
   d4b70:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d4b74:	e7fa      	b.n	d4b6c <ultoa+0x32>
   d4b76:	1a1a      	subs	r2, r3, r0
   d4b78:	4283      	cmp	r3, r0
   d4b7a:	bf38      	it	cc
   d4b7c:	2200      	movcc	r2, #0

	*ptr = '\0';
   d4b7e:	2300      	movs	r3, #0
   d4b80:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d4b82:	4620      	mov	r0, r4
   d4b84:	f7ff ffc8 	bl	d4b18 <_Z11str_reversePc>
	return buffer;
   d4b88:	4620      	mov	r0, r4
}
   d4b8a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d4b8c:	2000      	movs	r0, #0
   d4b8e:	e7fc      	b.n	d4b8a <ultoa+0x50>

000d4b90 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d4b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4b94:	ec57 6b10 	vmov	r6, r7, d0
   d4b98:	4680      	mov	r8, r0
   d4b9a:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d4b9c:	ee10 0a10 	vmov	r0, s0
   d4ba0:	2200      	movs	r2, #0
   d4ba2:	2300      	movs	r3, #0
   d4ba4:	4639      	mov	r1, r7
   d4ba6:	f001 fc17 	bl	d63d8 <__aeabi_dcmplt>
   d4baa:	b128      	cbz	r0, d4bb8 <_Z4dtoadhPc+0x28>
        val = -val;
   d4bac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d4bb0:	461f      	mov	r7, r3
        *sout++ = '-';
   d4bb2:	232d      	movs	r3, #45	; 0x2d
   d4bb4:	f804 3b01 	strb.w	r3, [r4], #1
   d4bb8:	2300      	movs	r3, #0
    }
    long scale = 1;
   d4bba:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d4bbe:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d4bc0:	b2d9      	uxtb	r1, r3
   d4bc2:	4588      	cmp	r8, r1
   d4bc4:	d903      	bls.n	d4bce <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d4bc6:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d4bca:	3301      	adds	r3, #1
   d4bcc:	e7f8      	b.n	d4bc0 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d4bce:	4648      	mov	r0, r9
   d4bd0:	f001 f926 	bl	d5e20 <__aeabi_i2d>
   d4bd4:	4632      	mov	r2, r6
   d4bd6:	463b      	mov	r3, r7
   d4bd8:	f001 f98c 	bl	d5ef4 <__aeabi_dmul>
   d4bdc:	4606      	mov	r6, r0
   d4bde:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d4be0:	f001 fc5a 	bl	d6498 <__aeabi_d2ulz>
   d4be4:	4605      	mov	r5, r0
   d4be6:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d4be8:	f001 f94e 	bl	d5e88 <__aeabi_ul2d>
   d4bec:	4602      	mov	r2, r0
   d4bee:	460b      	mov	r3, r1
   d4bf0:	4630      	mov	r0, r6
   d4bf2:	4639      	mov	r1, r7
   d4bf4:	f000 ffc6 	bl	d5b84 <__aeabi_dsub>
   d4bf8:	4b13      	ldr	r3, [pc, #76]	; (d4c48 <_Z4dtoadhPc+0xb8>)
   d4bfa:	2200      	movs	r2, #0
   d4bfc:	f001 fc00 	bl	d6400 <__aeabi_dcmpge>
   d4c00:	b110      	cbz	r0, d4c08 <_Z4dtoadhPc+0x78>
        fixed++;
   d4c02:	3501      	adds	r5, #1
   d4c04:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d4c08:	464a      	mov	r2, r9
   d4c0a:	4628      	mov	r0, r5
   d4c0c:	17d3      	asrs	r3, r2, #31
   d4c0e:	4651      	mov	r1, sl
   d4c10:	f001 fc2a 	bl	d6468 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d4c14:	2301      	movs	r3, #1
   d4c16:	4615      	mov	r5, r2
   d4c18:	4621      	mov	r1, r4
   d4c1a:	220a      	movs	r2, #10
   d4c1c:	f7ff ff8d 	bl	d4b3a <ultoa>
    if (prec) {
   d4c20:	f1b8 0f00 	cmp.w	r8, #0
   d4c24:	d00d      	beq.n	d4c42 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d4c26:	4620      	mov	r0, r4
   d4c28:	f001 fe15 	bl	d6856 <strlen>
        *sout++ = '.';
   d4c2c:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d4c2e:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d4c30:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d4c32:	220a      	movs	r2, #10
   d4c34:	4643      	mov	r3, r8
   d4c36:	4628      	mov	r0, r5
   d4c38:	3101      	adds	r1, #1
    }
}
   d4c3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d4c3e:	f7ff bf7c 	b.w	d4b3a <ultoa>
}
   d4c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4c46:	bf00      	nop
   d4c48:	3fe00000 	.word	0x3fe00000

000d4c4c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4c4c:	b510      	push	{r4, lr}
   d4c4e:	4604      	mov	r4, r0
{
	free(buffer);
   d4c50:	6800      	ldr	r0, [r0, #0]
   d4c52:	f7ff fedf 	bl	d4a14 <free>
}
   d4c56:	4620      	mov	r0, r4
   d4c58:	bd10      	pop	{r4, pc}

000d4c5a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4c5a:	b510      	push	{r4, lr}
   d4c5c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4c5e:	6800      	ldr	r0, [r0, #0]
   d4c60:	b108      	cbz	r0, d4c66 <_ZN6String10invalidateEv+0xc>
   d4c62:	f7ff fed7 	bl	d4a14 <free>
	buffer = NULL;
   d4c66:	2300      	movs	r3, #0
	capacity = len = 0;
   d4c68:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4c6c:	6023      	str	r3, [r4, #0]
}
   d4c6e:	bd10      	pop	{r4, pc}

000d4c70 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4c70:	b538      	push	{r3, r4, r5, lr}
   d4c72:	4604      	mov	r4, r0
   d4c74:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4c76:	6800      	ldr	r0, [r0, #0]
   d4c78:	3101      	adds	r1, #1
   d4c7a:	f7ff fed3 	bl	d4a24 <realloc>
	if (newbuffer) {
   d4c7e:	b110      	cbz	r0, d4c86 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4c80:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4c84:	2001      	movs	r0, #1
	}
	return 0;
}
   d4c86:	bd38      	pop	{r3, r4, r5, pc}

000d4c88 <_ZN6String7reserveEj>:
{
   d4c88:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4c8a:	6803      	ldr	r3, [r0, #0]
{
   d4c8c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4c8e:	b123      	cbz	r3, d4c9a <_ZN6String7reserveEj+0x12>
   d4c90:	6843      	ldr	r3, [r0, #4]
   d4c92:	428b      	cmp	r3, r1
   d4c94:	d301      	bcc.n	d4c9a <_ZN6String7reserveEj+0x12>
   d4c96:	2001      	movs	r0, #1
}
   d4c98:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4c9a:	4620      	mov	r0, r4
   d4c9c:	f7ff ffe8 	bl	d4c70 <_ZN6String12changeBufferEj>
   d4ca0:	2800      	cmp	r0, #0
   d4ca2:	d0f9      	beq.n	d4c98 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4ca4:	68a3      	ldr	r3, [r4, #8]
   d4ca6:	2b00      	cmp	r3, #0
   d4ca8:	d1f5      	bne.n	d4c96 <_ZN6String7reserveEj+0xe>
   d4caa:	6822      	ldr	r2, [r4, #0]
   d4cac:	7013      	strb	r3, [r2, #0]
   d4cae:	e7f2      	b.n	d4c96 <_ZN6String7reserveEj+0xe>

000d4cb0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4cb2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4cb4:	4611      	mov	r1, r2
   d4cb6:	9201      	str	r2, [sp, #4]
{
   d4cb8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4cba:	f7ff ffe5 	bl	d4c88 <_ZN6String7reserveEj>
   d4cbe:	9a01      	ldr	r2, [sp, #4]
   d4cc0:	b928      	cbnz	r0, d4cce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4cc2:	4620      	mov	r0, r4
   d4cc4:	f7ff ffc9 	bl	d4c5a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4cc8:	4620      	mov	r0, r4
   d4cca:	b003      	add	sp, #12
   d4ccc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4cce:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4cd0:	4629      	mov	r1, r5
   d4cd2:	6820      	ldr	r0, [r4, #0]
   d4cd4:	f001 fd68 	bl	d67a8 <memcpy>
	buffer[len] = 0;
   d4cd8:	6822      	ldr	r2, [r4, #0]
   d4cda:	68a3      	ldr	r3, [r4, #8]
   d4cdc:	2100      	movs	r1, #0
   d4cde:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4ce0:	e7f2      	b.n	d4cc8 <_ZN6String4copyEPKcj+0x18>

000d4ce2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4ce2:	b513      	push	{r0, r1, r4, lr}
   d4ce4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4ce6:	b159      	cbz	r1, d4d00 <_ZN6StringaSEPKc+0x1e>
   d4ce8:	4608      	mov	r0, r1
   d4cea:	9101      	str	r1, [sp, #4]
   d4cec:	f001 fdb3 	bl	d6856 <strlen>
   d4cf0:	9901      	ldr	r1, [sp, #4]
   d4cf2:	4602      	mov	r2, r0
   d4cf4:	4620      	mov	r0, r4
   d4cf6:	f7ff ffdb 	bl	d4cb0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4cfa:	4620      	mov	r0, r4
   d4cfc:	b002      	add	sp, #8
   d4cfe:	bd10      	pop	{r4, pc}
	else invalidate();
   d4d00:	f7ff ffab 	bl	d4c5a <_ZN6String10invalidateEv>
   d4d04:	e7f9      	b.n	d4cfa <_ZN6StringaSEPKc+0x18>

000d4d06 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d4d06:	b530      	push	{r4, r5, lr}
   d4d08:	4604      	mov	r4, r0
	buffer = NULL;
   d4d0a:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d4d0c:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d4d0e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d4d12:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4d14:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d4d16:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d4d1a:	b2cd      	uxtb	r5, r1
   d4d1c:	f001 f892 	bl	d5e44 <__aeabi_f2d>
   d4d20:	ec41 0b10 	vmov	d0, r0, r1
   d4d24:	a901      	add	r1, sp, #4
   d4d26:	4628      	mov	r0, r5
   d4d28:	f7ff ff32 	bl	d4b90 <_Z4dtoadhPc>
        *this = buf;
   d4d2c:	a901      	add	r1, sp, #4
   d4d2e:	4620      	mov	r0, r4
   d4d30:	f7ff ffd7 	bl	d4ce2 <_ZN6StringaSEPKc>
}
   d4d34:	4620      	mov	r0, r4
   d4d36:	b00b      	add	sp, #44	; 0x2c
   d4d38:	bd30      	pop	{r4, r5, pc}

000d4d3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4d3a:	680b      	ldr	r3, [r1, #0]
   d4d3c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4d3e:	b113      	cbz	r3, d4d46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4d40:	685a      	ldr	r2, [r3, #4]
   d4d42:	3201      	adds	r2, #1
   d4d44:	605a      	str	r2, [r3, #4]
      }
   d4d46:	4770      	bx	lr

000d4d48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d48:	4802      	ldr	r0, [pc, #8]	; (d4d54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4d4a:	2300      	movs	r3, #0
   d4d4c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4d4e:	f7ff bcdd 	b.w	d470c <os_mutex_recursive_create>
   d4d52:	bf00      	nop
   d4d54:	2003e5c0 	.word	0x2003e5c0

000d4d58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d5a:	4606      	mov	r6, r0
   d4d5c:	460d      	mov	r5, r1
  size_t n = 0;
   d4d5e:	188f      	adds	r7, r1, r2
   d4d60:	2400      	movs	r4, #0
  while (size--) {
   d4d62:	42bd      	cmp	r5, r7
   d4d64:	d00c      	beq.n	d4d80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4d66:	6833      	ldr	r3, [r6, #0]
   d4d68:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4d6c:	689b      	ldr	r3, [r3, #8]
   d4d6e:	4630      	mov	r0, r6
   d4d70:	4798      	blx	r3
     if (chunk>=0)
   d4d72:	1e03      	subs	r3, r0, #0
   d4d74:	db01      	blt.n	d4d7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4d76:	441c      	add	r4, r3
  while (size--) {
   d4d78:	e7f3      	b.n	d4d62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d7a:	2c00      	cmp	r4, #0
   d4d7c:	bf08      	it	eq
   d4d7e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d80:	4620      	mov	r0, r4
   d4d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d84 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d84:	b513      	push	{r0, r1, r4, lr}
   d4d86:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4d88:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4d8a:	b159      	cbz	r1, d4da4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4d8c:	9101      	str	r1, [sp, #4]
   d4d8e:	f001 fd62 	bl	d6856 <strlen>
   d4d92:	6823      	ldr	r3, [r4, #0]
   d4d94:	9901      	ldr	r1, [sp, #4]
   d4d96:	68db      	ldr	r3, [r3, #12]
   d4d98:	4602      	mov	r2, r0
   d4d9a:	4620      	mov	r0, r4
    }
   d4d9c:	b002      	add	sp, #8
   d4d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4da2:	4718      	bx	r3
    }
   d4da4:	b002      	add	sp, #8
   d4da6:	bd10      	pop	{r4, pc}

000d4da8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4da8:	6803      	ldr	r3, [r0, #0]
   d4daa:	689b      	ldr	r3, [r3, #8]
   d4dac:	4718      	bx	r3

000d4dae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4dae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4db0:	210d      	movs	r1, #13
{
   d4db2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4db4:	f7ff fff8 	bl	d4da8 <_ZN5Print5printEc>
  n += print('\n');
   d4db8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4dba:	4604      	mov	r4, r0
  n += print('\n');
   d4dbc:	4628      	mov	r0, r5
   d4dbe:	f7ff fff3 	bl	d4da8 <_ZN5Print5printEc>
  return n;
}
   d4dc2:	4420      	add	r0, r4
   d4dc4:	bd38      	pop	{r3, r4, r5, pc}

000d4dc6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4dc6:	b538      	push	{r3, r4, r5, lr}
   d4dc8:	4605      	mov	r5, r0
  return write(str);
   d4dca:	f7ff ffdb 	bl	d4d84 <_ZN5Print5writeEPKc>
   d4dce:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4dd0:	4628      	mov	r0, r5
   d4dd2:	f7ff ffec 	bl	d4dae <_ZN5Print7printlnEv>
  return n;
}
   d4dd6:	4420      	add	r0, r4
   d4dd8:	bd38      	pop	{r3, r4, r5, pc}

000d4dda <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4dda:	b530      	push	{r4, r5, lr}
   d4ddc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4dde:	2300      	movs	r3, #0
   d4de0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4de4:	2a01      	cmp	r2, #1
   d4de6:	bf98      	it	ls
   d4de8:	220a      	movls	r2, #10
   d4dea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4dec:	460d      	mov	r5, r1
   d4dee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4df2:	fb01 5312 	mls	r3, r1, r2, r5
   d4df6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4dfa:	2b09      	cmp	r3, #9
   d4dfc:	bf94      	ite	ls
   d4dfe:	3330      	addls	r3, #48	; 0x30
   d4e00:	3337      	addhi	r3, #55	; 0x37
   d4e02:	b2db      	uxtb	r3, r3
  } while(n);
   d4e04:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e06:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4e0a:	d9ef      	bls.n	d4dec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4e0c:	4621      	mov	r1, r4
   d4e0e:	f7ff ffb9 	bl	d4d84 <_ZN5Print5writeEPKc>
}
   d4e12:	b00b      	add	sp, #44	; 0x2c
   d4e14:	bd30      	pop	{r4, r5, pc}
	...

000d4e18 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e18:	4b01      	ldr	r3, [pc, #4]	; (d4e20 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4e1a:	4a02      	ldr	r2, [pc, #8]	; (d4e24 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4e1c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4e1e:	4770      	bx	lr
   d4e20:	2003e5c4 	.word	0x2003e5c4
   d4e24:	000d69dc 	.word	0x000d69dc

000d4e28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4e28:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4e2a:	681a      	ldr	r2, [r3, #0]
   d4e2c:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4e2e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4e30:	4770      	bx	lr
   d4e32:	bf00      	nop
   d4e34:	2003e51c 	.word	0x2003e51c
   d4e38:	2003e5c8 	.word	0x2003e5c8

000d4e3c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4e3c:	2100      	movs	r1, #0
   d4e3e:	f7ff bd3d 	b.w	d48bc <system_delay_ms>

000d4e42 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e42:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4e44:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4e46:	4604      	mov	r4, r0
      if (_M_manager)
   d4e48:	b113      	cbz	r3, d4e50 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e4a:	2203      	movs	r2, #3
   d4e4c:	4601      	mov	r1, r0
   d4e4e:	4798      	blx	r3
    }
   d4e50:	4620      	mov	r0, r4
   d4e52:	bd10      	pop	{r4, pc}

000d4e54 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4e54:	b513      	push	{r0, r1, r4, lr}
   d4e56:	460b      	mov	r3, r1
   d4e58:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e5a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4e5e:	466c      	mov	r4, sp
   d4e60:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4e64:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4e68:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4e6c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4e70:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4e74:	b002      	add	sp, #8
   d4e76:	bd10      	pop	{r4, pc}

000d4e78 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4e78:	4b01      	ldr	r3, [pc, #4]	; (d4e80 <_GLOBAL__sub_I_RGB+0x8>)
   d4e7a:	2200      	movs	r2, #0
   d4e7c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d4e7e:	4770      	bx	lr
   d4e80:	2003e5cc 	.word	0x2003e5cc

000d4e84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4e84:	4b01      	ldr	r3, [pc, #4]	; (d4e8c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4e86:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4e88:	4770      	bx	lr
   d4e8a:	bf00      	nop
   d4e8c:	2003e520 	.word	0x2003e520

000d4e90 <serialEventRun>:
{
   d4e90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4e92:	4b0b      	ldr	r3, [pc, #44]	; (d4ec0 <serialEventRun+0x30>)
   d4e94:	b143      	cbz	r3, d4ea8 <serialEventRun+0x18>
   d4e96:	f000 fbf9 	bl	d568c <_Z16_fetch_usbserialv>
   d4e9a:	6803      	ldr	r3, [r0, #0]
   d4e9c:	691b      	ldr	r3, [r3, #16]
   d4e9e:	4798      	blx	r3
   d4ea0:	2800      	cmp	r0, #0
   d4ea2:	dd01      	ble.n	d4ea8 <serialEventRun+0x18>
        serialEvent();
   d4ea4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4ea8:	4b06      	ldr	r3, [pc, #24]	; (d4ec4 <serialEventRun+0x34>)
   d4eaa:	b143      	cbz	r3, d4ebe <serialEventRun+0x2e>
   d4eac:	f000 fc6c 	bl	d5788 <_Z22__fetch_global_Serial1v>
   d4eb0:	6803      	ldr	r3, [r0, #0]
   d4eb2:	691b      	ldr	r3, [r3, #16]
   d4eb4:	4798      	blx	r3
   d4eb6:	2800      	cmp	r0, #0
   d4eb8:	dd01      	ble.n	d4ebe <serialEventRun+0x2e>
        serialEvent1();
   d4eba:	f3af 8000 	nop.w
}
   d4ebe:	bd08      	pop	{r3, pc}
	...

000d4ec8 <_post_loop>:
{
   d4ec8:	b508      	push	{r3, lr}
	serialEventRun();
   d4eca:	f7ff ffe1 	bl	d4e90 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4ece:	f7ff fc15 	bl	d46fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4ed2:	4b01      	ldr	r3, [pc, #4]	; (d4ed8 <_post_loop+0x10>)
   d4ed4:	6018      	str	r0, [r3, #0]
}
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	2003e738 	.word	0x2003e738

000d4edc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4edc:	4805      	ldr	r0, [pc, #20]	; (d4ef4 <_Z33system_initialize_user_backup_ramv+0x18>)
   d4ede:	4a06      	ldr	r2, [pc, #24]	; (d4ef8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d4ee0:	4906      	ldr	r1, [pc, #24]	; (d4efc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d4ee2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4ee4:	1a12      	subs	r2, r2, r0
   d4ee6:	f001 fc5f 	bl	d67a8 <memcpy>
    __backup_sram_signature = signature;
   d4eea:	4b05      	ldr	r3, [pc, #20]	; (d4f00 <_Z33system_initialize_user_backup_ramv+0x24>)
   d4eec:	4a05      	ldr	r2, [pc, #20]	; (d4f04 <_Z33system_initialize_user_backup_ramv+0x28>)
   d4eee:	601a      	str	r2, [r3, #0]
}
   d4ef0:	bd08      	pop	{r3, pc}
   d4ef2:	bf00      	nop
   d4ef4:	2003f400 	.word	0x2003f400
   d4ef8:	2003f404 	.word	0x2003f404
   d4efc:	000d6b68 	.word	0x000d6b68
   d4f00:	2003f400 	.word	0x2003f400
   d4f04:	9a271c1e 	.word	0x9a271c1e

000d4f08 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4f08:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f0a:	2300      	movs	r3, #0
   d4f0c:	9300      	str	r3, [sp, #0]
   d4f0e:	461a      	mov	r2, r3
   d4f10:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f14:	f7ff fcf4 	bl	d4900 <system_ctrl_set_result>
}
   d4f18:	b003      	add	sp, #12
   d4f1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4f20 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4f20:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4f22:	8843      	ldrh	r3, [r0, #2]
   d4f24:	2b0a      	cmp	r3, #10
   d4f26:	d008      	beq.n	d4f3a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4f28:	2b50      	cmp	r3, #80	; 0x50
   d4f2a:	d10b      	bne.n	d4f44 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4f2c:	4b09      	ldr	r3, [pc, #36]	; (d4f54 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4f2e:	681b      	ldr	r3, [r3, #0]
   d4f30:	b14b      	cbz	r3, d4f46 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4f32:	b003      	add	sp, #12
   d4f34:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4f38:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4f3a:	f7ff ffe5 	bl	d4f08 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4f3e:	b003      	add	sp, #12
   d4f40:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f44:	2300      	movs	r3, #0
   d4f46:	9300      	str	r3, [sp, #0]
   d4f48:	461a      	mov	r2, r3
   d4f4a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f4e:	f7ff fcd7 	bl	d4900 <system_ctrl_set_result>
}
   d4f52:	e7f4      	b.n	d4f3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4f54:	2003e5e0 	.word	0x2003e5e0

000d4f58 <module_user_init_hook>:
{
   d4f58:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4f5a:	4812      	ldr	r0, [pc, #72]	; (d4fa4 <module_user_init_hook+0x4c>)
   d4f5c:	2100      	movs	r1, #0
   d4f5e:	f7ff fd79 	bl	d4a54 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d4f62:	4b11      	ldr	r3, [pc, #68]	; (d4fa8 <module_user_init_hook+0x50>)
   d4f64:	681a      	ldr	r2, [r3, #0]
   d4f66:	4b11      	ldr	r3, [pc, #68]	; (d4fac <module_user_init_hook+0x54>)
   d4f68:	429a      	cmp	r2, r3
   d4f6a:	4b11      	ldr	r3, [pc, #68]	; (d4fb0 <module_user_init_hook+0x58>)
   d4f6c:	bf0c      	ite	eq
   d4f6e:	2201      	moveq	r2, #1
   d4f70:	2200      	movne	r2, #0
   d4f72:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4f74:	d001      	beq.n	d4f7a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d4f76:	f7ff ffb1 	bl	d4edc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4f7a:	f7ff fbaf 	bl	d46dc <HAL_RNG_GetRandomNumber>
   d4f7e:	4604      	mov	r4, r0
    srand(seed);
   d4f80:	f001 fc28 	bl	d67d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4f84:	4b0b      	ldr	r3, [pc, #44]	; (d4fb4 <module_user_init_hook+0x5c>)
   d4f86:	b113      	cbz	r3, d4f8e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d4f88:	4620      	mov	r0, r4
   d4f8a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4f8e:	2100      	movs	r1, #0
   d4f90:	4808      	ldr	r0, [pc, #32]	; (d4fb4 <module_user_init_hook+0x5c>)
   d4f92:	f7ff fd2f 	bl	d49f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4f9a:	4807      	ldr	r0, [pc, #28]	; (d4fb8 <module_user_init_hook+0x60>)
   d4f9c:	2100      	movs	r1, #0
   d4f9e:	f7ff bca5 	b.w	d48ec <system_ctrl_set_app_request_handler>
   d4fa2:	bf00      	nop
   d4fa4:	000d4e85 	.word	0x000d4e85
   d4fa8:	2003f400 	.word	0x2003f400
   d4fac:	9a271c1e 	.word	0x9a271c1e
   d4fb0:	2003e5dc 	.word	0x2003e5dc
   d4fb4:	00000000 	.word	0x00000000
   d4fb8:	000d4f21 	.word	0x000d4f21

000d4fbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4fbc:	4770      	bx	lr

000d4fbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4fbe:	2000      	movs	r0, #0
   d4fc0:	4770      	bx	lr

000d4fc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4fc2:	b510      	push	{r4, lr}
   d4fc4:	2110      	movs	r1, #16
   d4fc6:	4604      	mov	r4, r0
   d4fc8:	f000 fdd0 	bl	d5b6c <_ZdlPvj>
   d4fcc:	4620      	mov	r0, r4
   d4fce:	bd10      	pop	{r4, pc}

000d4fd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4fd0:	b508      	push	{r3, lr}
      { delete this; }
   d4fd2:	f7ff fff6 	bl	d4fc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4fd6:	bd08      	pop	{r3, pc}

000d4fd8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4fd8:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4fda:	2200      	movs	r2, #0
   d4fdc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4fe0:	6002      	str	r2, [r0, #0]
   d4fe2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4fe4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fe6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4fe8:	680c      	ldr	r4, [r1, #0]
   d4fea:	8085      	strh	r5, [r0, #4]
   d4fec:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fee:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4ff0:	bd30      	pop	{r4, r5, pc}

000d4ff2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4ff2:	b510      	push	{r4, lr}
   d4ff4:	4604      	mov	r4, r0
    free((void*)msg_);
   d4ff6:	6800      	ldr	r0, [r0, #0]
   d4ff8:	f7ff fd0c 	bl	d4a14 <free>
}
   d4ffc:	4620      	mov	r0, r4
   d4ffe:	bd10      	pop	{r4, pc}

000d5000 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5000:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5002:	68c4      	ldr	r4, [r0, #12]
   d5004:	b1f4      	cbz	r4, d5044 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5006:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5008:	2b02      	cmp	r3, #2
   d500a:	d103      	bne.n	d5014 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d500c:	f104 000c 	add.w	r0, r4, #12
   d5010:	f7ff ffef 	bl	d4ff2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5014:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5016:	b135      	cbz	r5, d5026 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5018:	4628      	mov	r0, r5
   d501a:	f7ff ff12 	bl	d4e42 <_ZNSt14_Function_baseD1Ev>
   d501e:	2110      	movs	r1, #16
   d5020:	4628      	mov	r0, r5
   d5022:	f000 fda3 	bl	d5b6c <_ZdlPvj>
   d5026:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5028:	b135      	cbz	r5, d5038 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d502a:	4628      	mov	r0, r5
   d502c:	f7ff ff09 	bl	d4e42 <_ZNSt14_Function_baseD1Ev>
   d5030:	2110      	movs	r1, #16
   d5032:	4628      	mov	r0, r5
   d5034:	f000 fd9a 	bl	d5b6c <_ZdlPvj>
   d5038:	4620      	mov	r0, r4
   d503a:	2114      	movs	r1, #20
   d503c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5040:	f000 bd94 	b.w	d5b6c <_ZdlPvj>
   d5044:	bd38      	pop	{r3, r4, r5, pc}

000d5046 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5046:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5048:	460e      	mov	r6, r1
   d504a:	4604      	mov	r4, r0
   d504c:	f856 3b04 	ldr.w	r3, [r6], #4
   d5050:	9300      	str	r3, [sp, #0]
   d5052:	460d      	mov	r5, r1
   d5054:	a801      	add	r0, sp, #4
   d5056:	4631      	mov	r1, r6
   d5058:	f7ff fe6f 	bl	d4d3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d505c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d505e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5060:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5062:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5064:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5066:	2300      	movs	r3, #0
   d5068:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d506a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d506c:	f7ff f836 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5070:	4630      	mov	r0, r6
   d5072:	f7ff f833 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5076:	4628      	mov	r0, r5
   d5078:	2108      	movs	r1, #8
   d507a:	f000 fd77 	bl	d5b6c <_ZdlPvj>
        return p;
    }
   d507e:	4620      	mov	r0, r4
   d5080:	b002      	add	sp, #8
   d5082:	bd70      	pop	{r4, r5, r6, pc}

000d5084 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5084:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5086:	b510      	push	{r4, lr}
      if (_M_empty())
   d5088:	b90a      	cbnz	r2, d508e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d508a:	f000 fd73 	bl	d5b74 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d508e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5092:	68c3      	ldr	r3, [r0, #12]
   d5094:	4718      	bx	r3

000d5096 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5096:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5098:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d509a:	f100 0110 	add.w	r1, r0, #16
   d509e:	f7ff fff1 	bl	d5084 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d50a2:	bd08      	pop	{r3, pc}

000d50a4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d50a4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d50a6:	b510      	push	{r4, lr}
      if (_M_empty())
   d50a8:	b90a      	cbnz	r2, d50ae <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d50aa:	f000 fd63 	bl	d5b74 <_ZSt25__throw_bad_function_callv>
    }
   d50ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d50b2:	68c3      	ldr	r3, [r0, #12]
   d50b4:	4718      	bx	r3

000d50b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d50b6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d50b8:	6800      	ldr	r0, [r0, #0]
   d50ba:	f100 0110 	add.w	r1, r0, #16
   d50be:	f7ff fff1 	bl	d50a4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d50c2:	bd08      	pop	{r3, pc}

000d50c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d50c4:	b538      	push	{r3, r4, r5, lr}
   d50c6:	2300      	movs	r3, #0
   d50c8:	4604      	mov	r4, r0
   d50ca:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d50cc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d50ce:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d50d0:	f7fe ffdf 	bl	d4092 <_Znwj>
   d50d4:	b128      	cbz	r0, d50e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d50d6:	2301      	movs	r3, #1
   d50d8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d50dc:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d50de:	6003      	str	r3, [r0, #0]
   d50e0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d50e2:	6020      	str	r0, [r4, #0]
	}
   d50e4:	4620      	mov	r0, r4
   d50e6:	bd38      	pop	{r3, r4, r5, pc}
   d50e8:	000d6a04 	.word	0x000d6a04

000d50ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d50ec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d50ee:	2300      	movs	r3, #0
   d50f0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d50f2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d50f4:	4604      	mov	r4, r0
   d50f6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d50f8:	b12b      	cbz	r3, d5106 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d50fa:	2202      	movs	r2, #2
   d50fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d50fe:	68eb      	ldr	r3, [r5, #12]
   d5100:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5102:	68ab      	ldr	r3, [r5, #8]
   d5104:	60a3      	str	r3, [r4, #8]
    }
   d5106:	4620      	mov	r0, r4
   d5108:	bd38      	pop	{r3, r4, r5, pc}
	...

000d510c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d510c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d510e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5110:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5112:	4668      	mov	r0, sp
   d5114:	f7ff ff60 	bl	d4fd8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5118:	f04f 0302 	mov.w	r3, #2
   d511c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5120:	2a00      	cmp	r2, #0
   d5122:	d103      	bne.n	d512c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5124:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5128:	2900      	cmp	r1, #0
   d512a:	d1f7      	bne.n	d511c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d512c:	d125      	bne.n	d517a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d512e:	f104 050c 	add.w	r5, r4, #12
   d5132:	4669      	mov	r1, sp
   d5134:	4628      	mov	r0, r5
   d5136:	f7ff ff4f 	bl	d4fd8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d513a:	f3bf 8f5b 	dmb	ish
   d513e:	2301      	movs	r3, #1
   d5140:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5142:	2000      	movs	r0, #0
   d5144:	f104 0308 	add.w	r3, r4, #8
   d5148:	f3bf 8f5b 	dmb	ish
   d514c:	e853 6f00 	ldrex	r6, [r3]
   d5150:	e843 0200 	strex	r2, r0, [r3]
   d5154:	2a00      	cmp	r2, #0
   d5156:	d1f9      	bne.n	d514c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5158:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d515c:	b16e      	cbz	r6, d517a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d515e:	f7ff fbb5 	bl	d48cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5162:	b178      	cbz	r0, d5184 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5164:	4629      	mov	r1, r5
   d5166:	4630      	mov	r0, r6
   d5168:	f7ff ff8c 	bl	d5084 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d516c:	4630      	mov	r0, r6
   d516e:	f7ff fe68 	bl	d4e42 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5172:	2110      	movs	r1, #16
   d5174:	4630      	mov	r0, r6
   d5176:	f000 fcf9 	bl	d5b6c <_ZdlPvj>
        p_->setError(std::move(error));
   d517a:	4668      	mov	r0, sp
   d517c:	f7ff ff39 	bl	d4ff2 <_ZN8particle5ErrorD1Ev>
    }
   d5180:	b009      	add	sp, #36	; 0x24
   d5182:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5184:	4631      	mov	r1, r6
   d5186:	a802      	add	r0, sp, #8
   d5188:	f7ff ffb0 	bl	d50ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d518c:	68e0      	ldr	r0, [r4, #12]
   d518e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5192:	b108      	cbz	r0, d5198 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5194:	f001 fb42 	bl	d681c <strdup>
        type_(type) {
   d5198:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d519a:	2010      	movs	r0, #16
   d519c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d51a0:	f7fe ff77 	bl	d4092 <_Znwj>
   d51a4:	4605      	mov	r5, r0
   d51a6:	b1e8      	cbz	r0, d51e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d51a8:	2700      	movs	r7, #0
   d51aa:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d51ac:	2018      	movs	r0, #24
   d51ae:	f7fe ff70 	bl	d4092 <_Znwj>
   d51b2:	4604      	mov	r4, r0
   d51b4:	b188      	cbz	r0, d51da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d51b6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d51b8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d51ba:	a802      	add	r0, sp, #8
   d51bc:	f7ff fe4a 	bl	d4e54 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51c0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d51c2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d51c4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51c6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d51c8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d51ca:	a906      	add	r1, sp, #24
   d51cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d51ce:	60e3      	str	r3, [r4, #12]
   d51d0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d51d4:	9205      	str	r2, [sp, #20]
   d51d6:	f7ff feff 	bl	d4fd8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d51da:	4b08      	ldr	r3, [pc, #32]	; (d51fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d51dc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d51de:	4b08      	ldr	r3, [pc, #32]	; (d5200 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d51e0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d51e2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d51e4:	a806      	add	r0, sp, #24
   d51e6:	f7ff ff04 	bl	d4ff2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d51ea:	a802      	add	r0, sp, #8
   d51ec:	f7ff fe29 	bl	d4e42 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d51f0:	2200      	movs	r2, #0
   d51f2:	4629      	mov	r1, r5
   d51f4:	4803      	ldr	r0, [pc, #12]	; (d5204 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d51f6:	f7ff fb71 	bl	d48dc <application_thread_invoke>
   d51fa:	e7b7      	b.n	d516c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d51fc:	000d5097 	.word	0x000d5097
   d5200:	000d532d 	.word	0x000d532d
   d5204:	000d57d5 	.word	0x000d57d5

000d5208 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d520c:	b08a      	sub	sp, #40	; 0x28
   d520e:	4605      	mov	r5, r0
   d5210:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5214:	460c      	mov	r4, r1
   d5216:	4617      	mov	r7, r2
   d5218:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d521a:	f7ff fbdb 	bl	d49d4 <spark_cloud_flag_connected>
   d521e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5220:	4682      	mov	sl, r0
   d5222:	bb38      	cbnz	r0, d5274 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5224:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5228:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d522a:	a905      	add	r1, sp, #20
   d522c:	4630      	mov	r0, r6
   d522e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5232:	f7ff fed1 	bl	d4fd8 <_ZN8particle5ErrorC1EOS0_>
   d5236:	2014      	movs	r0, #20
   d5238:	f7fe ff2b 	bl	d4092 <_Znwj>
   d523c:	4604      	mov	r4, r0
   d523e:	b148      	cbz	r0, d5254 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5240:	2302      	movs	r3, #2
   d5242:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5244:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5246:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d524a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d524c:	4631      	mov	r1, r6
   d524e:	300c      	adds	r0, #12
   d5250:	f7ff fec2 	bl	d4fd8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5254:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5256:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5258:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d525c:	f7ff ff32 	bl	d50c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5260:	4630      	mov	r0, r6
   d5262:	f7ff fec6 	bl	d4ff2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5266:	a805      	add	r0, sp, #20
   d5268:	f7ff fec3 	bl	d4ff2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d526c:	4628      	mov	r0, r5
   d526e:	b00a      	add	sp, #40	; 0x28
   d5270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5274:	230c      	movs	r3, #12
   d5276:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d527a:	2014      	movs	r0, #20
   d527c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5280:	9307      	str	r3, [sp, #28]
   d5282:	f7fe ff06 	bl	d4092 <_Znwj>
   d5286:	4601      	mov	r1, r0
   d5288:	b128      	cbz	r0, d5296 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d528a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d528e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5292:	f880 a001 	strb.w	sl, [r0, #1]
   d5296:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5298:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d529a:	f7ff ff13 	bl	d50c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d529e:	4b22      	ldr	r3, [pc, #136]	; (d5328 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d52a0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d52a2:	2008      	movs	r0, #8
   d52a4:	f7fe fef5 	bl	d4092 <_Znwj>
   d52a8:	4682      	mov	sl, r0
   d52aa:	b128      	cbz	r0, d52b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d52ac:	9b03      	ldr	r3, [sp, #12]
   d52ae:	f840 3b04 	str.w	r3, [r0], #4
   d52b2:	a904      	add	r1, sp, #16
   d52b4:	f7ff fd41 	bl	d4d3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d52b8:	9600      	str	r6, [sp, #0]
   d52ba:	fa5f f389 	uxtb.w	r3, r9
   d52be:	4642      	mov	r2, r8
   d52c0:	4639      	mov	r1, r7
   d52c2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d52c4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d52c8:	f7ff fb8c 	bl	d49e4 <spark_send_event>
   d52cc:	b9b8      	cbnz	r0, d52fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d52ce:	9b03      	ldr	r3, [sp, #12]
   d52d0:	785b      	ldrb	r3, [r3, #1]
   d52d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d52d6:	b993      	cbnz	r3, d52fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d52d8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d52dc:	a905      	add	r1, sp, #20
   d52de:	a803      	add	r0, sp, #12
   d52e0:	9205      	str	r2, [sp, #20]
   d52e2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d52e6:	f7ff ff11 	bl	d510c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d52ea:	a805      	add	r0, sp, #20
   d52ec:	f7ff fe81 	bl	d4ff2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d52f0:	a805      	add	r0, sp, #20
   d52f2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d52f4:	f7ff fea7 	bl	d5046 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d52f8:	a806      	add	r0, sp, #24
   d52fa:	f7fe feef 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d52fe:	9b03      	ldr	r3, [sp, #12]
   d5300:	9305      	str	r3, [sp, #20]
   d5302:	a904      	add	r1, sp, #16
   d5304:	a806      	add	r0, sp, #24
   d5306:	f7ff fd18 	bl	d4d3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d530a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d530c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d530e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5310:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5312:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5314:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5316:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5318:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d531a:	f7fe fedf 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d531e:	a804      	add	r0, sp, #16
   d5320:	f7fe fedc 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5324:	e7a2      	b.n	d526c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5326:	bf00      	nop
   d5328:	000d53f1 	.word	0x000d53f1

000d532c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d532c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d532e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5330:	4605      	mov	r5, r0
	  switch (__op)
   d5332:	d007      	beq.n	d5344 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5334:	2a03      	cmp	r2, #3
   d5336:	d018      	beq.n	d536a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5338:	2a01      	cmp	r2, #1
   d533a:	d101      	bne.n	d5340 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d533c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d533e:	6003      	str	r3, [r0, #0]
	}
   d5340:	2000      	movs	r0, #0
   d5342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5344:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5346:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5348:	f7fe fea3 	bl	d4092 <_Znwj>
   d534c:	4604      	mov	r4, r0
   d534e:	b150      	cbz	r0, d5366 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5350:	4631      	mov	r1, r6
   d5352:	f7ff fecb 	bl	d50ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5356:	6930      	ldr	r0, [r6, #16]
   d5358:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d535c:	b108      	cbz	r0, d5362 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d535e:	f001 fa5d 	bl	d681c <strdup>
        type_(type) {
   d5362:	6120      	str	r0, [r4, #16]
   d5364:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5366:	602c      	str	r4, [r5, #0]
	}
   d5368:	e7ea      	b.n	d5340 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d536a:	6804      	ldr	r4, [r0, #0]
   d536c:	2c00      	cmp	r4, #0
   d536e:	d0e7      	beq.n	d5340 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5370:	f104 0010 	add.w	r0, r4, #16
   d5374:	f7ff fe3d 	bl	d4ff2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5378:	4620      	mov	r0, r4
   d537a:	f7ff fd62 	bl	d4e42 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d537e:	2118      	movs	r1, #24
   d5380:	4620      	mov	r0, r4
   d5382:	f000 fbf3 	bl	d5b6c <_ZdlPvj>
   d5386:	e7db      	b.n	d5340 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5388 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5388:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d538a:	2300      	movs	r3, #0
   d538c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d538e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5390:	4604      	mov	r4, r0
   d5392:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5394:	b12b      	cbz	r3, d53a2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5396:	2202      	movs	r2, #2
   d5398:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d539a:	68eb      	ldr	r3, [r5, #12]
   d539c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d539e:	68ab      	ldr	r3, [r5, #8]
   d53a0:	60a3      	str	r3, [r4, #8]
    }
   d53a2:	4620      	mov	r0, r4
   d53a4:	bd38      	pop	{r3, r4, r5, pc}

000d53a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d53a6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d53a8:	b570      	push	{r4, r5, r6, lr}
   d53aa:	4604      	mov	r4, r0
	  switch (__op)
   d53ac:	d007      	beq.n	d53be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d53ae:	2a03      	cmp	r2, #3
   d53b0:	d012      	beq.n	d53d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d53b2:	2a01      	cmp	r2, #1
   d53b4:	d101      	bne.n	d53ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d53b6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d53b8:	6003      	str	r3, [r0, #0]
	}
   d53ba:	2000      	movs	r0, #0
   d53bc:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d53be:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d53c0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d53c2:	f7fe fe66 	bl	d4092 <_Znwj>
   d53c6:	4605      	mov	r5, r0
   d53c8:	b120      	cbz	r0, d53d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d53ca:	4631      	mov	r1, r6
   d53cc:	f7ff ffdc 	bl	d5388 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d53d0:	7c33      	ldrb	r3, [r6, #16]
   d53d2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d53d4:	6025      	str	r5, [r4, #0]
	}
   d53d6:	e7f0      	b.n	d53ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d53d8:	6804      	ldr	r4, [r0, #0]
   d53da:	2c00      	cmp	r4, #0
   d53dc:	d0ed      	beq.n	d53ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d53de:	4620      	mov	r0, r4
   d53e0:	f7ff fd2f 	bl	d4e42 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d53e4:	2114      	movs	r1, #20
   d53e6:	4620      	mov	r0, r4
   d53e8:	f000 fbc0 	bl	d5b6c <_ZdlPvj>
   d53ec:	e7e5      	b.n	d53ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d53f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d53f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d53f2:	b089      	sub	sp, #36	; 0x24
   d53f4:	4604      	mov	r4, r0
   d53f6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d53f8:	a801      	add	r0, sp, #4
   d53fa:	4611      	mov	r1, r2
   d53fc:	f7ff fe23 	bl	d5046 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5400:	b1a4      	cbz	r4, d542c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5402:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5404:	b11d      	cbz	r5, d540e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5406:	4628      	mov	r0, r5
   d5408:	f001 fa08 	bl	d681c <strdup>
   d540c:	4605      	mov	r5, r0
   d540e:	a801      	add	r0, sp, #4
   d5410:	a903      	add	r1, sp, #12
        type_(type) {
   d5412:	9503      	str	r5, [sp, #12]
   d5414:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5418:	f7ff fe78 	bl	d510c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d541c:	a803      	add	r0, sp, #12
   d541e:	f7ff fde8 	bl	d4ff2 <_ZN8particle5ErrorD1Ev>
   d5422:	a802      	add	r0, sp, #8
   d5424:	f7fe fe5a 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5428:	b009      	add	sp, #36	; 0x24
   d542a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d542c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d542e:	2301      	movs	r3, #1
   d5430:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5434:	2a00      	cmp	r2, #0
   d5436:	d103      	bne.n	d5440 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5438:	e8c5 3f41 	strexb	r1, r3, [r5]
   d543c:	2900      	cmp	r1, #0
   d543e:	d1f7      	bne.n	d5430 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5440:	d1ef      	bne.n	d5422 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5442:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5444:	f3bf 8f5b 	dmb	ish
   d5448:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d544a:	1d2b      	adds	r3, r5, #4
   d544c:	f3bf 8f5b 	dmb	ish
   d5450:	e853 6f00 	ldrex	r6, [r3]
   d5454:	e843 4200 	strex	r2, r4, [r3]
   d5458:	2a00      	cmp	r2, #0
   d545a:	d1f9      	bne.n	d5450 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d545c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5460:	2e00      	cmp	r6, #0
   d5462:	d0de      	beq.n	d5422 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5464:	4620      	mov	r0, r4
   d5466:	f7ff fa31 	bl	d48cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d546a:	4607      	mov	r7, r0
   d546c:	b160      	cbz	r0, d5488 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d546e:	f105 010c 	add.w	r1, r5, #12
   d5472:	4630      	mov	r0, r6
   d5474:	f7ff fe16 	bl	d50a4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5478:	4630      	mov	r0, r6
   d547a:	f7ff fce2 	bl	d4e42 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d547e:	2110      	movs	r1, #16
   d5480:	4630      	mov	r0, r6
   d5482:	f000 fb73 	bl	d5b6c <_ZdlPvj>
   d5486:	e7cc      	b.n	d5422 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5488:	4631      	mov	r1, r6
   d548a:	a803      	add	r0, sp, #12
   d548c:	f7ff ff7c 	bl	d5388 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5490:	7b2b      	ldrb	r3, [r5, #12]
   d5492:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5496:	2010      	movs	r0, #16
   d5498:	f7fe fdfb 	bl	d4092 <_Znwj>
   d549c:	4605      	mov	r5, r0
   d549e:	b1d0      	cbz	r0, d54d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d54a0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d54a2:	2014      	movs	r0, #20
   d54a4:	f7fe fdf5 	bl	d4092 <_Znwj>
   d54a8:	4604      	mov	r4, r0
   d54aa:	b178      	cbz	r0, d54cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d54ac:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d54ae:	4601      	mov	r1, r0
   d54b0:	a803      	add	r0, sp, #12
   d54b2:	f7ff fccf 	bl	d4e54 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54b6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d54b8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d54ba:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54bc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d54be:	9205      	str	r2, [sp, #20]
   d54c0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d54c2:	60e3      	str	r3, [r4, #12]
   d54c4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d54c8:	9206      	str	r2, [sp, #24]
   d54ca:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d54cc:	4b06      	ldr	r3, [pc, #24]	; (d54e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d54ce:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d54d0:	4b06      	ldr	r3, [pc, #24]	; (d54ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d54d2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d54d4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d54d6:	a803      	add	r0, sp, #12
   d54d8:	f7ff fcb3 	bl	d4e42 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d54dc:	2200      	movs	r2, #0
   d54de:	4629      	mov	r1, r5
   d54e0:	4803      	ldr	r0, [pc, #12]	; (d54f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d54e2:	f7ff f9fb 	bl	d48dc <application_thread_invoke>
   d54e6:	e7c7      	b.n	d5478 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d54e8:	000d50b7 	.word	0x000d50b7
   d54ec:	000d53a7 	.word	0x000d53a7
   d54f0:	000d57d5 	.word	0x000d57d5

000d54f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d54f4:	4770      	bx	lr

000d54f6 <_ZN9IPAddressD0Ev>:
   d54f6:	b510      	push	{r4, lr}
   d54f8:	2118      	movs	r1, #24
   d54fa:	4604      	mov	r4, r0
   d54fc:	f000 fb36 	bl	d5b6c <_ZdlPvj>
   d5500:	4620      	mov	r0, r4
   d5502:	bd10      	pop	{r4, pc}

000d5504 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5504:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5506:	7d03      	ldrb	r3, [r0, #20]
   d5508:	2b06      	cmp	r3, #6
{
   d550a:	b08d      	sub	sp, #52	; 0x34
   d550c:	460e      	mov	r6, r1
   d550e:	f100 0704 	add.w	r7, r0, #4
   d5512:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5516:	d012      	beq.n	d553e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5518:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d551c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5520:	220a      	movs	r2, #10
   d5522:	4630      	mov	r0, r6
   d5524:	f7ff fc59 	bl	d4dda <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5528:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d552a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d552c:	d019      	beq.n	d5562 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d552e:	2c00      	cmp	r4, #0
   d5530:	d0f4      	beq.n	d551c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5532:	212e      	movs	r1, #46	; 0x2e
   d5534:	4630      	mov	r0, r6
   d5536:	f7ff fc37 	bl	d4da8 <_ZN5Print5printEc>
   d553a:	4404      	add	r4, r0
   d553c:	e7ee      	b.n	d551c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d553e:	232f      	movs	r3, #47	; 0x2f
   d5540:	466a      	mov	r2, sp
   d5542:	4639      	mov	r1, r7
   d5544:	200a      	movs	r0, #10
		buf[0] = 0;
   d5546:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d554a:	f7ff f8e7 	bl	d471c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d554e:	4668      	mov	r0, sp
   d5550:	f001 f981 	bl	d6856 <strlen>
   d5554:	6833      	ldr	r3, [r6, #0]
   d5556:	4602      	mov	r2, r0
   d5558:	68db      	ldr	r3, [r3, #12]
   d555a:	4669      	mov	r1, sp
   d555c:	4630      	mov	r0, r6
   d555e:	4798      	blx	r3
   d5560:	4604      	mov	r4, r0
    }
    return n;
}
   d5562:	4620      	mov	r0, r4
   d5564:	b00d      	add	sp, #52	; 0x34
   d5566:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5568 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5568:	b510      	push	{r4, lr}
   d556a:	4b05      	ldr	r3, [pc, #20]	; (d5580 <_ZN9IPAddressC1Ev+0x18>)
   d556c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d556e:	2211      	movs	r2, #17
   d5570:	f840 3b04 	str.w	r3, [r0], #4
   d5574:	2100      	movs	r1, #0
   d5576:	f001 f925 	bl	d67c4 <memset>
}
   d557a:	4620      	mov	r0, r4
   d557c:	bd10      	pop	{r4, pc}
   d557e:	bf00      	nop
   d5580:	000d6a20 	.word	0x000d6a20

000d5584 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5584:	4603      	mov	r3, r0
   d5586:	4a07      	ldr	r2, [pc, #28]	; (d55a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5588:	b510      	push	{r4, lr}
   d558a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d558e:	f101 0210 	add.w	r2, r1, #16
   d5592:	f851 4b04 	ldr.w	r4, [r1], #4
   d5596:	f843 4b04 	str.w	r4, [r3], #4
   d559a:	4291      	cmp	r1, r2
   d559c:	d1f9      	bne.n	d5592 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d559e:	780a      	ldrb	r2, [r1, #0]
   d55a0:	701a      	strb	r2, [r3, #0]
}
   d55a2:	bd10      	pop	{r4, pc}
   d55a4:	000d6a20 	.word	0x000d6a20

000d55a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d55a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d55aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d55ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d55b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d55b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d55ba:	2304      	movs	r3, #4
   d55bc:	6041      	str	r1, [r0, #4]
   d55be:	7503      	strb	r3, [r0, #20]
}
   d55c0:	bd10      	pop	{r4, pc}

000d55c2 <_ZN9IPAddressaSEPKh>:
{
   d55c2:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d55c4:	78cb      	ldrb	r3, [r1, #3]
   d55c6:	9300      	str	r3, [sp, #0]
   d55c8:	788b      	ldrb	r3, [r1, #2]
   d55ca:	784a      	ldrb	r2, [r1, #1]
   d55cc:	7809      	ldrb	r1, [r1, #0]
   d55ce:	f7ff ffeb 	bl	d55a8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d55d2:	b002      	add	sp, #8
   d55d4:	bd10      	pop	{r4, pc}

000d55d6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d55d6:	7441      	strb	r1, [r0, #17]
}
   d55d8:	4770      	bx	lr

000d55da <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55da:	4770      	bx	lr

000d55dc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d55dc:	4770      	bx	lr

000d55de <_ZN9USBSerial4readEv>:
{
   d55de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d55e0:	2100      	movs	r1, #0
   d55e2:	7c00      	ldrb	r0, [r0, #16]
   d55e4:	f7ff f942 	bl	d486c <HAL_USB_USART_Receive_Data>
}
   d55e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d55ec:	bd08      	pop	{r3, pc}

000d55ee <_ZN9USBSerial4peekEv>:
{
   d55ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d55f0:	2101      	movs	r1, #1
   d55f2:	7c00      	ldrb	r0, [r0, #16]
   d55f4:	f7ff f93a 	bl	d486c <HAL_USB_USART_Receive_Data>
}
   d55f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d55fc:	bd08      	pop	{r3, pc}

000d55fe <_ZN9USBSerial17availableForWriteEv>:
{
   d55fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5600:	7c00      	ldrb	r0, [r0, #16]
   d5602:	f7ff f92b 	bl	d485c <HAL_USB_USART_Available_Data_For_Write>
}
   d5606:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d560a:	bd08      	pop	{r3, pc}

000d560c <_ZN9USBSerial9availableEv>:
{
   d560c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d560e:	7c00      	ldrb	r0, [r0, #16]
   d5610:	f7ff f91c 	bl	d484c <HAL_USB_USART_Available_Data>
}
   d5614:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5618:	bd08      	pop	{r3, pc}

000d561a <_ZN9USBSerial5writeEh>:
{
   d561a:	b513      	push	{r0, r1, r4, lr}
   d561c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d561e:	7c00      	ldrb	r0, [r0, #16]
{
   d5620:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5622:	f7ff f91b 	bl	d485c <HAL_USB_USART_Available_Data_For_Write>
   d5626:	2800      	cmp	r0, #0
   d5628:	9901      	ldr	r1, [sp, #4]
   d562a:	dc01      	bgt.n	d5630 <_ZN9USBSerial5writeEh+0x16>
   d562c:	7c60      	ldrb	r0, [r4, #17]
   d562e:	b120      	cbz	r0, d563a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5630:	7c20      	ldrb	r0, [r4, #16]
   d5632:	f7ff f923 	bl	d487c <HAL_USB_USART_Send_Data>
   d5636:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d563a:	b002      	add	sp, #8
   d563c:	bd10      	pop	{r4, pc}

000d563e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d563e:	7c00      	ldrb	r0, [r0, #16]
   d5640:	f7ff b924 	b.w	d488c <HAL_USB_USART_Flush_Data>

000d5644 <_ZN9USBSerialD0Ev>:
   d5644:	b510      	push	{r4, lr}
   d5646:	2114      	movs	r1, #20
   d5648:	4604      	mov	r4, r0
   d564a:	f000 fa8f 	bl	d5b6c <_ZdlPvj>
   d564e:	4620      	mov	r0, r4
   d5650:	bd10      	pop	{r4, pc}
	...

000d5654 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5654:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d565a:	4604      	mov	r4, r0
   d565c:	4608      	mov	r0, r1
   d565e:	2100      	movs	r1, #0
   d5660:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5664:	4b04      	ldr	r3, [pc, #16]	; (d5678 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5666:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5668:	2301      	movs	r3, #1
  _serial = serial;
   d566a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d566c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d566e:	4611      	mov	r1, r2
   d5670:	f7ff f8e4 	bl	d483c <HAL_USB_USART_Init>
}
   d5674:	4620      	mov	r0, r4
   d5676:	bd10      	pop	{r4, pc}
   d5678:	000d6a34 	.word	0x000d6a34

000d567c <_Z19acquireSerialBufferv>:
{
   d567c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d567e:	2214      	movs	r2, #20
{
   d5680:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5682:	2100      	movs	r1, #0
   d5684:	f001 f89e 	bl	d67c4 <memset>
}
   d5688:	4620      	mov	r0, r4
   d568a:	bd10      	pop	{r4, pc}

000d568c <_Z16_fetch_usbserialv>:
{
   d568c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d568e:	4c0f      	ldr	r4, [pc, #60]	; (d56cc <_Z16_fetch_usbserialv+0x40>)
{
   d5690:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5692:	a803      	add	r0, sp, #12
   d5694:	f7ff fff2 	bl	d567c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5698:	7821      	ldrb	r1, [r4, #0]
   d569a:	f3bf 8f5b 	dmb	ish
   d569e:	f011 0101 	ands.w	r1, r1, #1
   d56a2:	d10f      	bne.n	d56c4 <_Z16_fetch_usbserialv+0x38>
   d56a4:	4620      	mov	r0, r4
   d56a6:	9101      	str	r1, [sp, #4]
   d56a8:	f7fe fcf9 	bl	d409e <__cxa_guard_acquire>
   d56ac:	9901      	ldr	r1, [sp, #4]
   d56ae:	b148      	cbz	r0, d56c4 <_Z16_fetch_usbserialv+0x38>
   d56b0:	aa03      	add	r2, sp, #12
   d56b2:	4807      	ldr	r0, [pc, #28]	; (d56d0 <_Z16_fetch_usbserialv+0x44>)
   d56b4:	f7ff ffce 	bl	d5654 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d56b8:	4620      	mov	r0, r4
   d56ba:	f7fe fcf5 	bl	d40a8 <__cxa_guard_release>
   d56be:	4805      	ldr	r0, [pc, #20]	; (d56d4 <_Z16_fetch_usbserialv+0x48>)
   d56c0:	f001 f86c 	bl	d679c <atexit>
	return _usbserial;
}
   d56c4:	4802      	ldr	r0, [pc, #8]	; (d56d0 <_Z16_fetch_usbserialv+0x44>)
   d56c6:	b008      	add	sp, #32
   d56c8:	bd10      	pop	{r4, pc}
   d56ca:	bf00      	nop
   d56cc:	2003e5e4 	.word	0x2003e5e4
   d56d0:	2003e5e8 	.word	0x2003e5e8
   d56d4:	000d55db 	.word	0x000d55db

000d56d8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d56d8:	f7fe bff8 	b.w	d46cc <HAL_Interrupts_Disable_All>

000d56dc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d56dc:	f7fe bfee 	b.w	d46bc <HAL_Interrupts_Enable_All>

000d56e0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d56e0:	4770      	bx	lr

000d56e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d56e2:	7441      	strb	r1, [r0, #17]
}
   d56e4:	4770      	bx	lr

000d56e6 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d56e6:	4770      	bx	lr

000d56e8 <_ZN11USARTSerial17availableForWriteEv>:
{
   d56e8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d56ea:	7c00      	ldrb	r0, [r0, #16]
   d56ec:	f7ff f856 	bl	d479c <hal_usart_available_data_for_write>
}
   d56f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56f4:	bd08      	pop	{r3, pc}

000d56f6 <_ZN11USARTSerial9availableEv>:
{
   d56f6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d56f8:	7c00      	ldrb	r0, [r0, #16]
   d56fa:	f7ff f827 	bl	d474c <hal_usart_available>
}
   d56fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5702:	bd08      	pop	{r3, pc}

000d5704 <_ZN11USARTSerial4peekEv>:
{
   d5704:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5706:	7c00      	ldrb	r0, [r0, #16]
   d5708:	f7ff f830 	bl	d476c <hal_usart_peek>
}
   d570c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5710:	bd08      	pop	{r3, pc}

000d5712 <_ZN11USARTSerial4readEv>:
{
   d5712:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5714:	7c00      	ldrb	r0, [r0, #16]
   d5716:	f7ff f821 	bl	d475c <hal_usart_read>
}
   d571a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d571e:	bd08      	pop	{r3, pc}

000d5720 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d5720:	7c00      	ldrb	r0, [r0, #16]
   d5722:	f7ff b82b 	b.w	d477c <hal_usart_flush>

000d5726 <_ZN11USARTSerial5writeEh>:
{
   d5726:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5728:	7c45      	ldrb	r5, [r0, #17]
{
   d572a:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d572c:	b12d      	cbz	r5, d573a <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d572e:	7c20      	ldrb	r0, [r4, #16]
}
   d5730:	b003      	add	sp, #12
   d5732:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5736:	f7ff b801 	b.w	d473c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d573a:	7c00      	ldrb	r0, [r0, #16]
   d573c:	9101      	str	r1, [sp, #4]
   d573e:	f7ff f82d 	bl	d479c <hal_usart_available_data_for_write>
   d5742:	2800      	cmp	r0, #0
   d5744:	9901      	ldr	r1, [sp, #4]
   d5746:	dcf2      	bgt.n	d572e <_ZN11USARTSerial5writeEh+0x8>
}
   d5748:	4628      	mov	r0, r5
   d574a:	b003      	add	sp, #12
   d574c:	bd30      	pop	{r4, r5, pc}

000d574e <_ZN11USARTSerialD0Ev>:
   d574e:	b510      	push	{r4, lr}
   d5750:	2114      	movs	r1, #20
   d5752:	4604      	mov	r4, r0
   d5754:	f000 fa0a 	bl	d5b6c <_ZdlPvj>
   d5758:	4620      	mov	r0, r4
   d575a:	bd10      	pop	{r4, pc}

000d575c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d575c:	b510      	push	{r4, lr}
   d575e:	f04f 0c00 	mov.w	ip, #0
   d5762:	4604      	mov	r4, r0
   d5764:	4608      	mov	r0, r1
   d5766:	4611      	mov	r1, r2
   d5768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d576c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5770:	4a04      	ldr	r2, [pc, #16]	; (d5784 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5772:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5774:	2201      	movs	r2, #1
  _serial = serial;
   d5776:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5778:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d577a:	461a      	mov	r2, r3
   d577c:	f7fe ffd6 	bl	d472c <hal_usart_init>
}
   d5780:	4620      	mov	r0, r4
   d5782:	bd10      	pop	{r4, pc}
   d5784:	000d6a64 	.word	0x000d6a64

000d5788 <_Z22__fetch_global_Serial1v>:
{
   d5788:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d578a:	4c0d      	ldr	r4, [pc, #52]	; (d57c0 <_Z22__fetch_global_Serial1v+0x38>)
   d578c:	7821      	ldrb	r1, [r4, #0]
   d578e:	f3bf 8f5b 	dmb	ish
   d5792:	f011 0101 	ands.w	r1, r1, #1
   d5796:	d110      	bne.n	d57ba <_Z22__fetch_global_Serial1v+0x32>
   d5798:	4620      	mov	r0, r4
   d579a:	9101      	str	r1, [sp, #4]
   d579c:	f7fe fc7f 	bl	d409e <__cxa_guard_acquire>
   d57a0:	9901      	ldr	r1, [sp, #4]
   d57a2:	b150      	cbz	r0, d57ba <_Z22__fetch_global_Serial1v+0x32>
   d57a4:	4b07      	ldr	r3, [pc, #28]	; (d57c4 <_Z22__fetch_global_Serial1v+0x3c>)
   d57a6:	4a08      	ldr	r2, [pc, #32]	; (d57c8 <_Z22__fetch_global_Serial1v+0x40>)
   d57a8:	4808      	ldr	r0, [pc, #32]	; (d57cc <_Z22__fetch_global_Serial1v+0x44>)
   d57aa:	f7ff ffd7 	bl	d575c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d57ae:	4620      	mov	r0, r4
   d57b0:	f7fe fc7a 	bl	d40a8 <__cxa_guard_release>
   d57b4:	4806      	ldr	r0, [pc, #24]	; (d57d0 <_Z22__fetch_global_Serial1v+0x48>)
   d57b6:	f000 fff1 	bl	d679c <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d57ba:	4804      	ldr	r0, [pc, #16]	; (d57cc <_Z22__fetch_global_Serial1v+0x44>)
   d57bc:	b002      	add	sp, #8
   d57be:	bd10      	pop	{r4, pc}
   d57c0:	2003e5fc 	.word	0x2003e5fc
   d57c4:	2003e684 	.word	0x2003e684
   d57c8:	2003e600 	.word	0x2003e600
   d57cc:	2003e708 	.word	0x2003e708
   d57d0:	000d56e7 	.word	0x000d56e7

000d57d4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d57d4:	b510      	push	{r4, lr}
      if (_M_empty())
   d57d6:	6883      	ldr	r3, [r0, #8]
   d57d8:	4604      	mov	r4, r0
   d57da:	b90b      	cbnz	r3, d57e0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d57dc:	f000 f9ca 	bl	d5b74 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d57e0:	68c3      	ldr	r3, [r0, #12]
   d57e2:	4798      	blx	r3
      if (_M_manager)
   d57e4:	68a3      	ldr	r3, [r4, #8]
   d57e6:	b11b      	cbz	r3, d57f0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d57e8:	2203      	movs	r2, #3
   d57ea:	4621      	mov	r1, r4
   d57ec:	4620      	mov	r0, r4
   d57ee:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d57f0:	4620      	mov	r0, r4
   d57f2:	2110      	movs	r1, #16
}
   d57f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d57f8:	f000 b9b8 	b.w	d5b6c <_ZdlPvj>

000d57fc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d57fc:	4770      	bx	lr

000d57fe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d57fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5800:	4606      	mov	r6, r0
   d5802:	4615      	mov	r5, r2
   d5804:	460c      	mov	r4, r1
   d5806:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5808:	42bc      	cmp	r4, r7
   d580a:	d006      	beq.n	d581a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d580c:	6833      	ldr	r3, [r6, #0]
   d580e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5812:	689b      	ldr	r3, [r3, #8]
   d5814:	4630      	mov	r0, r6
   d5816:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5818:	e7f6      	b.n	d5808 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d581a:	4628      	mov	r0, r5
   d581c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d581e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d581e:	7c00      	ldrb	r0, [r0, #16]
   d5820:	2200      	movs	r2, #0
   d5822:	f7fe bfc3 	b.w	d47ac <hal_i2c_write>

000d5826 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5826:	7c00      	ldrb	r0, [r0, #16]
   d5828:	2100      	movs	r1, #0
   d582a:	f7fe bfc7 	b.w	d47bc <hal_i2c_available>

000d582e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d582e:	7c00      	ldrb	r0, [r0, #16]
   d5830:	2100      	movs	r1, #0
   d5832:	f7fe bfcb 	b.w	d47cc <hal_i2c_read>

000d5836 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5836:	7c00      	ldrb	r0, [r0, #16]
   d5838:	2100      	movs	r1, #0
   d583a:	f7fe bfcf 	b.w	d47dc <hal_i2c_peek>

000d583e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d583e:	7c00      	ldrb	r0, [r0, #16]
   d5840:	2100      	movs	r1, #0
   d5842:	f7fe bfd3 	b.w	d47ec <hal_i2c_flush>

000d5846 <_ZN7TwoWireD0Ev>:
   d5846:	b510      	push	{r4, lr}
   d5848:	2114      	movs	r1, #20
   d584a:	4604      	mov	r4, r0
   d584c:	f000 f98e 	bl	d5b6c <_ZdlPvj>
   d5850:	4620      	mov	r0, r4
   d5852:	bd10      	pop	{r4, pc}

000d5854 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5854:	b510      	push	{r4, lr}
   d5856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d585a:	4604      	mov	r4, r0
   d585c:	4608      	mov	r0, r1
   d585e:	2100      	movs	r1, #0
   d5860:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5864:	4b03      	ldr	r3, [pc, #12]	; (d5874 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5866:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5868:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d586a:	4611      	mov	r1, r2
   d586c:	f7fe ffce 	bl	d480c <hal_i2c_init>
}
   d5870:	4620      	mov	r0, r4
   d5872:	bd10      	pop	{r4, pc}
   d5874:	000d6a94 	.word	0x000d6a94

000d5878 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5878:	2200      	movs	r2, #0
   d587a:	6840      	ldr	r0, [r0, #4]
   d587c:	4611      	mov	r1, r2
   d587e:	f7ff b861 	b.w	d4944 <network_ready>

000d5882 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5882:	2200      	movs	r2, #0
   d5884:	6840      	ldr	r0, [r0, #4]
   d5886:	4611      	mov	r1, r2
   d5888:	f7ff b87c 	b.w	d4984 <network_listening>

000d588c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d588c:	2200      	movs	r2, #0
   d588e:	6840      	ldr	r0, [r0, #4]
   d5890:	4611      	mov	r1, r2
   d5892:	f7ff b887 	b.w	d49a4 <network_get_listen_timeout>

000d5896 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5896:	6840      	ldr	r0, [r0, #4]
   d5898:	2200      	movs	r2, #0
   d589a:	f7ff b87b 	b.w	d4994 <network_set_listen_timeout>

000d589e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d589e:	6840      	ldr	r0, [r0, #4]
   d58a0:	2200      	movs	r2, #0
   d58a2:	f081 0101 	eor.w	r1, r1, #1
   d58a6:	f7ff b865 	b.w	d4974 <network_listen>

000d58aa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d58aa:	2300      	movs	r3, #0
   d58ac:	6840      	ldr	r0, [r0, #4]
   d58ae:	461a      	mov	r2, r3
   d58b0:	4619      	mov	r1, r3
   d58b2:	f7ff b857 	b.w	d4964 <network_off>

000d58b6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d58b6:	2300      	movs	r3, #0
   d58b8:	6840      	ldr	r0, [r0, #4]
   d58ba:	461a      	mov	r2, r3
   d58bc:	4619      	mov	r1, r3
   d58be:	f7ff b849 	b.w	d4954 <network_on>

000d58c2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d58c2:	2200      	movs	r2, #0
   d58c4:	6840      	ldr	r0, [r0, #4]
   d58c6:	4611      	mov	r1, r2
   d58c8:	f7ff b82c 	b.w	d4924 <network_connecting>

000d58cc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d58cc:	6840      	ldr	r0, [r0, #4]
   d58ce:	2200      	movs	r2, #0
   d58d0:	2102      	movs	r1, #2
   d58d2:	f7ff b82f 	b.w	d4934 <network_disconnect>

000d58d6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d58d6:	2300      	movs	r3, #0
   d58d8:	6840      	ldr	r0, [r0, #4]
   d58da:	461a      	mov	r2, r3
   d58dc:	f7ff b81a 	b.w	d4914 <network_connect>

000d58e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d58e0:	4b02      	ldr	r3, [pc, #8]	; (d58ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d58e2:	2204      	movs	r2, #4
   d58e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d58e6:	4a02      	ldr	r2, [pc, #8]	; (d58f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d58e8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d58ea:	4770      	bx	lr
   d58ec:	2003e71c 	.word	0x2003e71c
   d58f0:	000d6abc 	.word	0x000d6abc

000d58f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d58f4:	2300      	movs	r3, #0
   d58f6:	6840      	ldr	r0, [r0, #4]
   d58f8:	461a      	mov	r2, r3
   d58fa:	f7ff b80b 	b.w	d4914 <network_connect>

000d58fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d58fe:	6840      	ldr	r0, [r0, #4]
   d5900:	2200      	movs	r2, #0
   d5902:	2102      	movs	r1, #2
   d5904:	f7ff b816 	b.w	d4934 <network_disconnect>

000d5908 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5908:	2200      	movs	r2, #0
   d590a:	6840      	ldr	r0, [r0, #4]
   d590c:	4611      	mov	r1, r2
   d590e:	f7ff b809 	b.w	d4924 <network_connecting>

000d5912 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5912:	2200      	movs	r2, #0
   d5914:	6840      	ldr	r0, [r0, #4]
   d5916:	4611      	mov	r1, r2
   d5918:	f7ff b814 	b.w	d4944 <network_ready>

000d591c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d591c:	2300      	movs	r3, #0
   d591e:	6840      	ldr	r0, [r0, #4]
   d5920:	461a      	mov	r2, r3
   d5922:	4619      	mov	r1, r3
   d5924:	f7ff b816 	b.w	d4954 <network_on>

000d5928 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5928:	2300      	movs	r3, #0
   d592a:	6840      	ldr	r0, [r0, #4]
   d592c:	461a      	mov	r2, r3
   d592e:	4619      	mov	r1, r3
   d5930:	f7ff b818 	b.w	d4964 <network_off>

000d5934 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5934:	6840      	ldr	r0, [r0, #4]
   d5936:	2100      	movs	r1, #0
   d5938:	f7ff b83c 	b.w	d49b4 <network_is_on>

000d593c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d593c:	6840      	ldr	r0, [r0, #4]
   d593e:	2100      	movs	r1, #0
   d5940:	f7ff b840 	b.w	d49c4 <network_is_off>

000d5944 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5944:	6840      	ldr	r0, [r0, #4]
   d5946:	2200      	movs	r2, #0
   d5948:	f081 0101 	eor.w	r1, r1, #1
   d594c:	f7ff b812 	b.w	d4974 <network_listen>

000d5950 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5950:	6840      	ldr	r0, [r0, #4]
   d5952:	2200      	movs	r2, #0
   d5954:	f7ff b81e 	b.w	d4994 <network_set_listen_timeout>

000d5958 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5958:	2200      	movs	r2, #0
   d595a:	6840      	ldr	r0, [r0, #4]
   d595c:	4611      	mov	r1, r2
   d595e:	f7ff b821 	b.w	d49a4 <network_get_listen_timeout>

000d5962 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5962:	2200      	movs	r2, #0
   d5964:	6840      	ldr	r0, [r0, #4]
   d5966:	4611      	mov	r1, r2
   d5968:	f7ff b80c 	b.w	d4984 <network_listening>

000d596c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d596c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5970:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5972:	b095      	sub	sp, #84	; 0x54
   d5974:	4616      	mov	r6, r2
   d5976:	460d      	mov	r5, r1
   d5978:	4607      	mov	r7, r0
    IPAddress addr;
   d597a:	f7ff fdf5 	bl	d5568 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d597e:	4621      	mov	r1, r4
   d5980:	2218      	movs	r2, #24
   d5982:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5984:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5986:	f000 ff1d 	bl	d67c4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d598a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d598c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5990:	4621      	mov	r1, r4
   d5992:	466b      	mov	r3, sp
   d5994:	aa0c      	add	r2, sp, #48	; 0x30
   d5996:	4630      	mov	r0, r6
   d5998:	f7fe fe78 	bl	d468c <netdb_getaddrinfo>
    if (!r) {
   d599c:	4604      	mov	r4, r0
   d599e:	2800      	cmp	r0, #0
   d59a0:	d146      	bne.n	d5a30 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d59a2:	4602      	mov	r2, r0
   d59a4:	2101      	movs	r1, #1
   d59a6:	6868      	ldr	r0, [r5, #4]
   d59a8:	f7fe ffcc 	bl	d4944 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59ac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d59ae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59b0:	4622      	mov	r2, r4
   d59b2:	6868      	ldr	r0, [r5, #4]
   d59b4:	f7fe ffc6 	bl	d4944 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59b8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59ba:	4681      	mov	r9, r0
        bool ok = false;
   d59bc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59be:	2e00      	cmp	r6, #0
   d59c0:	d036      	beq.n	d5a30 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d59c2:	2900      	cmp	r1, #0
   d59c4:	d134      	bne.n	d5a30 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d59c6:	6873      	ldr	r3, [r6, #4]
   d59c8:	2b02      	cmp	r3, #2
   d59ca:	d003      	beq.n	d59d4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d59cc:	2b0a      	cmp	r3, #10
   d59ce:	d00b      	beq.n	d59e8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59d0:	69f6      	ldr	r6, [r6, #28]
   d59d2:	e7f4      	b.n	d59be <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d59d4:	f1b8 0f00 	cmp.w	r8, #0
   d59d8:	d004      	beq.n	d59e4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d59da:	6971      	ldr	r1, [r6, #20]
   d59dc:	4638      	mov	r0, r7
   d59de:	3104      	adds	r1, #4
   d59e0:	f7ff fdef 	bl	d55c2 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d59e4:	4641      	mov	r1, r8
   d59e6:	e7f3      	b.n	d59d0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d59e8:	f1b9 0f00 	cmp.w	r9, #0
   d59ec:	d101      	bne.n	d59f2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d59ee:	4649      	mov	r1, r9
   d59f0:	e7ee      	b.n	d59d0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d59f2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d59f4:	2210      	movs	r2, #16
   d59f6:	a801      	add	r0, sp, #4
   d59f8:	f000 fee4 	bl	d67c4 <memset>
                    a.v = 6;
   d59fc:	2306      	movs	r3, #6
   d59fe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5a02:	ad01      	add	r5, sp, #4
   d5a04:	f104 0308 	add.w	r3, r4, #8
   d5a08:	3418      	adds	r4, #24
   d5a0a:	6818      	ldr	r0, [r3, #0]
   d5a0c:	6859      	ldr	r1, [r3, #4]
   d5a0e:	462a      	mov	r2, r5
   d5a10:	c203      	stmia	r2!, {r0, r1}
   d5a12:	3308      	adds	r3, #8
   d5a14:	42a3      	cmp	r3, r4
   d5a16:	4615      	mov	r5, r2
   d5a18:	d1f7      	bne.n	d5a0a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5a1a:	a901      	add	r1, sp, #4
   d5a1c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5a1e:	ad07      	add	r5, sp, #28
   d5a20:	f7ff fdb0 	bl	d5584 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a26:	1d3c      	adds	r4, r7, #4
   d5a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a2a:	682b      	ldr	r3, [r5, #0]
   d5a2c:	7023      	strb	r3, [r4, #0]
   d5a2e:	e7de      	b.n	d59ee <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5a30:	9800      	ldr	r0, [sp, #0]
   d5a32:	f7fe fe23 	bl	d467c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5a36:	4638      	mov	r0, r7
   d5a38:	b015      	add	sp, #84	; 0x54
   d5a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5a40 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5a40:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5a42:	4a03      	ldr	r2, [pc, #12]	; (d5a50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5a44:	601a      	str	r2, [r3, #0]
   d5a46:	2200      	movs	r2, #0
   d5a48:	605a      	str	r2, [r3, #4]

} // spark
   d5a4a:	4770      	bx	lr
   d5a4c:	2003e724 	.word	0x2003e724
   d5a50:	000d6af8 	.word	0x000d6af8

000d5a54 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5a54:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5a56:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5a58:	d902      	bls.n	d5a60 <pinAvailable+0xc>
    return false;
   d5a5a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5a5c:	b002      	add	sp, #8
   d5a5e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5a60:	f1a0 030b 	sub.w	r3, r0, #11
   d5a64:	2b02      	cmp	r3, #2
   d5a66:	d81a      	bhi.n	d5a9e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5a68:	4c17      	ldr	r4, [pc, #92]	; (d5ac8 <pinAvailable+0x74>)
   d5a6a:	7821      	ldrb	r1, [r4, #0]
   d5a6c:	f3bf 8f5b 	dmb	ish
   d5a70:	f011 0101 	ands.w	r1, r1, #1
   d5a74:	d10b      	bne.n	d5a8e <pinAvailable+0x3a>
   d5a76:	4620      	mov	r0, r4
   d5a78:	9101      	str	r1, [sp, #4]
   d5a7a:	f7fe fb10 	bl	d409e <__cxa_guard_acquire>
   d5a7e:	9901      	ldr	r1, [sp, #4]
   d5a80:	b128      	cbz	r0, d5a8e <pinAvailable+0x3a>
   d5a82:	4812      	ldr	r0, [pc, #72]	; (d5acc <pinAvailable+0x78>)
   d5a84:	f7ff f82c 	bl	d4ae0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5a88:	4620      	mov	r0, r4
   d5a8a:	f7fe fb0d 	bl	d40a8 <__cxa_guard_release>
   d5a8e:	4b0f      	ldr	r3, [pc, #60]	; (d5acc <pinAvailable+0x78>)
   d5a90:	7818      	ldrb	r0, [r3, #0]
   d5a92:	f7fe fecb 	bl	d482c <hal_spi_is_enabled>
   d5a96:	2800      	cmp	r0, #0
   d5a98:	d1df      	bne.n	d5a5a <pinAvailable+0x6>
  return true; // 'pin' is available
   d5a9a:	2001      	movs	r0, #1
   d5a9c:	e7de      	b.n	d5a5c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5a9e:	2801      	cmp	r0, #1
   d5aa0:	d809      	bhi.n	d5ab6 <pinAvailable+0x62>
   d5aa2:	f000 f83f 	bl	d5b24 <_Z19__fetch_global_Wirev>
   d5aa6:	2100      	movs	r1, #0
   d5aa8:	7c00      	ldrb	r0, [r0, #16]
   d5aaa:	f7fe fea7 	bl	d47fc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5aae:	f080 0001 	eor.w	r0, r0, #1
   d5ab2:	b2c0      	uxtb	r0, r0
   d5ab4:	e7d2      	b.n	d5a5c <pinAvailable+0x8>
   d5ab6:	3809      	subs	r0, #9
   d5ab8:	2801      	cmp	r0, #1
   d5aba:	d8ee      	bhi.n	d5a9a <pinAvailable+0x46>
   d5abc:	f7ff fe64 	bl	d5788 <_Z22__fetch_global_Serial1v>
   d5ac0:	7c00      	ldrb	r0, [r0, #16]
   d5ac2:	f7fe fe63 	bl	d478c <hal_usart_is_enabled>
   d5ac6:	e7f2      	b.n	d5aae <pinAvailable+0x5a>
   d5ac8:	2003e72c 	.word	0x2003e72c
   d5acc:	2003e730 	.word	0x2003e730

000d5ad0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5ad0:	2823      	cmp	r0, #35	; 0x23
{
   d5ad2:	b538      	push	{r3, r4, r5, lr}
   d5ad4:	4604      	mov	r4, r0
   d5ad6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5ad8:	d80a      	bhi.n	d5af0 <pinMode+0x20>
   d5ada:	29ff      	cmp	r1, #255	; 0xff
   d5adc:	d008      	beq.n	d5af0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5ade:	f7ff ffb9 	bl	d5a54 <pinAvailable>
   d5ae2:	b128      	cbz	r0, d5af0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5ae4:	4629      	mov	r1, r5
   d5ae6:	4620      	mov	r0, r4
}
   d5ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5aec:	f7fe bdde 	b.w	d46ac <HAL_Pin_Mode>
}
   d5af0:	bd38      	pop	{r3, r4, r5, pc}

000d5af2 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5af2:	4770      	bx	lr

000d5af4 <_Z17acquireWireBufferv>:
{
   d5af4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5af6:	2300      	movs	r3, #0
   d5af8:	2520      	movs	r5, #32
   d5afa:	8043      	strh	r3, [r0, #2]
   d5afc:	2314      	movs	r3, #20
{
   d5afe:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5b00:	8003      	strh	r3, [r0, #0]
   d5b02:	6085      	str	r5, [r0, #8]
   d5b04:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b06:	4906      	ldr	r1, [pc, #24]	; (d5b20 <_Z17acquireWireBufferv+0x2c>)
   d5b08:	4628      	mov	r0, r5
   d5b0a:	f000 f831 	bl	d5b70 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b0e:	4904      	ldr	r1, [pc, #16]	; (d5b20 <_Z17acquireWireBufferv+0x2c>)
	};
   d5b10:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b12:	4628      	mov	r0, r5
   d5b14:	f000 f82c 	bl	d5b70 <_ZnajRKSt9nothrow_t>
	};
   d5b18:	60e0      	str	r0, [r4, #12]
}
   d5b1a:	4620      	mov	r0, r4
   d5b1c:	bd38      	pop	{r3, r4, r5, pc}
   d5b1e:	bf00      	nop
   d5b20:	000d6b2c 	.word	0x000d6b2c

000d5b24 <_Z19__fetch_global_Wirev>:
{
   d5b24:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5b26:	4d0e      	ldr	r5, [pc, #56]	; (d5b60 <_Z19__fetch_global_Wirev+0x3c>)
   d5b28:	7829      	ldrb	r1, [r5, #0]
   d5b2a:	f3bf 8f5b 	dmb	ish
   d5b2e:	f011 0401 	ands.w	r4, r1, #1
{
   d5b32:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5b34:	d111      	bne.n	d5b5a <_Z19__fetch_global_Wirev+0x36>
   d5b36:	4628      	mov	r0, r5
   d5b38:	f7fe fab1 	bl	d409e <__cxa_guard_acquire>
   d5b3c:	b168      	cbz	r0, d5b5a <_Z19__fetch_global_Wirev+0x36>
   d5b3e:	a801      	add	r0, sp, #4
   d5b40:	f7ff ffd8 	bl	d5af4 <_Z17acquireWireBufferv>
   d5b44:	aa01      	add	r2, sp, #4
   d5b46:	4621      	mov	r1, r4
   d5b48:	4806      	ldr	r0, [pc, #24]	; (d5b64 <_Z19__fetch_global_Wirev+0x40>)
   d5b4a:	f7ff fe83 	bl	d5854 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5b4e:	4628      	mov	r0, r5
   d5b50:	f7fe faaa 	bl	d40a8 <__cxa_guard_release>
   d5b54:	4804      	ldr	r0, [pc, #16]	; (d5b68 <_Z19__fetch_global_Wirev+0x44>)
   d5b56:	f000 fe21 	bl	d679c <atexit>
	return wire;
}
   d5b5a:	4802      	ldr	r0, [pc, #8]	; (d5b64 <_Z19__fetch_global_Wirev+0x40>)
   d5b5c:	b007      	add	sp, #28
   d5b5e:	bd30      	pop	{r4, r5, pc}
   d5b60:	2003e73c 	.word	0x2003e73c
   d5b64:	2003e740 	.word	0x2003e740
   d5b68:	000d5af3 	.word	0x000d5af3

000d5b6c <_ZdlPvj>:
   d5b6c:	f7fe ba95 	b.w	d409a <_ZdlPv>

000d5b70 <_ZnajRKSt9nothrow_t>:
   d5b70:	f7fe ba91 	b.w	d4096 <_Znaj>

000d5b74 <_ZSt25__throw_bad_function_callv>:
   d5b74:	b508      	push	{r3, lr}
   d5b76:	f7fe ff5d 	bl	d4a34 <abort>
	...

000d5b7c <__aeabi_drsub>:
   d5b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5b80:	e002      	b.n	d5b88 <__adddf3>
   d5b82:	bf00      	nop

000d5b84 <__aeabi_dsub>:
   d5b84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5b88 <__adddf3>:
   d5b88:	b530      	push	{r4, r5, lr}
   d5b8a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5b8e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5b92:	ea94 0f05 	teq	r4, r5
   d5b96:	bf08      	it	eq
   d5b98:	ea90 0f02 	teqeq	r0, r2
   d5b9c:	bf1f      	itttt	ne
   d5b9e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5ba2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5ba6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5baa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5bae:	f000 80e2 	beq.w	d5d76 <__adddf3+0x1ee>
   d5bb2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5bb6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5bba:	bfb8      	it	lt
   d5bbc:	426d      	neglt	r5, r5
   d5bbe:	dd0c      	ble.n	d5bda <__adddf3+0x52>
   d5bc0:	442c      	add	r4, r5
   d5bc2:	ea80 0202 	eor.w	r2, r0, r2
   d5bc6:	ea81 0303 	eor.w	r3, r1, r3
   d5bca:	ea82 0000 	eor.w	r0, r2, r0
   d5bce:	ea83 0101 	eor.w	r1, r3, r1
   d5bd2:	ea80 0202 	eor.w	r2, r0, r2
   d5bd6:	ea81 0303 	eor.w	r3, r1, r3
   d5bda:	2d36      	cmp	r5, #54	; 0x36
   d5bdc:	bf88      	it	hi
   d5bde:	bd30      	pophi	{r4, r5, pc}
   d5be0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5be4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5be8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5bec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5bf0:	d002      	beq.n	d5bf8 <__adddf3+0x70>
   d5bf2:	4240      	negs	r0, r0
   d5bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5bf8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5bfc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5c00:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5c04:	d002      	beq.n	d5c0c <__adddf3+0x84>
   d5c06:	4252      	negs	r2, r2
   d5c08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5c0c:	ea94 0f05 	teq	r4, r5
   d5c10:	f000 80a7 	beq.w	d5d62 <__adddf3+0x1da>
   d5c14:	f1a4 0401 	sub.w	r4, r4, #1
   d5c18:	f1d5 0e20 	rsbs	lr, r5, #32
   d5c1c:	db0d      	blt.n	d5c3a <__adddf3+0xb2>
   d5c1e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5c22:	fa22 f205 	lsr.w	r2, r2, r5
   d5c26:	1880      	adds	r0, r0, r2
   d5c28:	f141 0100 	adc.w	r1, r1, #0
   d5c2c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5c30:	1880      	adds	r0, r0, r2
   d5c32:	fa43 f305 	asr.w	r3, r3, r5
   d5c36:	4159      	adcs	r1, r3
   d5c38:	e00e      	b.n	d5c58 <__adddf3+0xd0>
   d5c3a:	f1a5 0520 	sub.w	r5, r5, #32
   d5c3e:	f10e 0e20 	add.w	lr, lr, #32
   d5c42:	2a01      	cmp	r2, #1
   d5c44:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5c48:	bf28      	it	cs
   d5c4a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5c4e:	fa43 f305 	asr.w	r3, r3, r5
   d5c52:	18c0      	adds	r0, r0, r3
   d5c54:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5c58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5c5c:	d507      	bpl.n	d5c6e <__adddf3+0xe6>
   d5c5e:	f04f 0e00 	mov.w	lr, #0
   d5c62:	f1dc 0c00 	rsbs	ip, ip, #0
   d5c66:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5c6a:	eb6e 0101 	sbc.w	r1, lr, r1
   d5c6e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5c72:	d31b      	bcc.n	d5cac <__adddf3+0x124>
   d5c74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5c78:	d30c      	bcc.n	d5c94 <__adddf3+0x10c>
   d5c7a:	0849      	lsrs	r1, r1, #1
   d5c7c:	ea5f 0030 	movs.w	r0, r0, rrx
   d5c80:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5c84:	f104 0401 	add.w	r4, r4, #1
   d5c88:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5c8c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5c90:	f080 809a 	bcs.w	d5dc8 <__adddf3+0x240>
   d5c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5c98:	bf08      	it	eq
   d5c9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5c9e:	f150 0000 	adcs.w	r0, r0, #0
   d5ca2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5ca6:	ea41 0105 	orr.w	r1, r1, r5
   d5caa:	bd30      	pop	{r4, r5, pc}
   d5cac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5cb0:	4140      	adcs	r0, r0
   d5cb2:	eb41 0101 	adc.w	r1, r1, r1
   d5cb6:	3c01      	subs	r4, #1
   d5cb8:	bf28      	it	cs
   d5cba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5cbe:	d2e9      	bcs.n	d5c94 <__adddf3+0x10c>
   d5cc0:	f091 0f00 	teq	r1, #0
   d5cc4:	bf04      	itt	eq
   d5cc6:	4601      	moveq	r1, r0
   d5cc8:	2000      	moveq	r0, #0
   d5cca:	fab1 f381 	clz	r3, r1
   d5cce:	bf08      	it	eq
   d5cd0:	3320      	addeq	r3, #32
   d5cd2:	f1a3 030b 	sub.w	r3, r3, #11
   d5cd6:	f1b3 0220 	subs.w	r2, r3, #32
   d5cda:	da0c      	bge.n	d5cf6 <__adddf3+0x16e>
   d5cdc:	320c      	adds	r2, #12
   d5cde:	dd08      	ble.n	d5cf2 <__adddf3+0x16a>
   d5ce0:	f102 0c14 	add.w	ip, r2, #20
   d5ce4:	f1c2 020c 	rsb	r2, r2, #12
   d5ce8:	fa01 f00c 	lsl.w	r0, r1, ip
   d5cec:	fa21 f102 	lsr.w	r1, r1, r2
   d5cf0:	e00c      	b.n	d5d0c <__adddf3+0x184>
   d5cf2:	f102 0214 	add.w	r2, r2, #20
   d5cf6:	bfd8      	it	le
   d5cf8:	f1c2 0c20 	rsble	ip, r2, #32
   d5cfc:	fa01 f102 	lsl.w	r1, r1, r2
   d5d00:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5d04:	bfdc      	itt	le
   d5d06:	ea41 010c 	orrle.w	r1, r1, ip
   d5d0a:	4090      	lslle	r0, r2
   d5d0c:	1ae4      	subs	r4, r4, r3
   d5d0e:	bfa2      	ittt	ge
   d5d10:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5d14:	4329      	orrge	r1, r5
   d5d16:	bd30      	popge	{r4, r5, pc}
   d5d18:	ea6f 0404 	mvn.w	r4, r4
   d5d1c:	3c1f      	subs	r4, #31
   d5d1e:	da1c      	bge.n	d5d5a <__adddf3+0x1d2>
   d5d20:	340c      	adds	r4, #12
   d5d22:	dc0e      	bgt.n	d5d42 <__adddf3+0x1ba>
   d5d24:	f104 0414 	add.w	r4, r4, #20
   d5d28:	f1c4 0220 	rsb	r2, r4, #32
   d5d2c:	fa20 f004 	lsr.w	r0, r0, r4
   d5d30:	fa01 f302 	lsl.w	r3, r1, r2
   d5d34:	ea40 0003 	orr.w	r0, r0, r3
   d5d38:	fa21 f304 	lsr.w	r3, r1, r4
   d5d3c:	ea45 0103 	orr.w	r1, r5, r3
   d5d40:	bd30      	pop	{r4, r5, pc}
   d5d42:	f1c4 040c 	rsb	r4, r4, #12
   d5d46:	f1c4 0220 	rsb	r2, r4, #32
   d5d4a:	fa20 f002 	lsr.w	r0, r0, r2
   d5d4e:	fa01 f304 	lsl.w	r3, r1, r4
   d5d52:	ea40 0003 	orr.w	r0, r0, r3
   d5d56:	4629      	mov	r1, r5
   d5d58:	bd30      	pop	{r4, r5, pc}
   d5d5a:	fa21 f004 	lsr.w	r0, r1, r4
   d5d5e:	4629      	mov	r1, r5
   d5d60:	bd30      	pop	{r4, r5, pc}
   d5d62:	f094 0f00 	teq	r4, #0
   d5d66:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5d6a:	bf06      	itte	eq
   d5d6c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5d70:	3401      	addeq	r4, #1
   d5d72:	3d01      	subne	r5, #1
   d5d74:	e74e      	b.n	d5c14 <__adddf3+0x8c>
   d5d76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5d7a:	bf18      	it	ne
   d5d7c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5d80:	d029      	beq.n	d5dd6 <__adddf3+0x24e>
   d5d82:	ea94 0f05 	teq	r4, r5
   d5d86:	bf08      	it	eq
   d5d88:	ea90 0f02 	teqeq	r0, r2
   d5d8c:	d005      	beq.n	d5d9a <__adddf3+0x212>
   d5d8e:	ea54 0c00 	orrs.w	ip, r4, r0
   d5d92:	bf04      	itt	eq
   d5d94:	4619      	moveq	r1, r3
   d5d96:	4610      	moveq	r0, r2
   d5d98:	bd30      	pop	{r4, r5, pc}
   d5d9a:	ea91 0f03 	teq	r1, r3
   d5d9e:	bf1e      	ittt	ne
   d5da0:	2100      	movne	r1, #0
   d5da2:	2000      	movne	r0, #0
   d5da4:	bd30      	popne	{r4, r5, pc}
   d5da6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5daa:	d105      	bne.n	d5db8 <__adddf3+0x230>
   d5dac:	0040      	lsls	r0, r0, #1
   d5dae:	4149      	adcs	r1, r1
   d5db0:	bf28      	it	cs
   d5db2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5db6:	bd30      	pop	{r4, r5, pc}
   d5db8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5dbc:	bf3c      	itt	cc
   d5dbe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5dc2:	bd30      	popcc	{r4, r5, pc}
   d5dc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5dc8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5dcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5dd0:	f04f 0000 	mov.w	r0, #0
   d5dd4:	bd30      	pop	{r4, r5, pc}
   d5dd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5dda:	bf1a      	itte	ne
   d5ddc:	4619      	movne	r1, r3
   d5dde:	4610      	movne	r0, r2
   d5de0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5de4:	bf1c      	itt	ne
   d5de6:	460b      	movne	r3, r1
   d5de8:	4602      	movne	r2, r0
   d5dea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5dee:	bf06      	itte	eq
   d5df0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5df4:	ea91 0f03 	teqeq	r1, r3
   d5df8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5dfc:	bd30      	pop	{r4, r5, pc}
   d5dfe:	bf00      	nop

000d5e00 <__aeabi_ui2d>:
   d5e00:	f090 0f00 	teq	r0, #0
   d5e04:	bf04      	itt	eq
   d5e06:	2100      	moveq	r1, #0
   d5e08:	4770      	bxeq	lr
   d5e0a:	b530      	push	{r4, r5, lr}
   d5e0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5e10:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5e14:	f04f 0500 	mov.w	r5, #0
   d5e18:	f04f 0100 	mov.w	r1, #0
   d5e1c:	e750      	b.n	d5cc0 <__adddf3+0x138>
   d5e1e:	bf00      	nop

000d5e20 <__aeabi_i2d>:
   d5e20:	f090 0f00 	teq	r0, #0
   d5e24:	bf04      	itt	eq
   d5e26:	2100      	moveq	r1, #0
   d5e28:	4770      	bxeq	lr
   d5e2a:	b530      	push	{r4, r5, lr}
   d5e2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5e30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5e34:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5e38:	bf48      	it	mi
   d5e3a:	4240      	negmi	r0, r0
   d5e3c:	f04f 0100 	mov.w	r1, #0
   d5e40:	e73e      	b.n	d5cc0 <__adddf3+0x138>
   d5e42:	bf00      	nop

000d5e44 <__aeabi_f2d>:
   d5e44:	0042      	lsls	r2, r0, #1
   d5e46:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5e4a:	ea4f 0131 	mov.w	r1, r1, rrx
   d5e4e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5e52:	bf1f      	itttt	ne
   d5e54:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5e58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5e5c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5e60:	4770      	bxne	lr
   d5e62:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5e66:	bf08      	it	eq
   d5e68:	4770      	bxeq	lr
   d5e6a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5e6e:	bf04      	itt	eq
   d5e70:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5e74:	4770      	bxeq	lr
   d5e76:	b530      	push	{r4, r5, lr}
   d5e78:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5e7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5e84:	e71c      	b.n	d5cc0 <__adddf3+0x138>
   d5e86:	bf00      	nop

000d5e88 <__aeabi_ul2d>:
   d5e88:	ea50 0201 	orrs.w	r2, r0, r1
   d5e8c:	bf08      	it	eq
   d5e8e:	4770      	bxeq	lr
   d5e90:	b530      	push	{r4, r5, lr}
   d5e92:	f04f 0500 	mov.w	r5, #0
   d5e96:	e00a      	b.n	d5eae <__aeabi_l2d+0x16>

000d5e98 <__aeabi_l2d>:
   d5e98:	ea50 0201 	orrs.w	r2, r0, r1
   d5e9c:	bf08      	it	eq
   d5e9e:	4770      	bxeq	lr
   d5ea0:	b530      	push	{r4, r5, lr}
   d5ea2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5ea6:	d502      	bpl.n	d5eae <__aeabi_l2d+0x16>
   d5ea8:	4240      	negs	r0, r0
   d5eaa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5eae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5eb2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5eb6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5eba:	f43f aed8 	beq.w	d5c6e <__adddf3+0xe6>
   d5ebe:	f04f 0203 	mov.w	r2, #3
   d5ec2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ec6:	bf18      	it	ne
   d5ec8:	3203      	addne	r2, #3
   d5eca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ece:	bf18      	it	ne
   d5ed0:	3203      	addne	r2, #3
   d5ed2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5ed6:	f1c2 0320 	rsb	r3, r2, #32
   d5eda:	fa00 fc03 	lsl.w	ip, r0, r3
   d5ede:	fa20 f002 	lsr.w	r0, r0, r2
   d5ee2:	fa01 fe03 	lsl.w	lr, r1, r3
   d5ee6:	ea40 000e 	orr.w	r0, r0, lr
   d5eea:	fa21 f102 	lsr.w	r1, r1, r2
   d5eee:	4414      	add	r4, r2
   d5ef0:	e6bd      	b.n	d5c6e <__adddf3+0xe6>
   d5ef2:	bf00      	nop

000d5ef4 <__aeabi_dmul>:
   d5ef4:	b570      	push	{r4, r5, r6, lr}
   d5ef6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5efa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5efe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5f02:	bf1d      	ittte	ne
   d5f04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5f08:	ea94 0f0c 	teqne	r4, ip
   d5f0c:	ea95 0f0c 	teqne	r5, ip
   d5f10:	f000 f8de 	bleq	d60d0 <__aeabi_dmul+0x1dc>
   d5f14:	442c      	add	r4, r5
   d5f16:	ea81 0603 	eor.w	r6, r1, r3
   d5f1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5f1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5f22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5f26:	bf18      	it	ne
   d5f28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5f2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5f34:	d038      	beq.n	d5fa8 <__aeabi_dmul+0xb4>
   d5f36:	fba0 ce02 	umull	ip, lr, r0, r2
   d5f3a:	f04f 0500 	mov.w	r5, #0
   d5f3e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5f42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5f46:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5f4a:	f04f 0600 	mov.w	r6, #0
   d5f4e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5f52:	f09c 0f00 	teq	ip, #0
   d5f56:	bf18      	it	ne
   d5f58:	f04e 0e01 	orrne.w	lr, lr, #1
   d5f5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5f60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5f64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5f68:	d204      	bcs.n	d5f74 <__aeabi_dmul+0x80>
   d5f6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5f6e:	416d      	adcs	r5, r5
   d5f70:	eb46 0606 	adc.w	r6, r6, r6
   d5f74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5f78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5f7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5f80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5f84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5f88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5f8c:	bf88      	it	hi
   d5f8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5f92:	d81e      	bhi.n	d5fd2 <__aeabi_dmul+0xde>
   d5f94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5f98:	bf08      	it	eq
   d5f9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5f9e:	f150 0000 	adcs.w	r0, r0, #0
   d5fa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5fa6:	bd70      	pop	{r4, r5, r6, pc}
   d5fa8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5fac:	ea46 0101 	orr.w	r1, r6, r1
   d5fb0:	ea40 0002 	orr.w	r0, r0, r2
   d5fb4:	ea81 0103 	eor.w	r1, r1, r3
   d5fb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5fbc:	bfc2      	ittt	gt
   d5fbe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5fc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5fc6:	bd70      	popgt	{r4, r5, r6, pc}
   d5fc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5fcc:	f04f 0e00 	mov.w	lr, #0
   d5fd0:	3c01      	subs	r4, #1
   d5fd2:	f300 80ab 	bgt.w	d612c <__aeabi_dmul+0x238>
   d5fd6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5fda:	bfde      	ittt	le
   d5fdc:	2000      	movle	r0, #0
   d5fde:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5fe2:	bd70      	pople	{r4, r5, r6, pc}
   d5fe4:	f1c4 0400 	rsb	r4, r4, #0
   d5fe8:	3c20      	subs	r4, #32
   d5fea:	da35      	bge.n	d6058 <__aeabi_dmul+0x164>
   d5fec:	340c      	adds	r4, #12
   d5fee:	dc1b      	bgt.n	d6028 <__aeabi_dmul+0x134>
   d5ff0:	f104 0414 	add.w	r4, r4, #20
   d5ff4:	f1c4 0520 	rsb	r5, r4, #32
   d5ff8:	fa00 f305 	lsl.w	r3, r0, r5
   d5ffc:	fa20 f004 	lsr.w	r0, r0, r4
   d6000:	fa01 f205 	lsl.w	r2, r1, r5
   d6004:	ea40 0002 	orr.w	r0, r0, r2
   d6008:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d600c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6010:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6014:	fa21 f604 	lsr.w	r6, r1, r4
   d6018:	eb42 0106 	adc.w	r1, r2, r6
   d601c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6020:	bf08      	it	eq
   d6022:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6026:	bd70      	pop	{r4, r5, r6, pc}
   d6028:	f1c4 040c 	rsb	r4, r4, #12
   d602c:	f1c4 0520 	rsb	r5, r4, #32
   d6030:	fa00 f304 	lsl.w	r3, r0, r4
   d6034:	fa20 f005 	lsr.w	r0, r0, r5
   d6038:	fa01 f204 	lsl.w	r2, r1, r4
   d603c:	ea40 0002 	orr.w	r0, r0, r2
   d6040:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6044:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6048:	f141 0100 	adc.w	r1, r1, #0
   d604c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6050:	bf08      	it	eq
   d6052:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6056:	bd70      	pop	{r4, r5, r6, pc}
   d6058:	f1c4 0520 	rsb	r5, r4, #32
   d605c:	fa00 f205 	lsl.w	r2, r0, r5
   d6060:	ea4e 0e02 	orr.w	lr, lr, r2
   d6064:	fa20 f304 	lsr.w	r3, r0, r4
   d6068:	fa01 f205 	lsl.w	r2, r1, r5
   d606c:	ea43 0302 	orr.w	r3, r3, r2
   d6070:	fa21 f004 	lsr.w	r0, r1, r4
   d6074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6078:	fa21 f204 	lsr.w	r2, r1, r4
   d607c:	ea20 0002 	bic.w	r0, r0, r2
   d6080:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6084:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6088:	bf08      	it	eq
   d608a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d608e:	bd70      	pop	{r4, r5, r6, pc}
   d6090:	f094 0f00 	teq	r4, #0
   d6094:	d10f      	bne.n	d60b6 <__aeabi_dmul+0x1c2>
   d6096:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d609a:	0040      	lsls	r0, r0, #1
   d609c:	eb41 0101 	adc.w	r1, r1, r1
   d60a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d60a4:	bf08      	it	eq
   d60a6:	3c01      	subeq	r4, #1
   d60a8:	d0f7      	beq.n	d609a <__aeabi_dmul+0x1a6>
   d60aa:	ea41 0106 	orr.w	r1, r1, r6
   d60ae:	f095 0f00 	teq	r5, #0
   d60b2:	bf18      	it	ne
   d60b4:	4770      	bxne	lr
   d60b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d60ba:	0052      	lsls	r2, r2, #1
   d60bc:	eb43 0303 	adc.w	r3, r3, r3
   d60c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d60c4:	bf08      	it	eq
   d60c6:	3d01      	subeq	r5, #1
   d60c8:	d0f7      	beq.n	d60ba <__aeabi_dmul+0x1c6>
   d60ca:	ea43 0306 	orr.w	r3, r3, r6
   d60ce:	4770      	bx	lr
   d60d0:	ea94 0f0c 	teq	r4, ip
   d60d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d60d8:	bf18      	it	ne
   d60da:	ea95 0f0c 	teqne	r5, ip
   d60de:	d00c      	beq.n	d60fa <__aeabi_dmul+0x206>
   d60e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d60e4:	bf18      	it	ne
   d60e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d60ea:	d1d1      	bne.n	d6090 <__aeabi_dmul+0x19c>
   d60ec:	ea81 0103 	eor.w	r1, r1, r3
   d60f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d60f4:	f04f 0000 	mov.w	r0, #0
   d60f8:	bd70      	pop	{r4, r5, r6, pc}
   d60fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d60fe:	bf06      	itte	eq
   d6100:	4610      	moveq	r0, r2
   d6102:	4619      	moveq	r1, r3
   d6104:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6108:	d019      	beq.n	d613e <__aeabi_dmul+0x24a>
   d610a:	ea94 0f0c 	teq	r4, ip
   d610e:	d102      	bne.n	d6116 <__aeabi_dmul+0x222>
   d6110:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6114:	d113      	bne.n	d613e <__aeabi_dmul+0x24a>
   d6116:	ea95 0f0c 	teq	r5, ip
   d611a:	d105      	bne.n	d6128 <__aeabi_dmul+0x234>
   d611c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6120:	bf1c      	itt	ne
   d6122:	4610      	movne	r0, r2
   d6124:	4619      	movne	r1, r3
   d6126:	d10a      	bne.n	d613e <__aeabi_dmul+0x24a>
   d6128:	ea81 0103 	eor.w	r1, r1, r3
   d612c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6130:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6134:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6138:	f04f 0000 	mov.w	r0, #0
   d613c:	bd70      	pop	{r4, r5, r6, pc}
   d613e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6142:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6146:	bd70      	pop	{r4, r5, r6, pc}

000d6148 <__aeabi_ddiv>:
   d6148:	b570      	push	{r4, r5, r6, lr}
   d614a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d614e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6152:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6156:	bf1d      	ittte	ne
   d6158:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d615c:	ea94 0f0c 	teqne	r4, ip
   d6160:	ea95 0f0c 	teqne	r5, ip
   d6164:	f000 f8a7 	bleq	d62b6 <__aeabi_ddiv+0x16e>
   d6168:	eba4 0405 	sub.w	r4, r4, r5
   d616c:	ea81 0e03 	eor.w	lr, r1, r3
   d6170:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6174:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6178:	f000 8088 	beq.w	d628c <__aeabi_ddiv+0x144>
   d617c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6180:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6184:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6188:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d618c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6190:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6194:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6198:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d619c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d61a0:	429d      	cmp	r5, r3
   d61a2:	bf08      	it	eq
   d61a4:	4296      	cmpeq	r6, r2
   d61a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d61aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d61ae:	d202      	bcs.n	d61b6 <__aeabi_ddiv+0x6e>
   d61b0:	085b      	lsrs	r3, r3, #1
   d61b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d61b6:	1ab6      	subs	r6, r6, r2
   d61b8:	eb65 0503 	sbc.w	r5, r5, r3
   d61bc:	085b      	lsrs	r3, r3, #1
   d61be:	ea4f 0232 	mov.w	r2, r2, rrx
   d61c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d61c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d61ca:	ebb6 0e02 	subs.w	lr, r6, r2
   d61ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61d2:	bf22      	ittt	cs
   d61d4:	1ab6      	subcs	r6, r6, r2
   d61d6:	4675      	movcs	r5, lr
   d61d8:	ea40 000c 	orrcs.w	r0, r0, ip
   d61dc:	085b      	lsrs	r3, r3, #1
   d61de:	ea4f 0232 	mov.w	r2, r2, rrx
   d61e2:	ebb6 0e02 	subs.w	lr, r6, r2
   d61e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61ea:	bf22      	ittt	cs
   d61ec:	1ab6      	subcs	r6, r6, r2
   d61ee:	4675      	movcs	r5, lr
   d61f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d61f4:	085b      	lsrs	r3, r3, #1
   d61f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d61fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d61fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6202:	bf22      	ittt	cs
   d6204:	1ab6      	subcs	r6, r6, r2
   d6206:	4675      	movcs	r5, lr
   d6208:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d620c:	085b      	lsrs	r3, r3, #1
   d620e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6212:	ebb6 0e02 	subs.w	lr, r6, r2
   d6216:	eb75 0e03 	sbcs.w	lr, r5, r3
   d621a:	bf22      	ittt	cs
   d621c:	1ab6      	subcs	r6, r6, r2
   d621e:	4675      	movcs	r5, lr
   d6220:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6224:	ea55 0e06 	orrs.w	lr, r5, r6
   d6228:	d018      	beq.n	d625c <__aeabi_ddiv+0x114>
   d622a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d622e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6232:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6236:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d623a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d623e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6242:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6246:	d1c0      	bne.n	d61ca <__aeabi_ddiv+0x82>
   d6248:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d624c:	d10b      	bne.n	d6266 <__aeabi_ddiv+0x11e>
   d624e:	ea41 0100 	orr.w	r1, r1, r0
   d6252:	f04f 0000 	mov.w	r0, #0
   d6256:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d625a:	e7b6      	b.n	d61ca <__aeabi_ddiv+0x82>
   d625c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6260:	bf04      	itt	eq
   d6262:	4301      	orreq	r1, r0
   d6264:	2000      	moveq	r0, #0
   d6266:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d626a:	bf88      	it	hi
   d626c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6270:	f63f aeaf 	bhi.w	d5fd2 <__aeabi_dmul+0xde>
   d6274:	ebb5 0c03 	subs.w	ip, r5, r3
   d6278:	bf04      	itt	eq
   d627a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d627e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6282:	f150 0000 	adcs.w	r0, r0, #0
   d6286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d628a:	bd70      	pop	{r4, r5, r6, pc}
   d628c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6290:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6294:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6298:	bfc2      	ittt	gt
   d629a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d629e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d62a2:	bd70      	popgt	{r4, r5, r6, pc}
   d62a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d62a8:	f04f 0e00 	mov.w	lr, #0
   d62ac:	3c01      	subs	r4, #1
   d62ae:	e690      	b.n	d5fd2 <__aeabi_dmul+0xde>
   d62b0:	ea45 0e06 	orr.w	lr, r5, r6
   d62b4:	e68d      	b.n	d5fd2 <__aeabi_dmul+0xde>
   d62b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d62ba:	ea94 0f0c 	teq	r4, ip
   d62be:	bf08      	it	eq
   d62c0:	ea95 0f0c 	teqeq	r5, ip
   d62c4:	f43f af3b 	beq.w	d613e <__aeabi_dmul+0x24a>
   d62c8:	ea94 0f0c 	teq	r4, ip
   d62cc:	d10a      	bne.n	d62e4 <__aeabi_ddiv+0x19c>
   d62ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d62d2:	f47f af34 	bne.w	d613e <__aeabi_dmul+0x24a>
   d62d6:	ea95 0f0c 	teq	r5, ip
   d62da:	f47f af25 	bne.w	d6128 <__aeabi_dmul+0x234>
   d62de:	4610      	mov	r0, r2
   d62e0:	4619      	mov	r1, r3
   d62e2:	e72c      	b.n	d613e <__aeabi_dmul+0x24a>
   d62e4:	ea95 0f0c 	teq	r5, ip
   d62e8:	d106      	bne.n	d62f8 <__aeabi_ddiv+0x1b0>
   d62ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d62ee:	f43f aefd 	beq.w	d60ec <__aeabi_dmul+0x1f8>
   d62f2:	4610      	mov	r0, r2
   d62f4:	4619      	mov	r1, r3
   d62f6:	e722      	b.n	d613e <__aeabi_dmul+0x24a>
   d62f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d62fc:	bf18      	it	ne
   d62fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6302:	f47f aec5 	bne.w	d6090 <__aeabi_dmul+0x19c>
   d6306:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d630a:	f47f af0d 	bne.w	d6128 <__aeabi_dmul+0x234>
   d630e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6312:	f47f aeeb 	bne.w	d60ec <__aeabi_dmul+0x1f8>
   d6316:	e712      	b.n	d613e <__aeabi_dmul+0x24a>

000d6318 <__gedf2>:
   d6318:	f04f 3cff 	mov.w	ip, #4294967295
   d631c:	e006      	b.n	d632c <__cmpdf2+0x4>
   d631e:	bf00      	nop

000d6320 <__ledf2>:
   d6320:	f04f 0c01 	mov.w	ip, #1
   d6324:	e002      	b.n	d632c <__cmpdf2+0x4>
   d6326:	bf00      	nop

000d6328 <__cmpdf2>:
   d6328:	f04f 0c01 	mov.w	ip, #1
   d632c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6330:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6334:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6338:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d633c:	bf18      	it	ne
   d633e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6342:	d01b      	beq.n	d637c <__cmpdf2+0x54>
   d6344:	b001      	add	sp, #4
   d6346:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d634a:	bf0c      	ite	eq
   d634c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6350:	ea91 0f03 	teqne	r1, r3
   d6354:	bf02      	ittt	eq
   d6356:	ea90 0f02 	teqeq	r0, r2
   d635a:	2000      	moveq	r0, #0
   d635c:	4770      	bxeq	lr
   d635e:	f110 0f00 	cmn.w	r0, #0
   d6362:	ea91 0f03 	teq	r1, r3
   d6366:	bf58      	it	pl
   d6368:	4299      	cmppl	r1, r3
   d636a:	bf08      	it	eq
   d636c:	4290      	cmpeq	r0, r2
   d636e:	bf2c      	ite	cs
   d6370:	17d8      	asrcs	r0, r3, #31
   d6372:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6376:	f040 0001 	orr.w	r0, r0, #1
   d637a:	4770      	bx	lr
   d637c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6380:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6384:	d102      	bne.n	d638c <__cmpdf2+0x64>
   d6386:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d638a:	d107      	bne.n	d639c <__cmpdf2+0x74>
   d638c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6390:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6394:	d1d6      	bne.n	d6344 <__cmpdf2+0x1c>
   d6396:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d639a:	d0d3      	beq.n	d6344 <__cmpdf2+0x1c>
   d639c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d63a0:	4770      	bx	lr
   d63a2:	bf00      	nop

000d63a4 <__aeabi_cdrcmple>:
   d63a4:	4684      	mov	ip, r0
   d63a6:	4610      	mov	r0, r2
   d63a8:	4662      	mov	r2, ip
   d63aa:	468c      	mov	ip, r1
   d63ac:	4619      	mov	r1, r3
   d63ae:	4663      	mov	r3, ip
   d63b0:	e000      	b.n	d63b4 <__aeabi_cdcmpeq>
   d63b2:	bf00      	nop

000d63b4 <__aeabi_cdcmpeq>:
   d63b4:	b501      	push	{r0, lr}
   d63b6:	f7ff ffb7 	bl	d6328 <__cmpdf2>
   d63ba:	2800      	cmp	r0, #0
   d63bc:	bf48      	it	mi
   d63be:	f110 0f00 	cmnmi.w	r0, #0
   d63c2:	bd01      	pop	{r0, pc}

000d63c4 <__aeabi_dcmpeq>:
   d63c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63c8:	f7ff fff4 	bl	d63b4 <__aeabi_cdcmpeq>
   d63cc:	bf0c      	ite	eq
   d63ce:	2001      	moveq	r0, #1
   d63d0:	2000      	movne	r0, #0
   d63d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d63d6:	bf00      	nop

000d63d8 <__aeabi_dcmplt>:
   d63d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63dc:	f7ff ffea 	bl	d63b4 <__aeabi_cdcmpeq>
   d63e0:	bf34      	ite	cc
   d63e2:	2001      	movcc	r0, #1
   d63e4:	2000      	movcs	r0, #0
   d63e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d63ea:	bf00      	nop

000d63ec <__aeabi_dcmple>:
   d63ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63f0:	f7ff ffe0 	bl	d63b4 <__aeabi_cdcmpeq>
   d63f4:	bf94      	ite	ls
   d63f6:	2001      	movls	r0, #1
   d63f8:	2000      	movhi	r0, #0
   d63fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d63fe:	bf00      	nop

000d6400 <__aeabi_dcmpge>:
   d6400:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6404:	f7ff ffce 	bl	d63a4 <__aeabi_cdrcmple>
   d6408:	bf94      	ite	ls
   d640a:	2001      	movls	r0, #1
   d640c:	2000      	movhi	r0, #0
   d640e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6412:	bf00      	nop

000d6414 <__aeabi_dcmpgt>:
   d6414:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6418:	f7ff ffc4 	bl	d63a4 <__aeabi_cdrcmple>
   d641c:	bf34      	ite	cc
   d641e:	2001      	movcc	r0, #1
   d6420:	2000      	movcs	r0, #0
   d6422:	f85d fb08 	ldr.w	pc, [sp], #8
   d6426:	bf00      	nop

000d6428 <__aeabi_d2uiz>:
   d6428:	004a      	lsls	r2, r1, #1
   d642a:	d211      	bcs.n	d6450 <__aeabi_d2uiz+0x28>
   d642c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6430:	d211      	bcs.n	d6456 <__aeabi_d2uiz+0x2e>
   d6432:	d50d      	bpl.n	d6450 <__aeabi_d2uiz+0x28>
   d6434:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6438:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d643c:	d40e      	bmi.n	d645c <__aeabi_d2uiz+0x34>
   d643e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6446:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d644a:	fa23 f002 	lsr.w	r0, r3, r2
   d644e:	4770      	bx	lr
   d6450:	f04f 0000 	mov.w	r0, #0
   d6454:	4770      	bx	lr
   d6456:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d645a:	d102      	bne.n	d6462 <__aeabi_d2uiz+0x3a>
   d645c:	f04f 30ff 	mov.w	r0, #4294967295
   d6460:	4770      	bx	lr
   d6462:	f04f 0000 	mov.w	r0, #0
   d6466:	4770      	bx	lr

000d6468 <__aeabi_uldivmod>:
   d6468:	b953      	cbnz	r3, d6480 <__aeabi_uldivmod+0x18>
   d646a:	b94a      	cbnz	r2, d6480 <__aeabi_uldivmod+0x18>
   d646c:	2900      	cmp	r1, #0
   d646e:	bf08      	it	eq
   d6470:	2800      	cmpeq	r0, #0
   d6472:	bf1c      	itt	ne
   d6474:	f04f 31ff 	movne.w	r1, #4294967295
   d6478:	f04f 30ff 	movne.w	r0, #4294967295
   d647c:	f000 b98c 	b.w	d6798 <__aeabi_idiv0>
   d6480:	f1ad 0c08 	sub.w	ip, sp, #8
   d6484:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6488:	f000 f824 	bl	d64d4 <__udivmoddi4>
   d648c:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6494:	b004      	add	sp, #16
   d6496:	4770      	bx	lr

000d6498 <__aeabi_d2ulz>:
   d6498:	b5d0      	push	{r4, r6, r7, lr}
   d649a:	4b0c      	ldr	r3, [pc, #48]	; (d64cc <__aeabi_d2ulz+0x34>)
   d649c:	2200      	movs	r2, #0
   d649e:	4606      	mov	r6, r0
   d64a0:	460f      	mov	r7, r1
   d64a2:	f7ff fd27 	bl	d5ef4 <__aeabi_dmul>
   d64a6:	f7ff ffbf 	bl	d6428 <__aeabi_d2uiz>
   d64aa:	4604      	mov	r4, r0
   d64ac:	f7ff fca8 	bl	d5e00 <__aeabi_ui2d>
   d64b0:	4b07      	ldr	r3, [pc, #28]	; (d64d0 <__aeabi_d2ulz+0x38>)
   d64b2:	2200      	movs	r2, #0
   d64b4:	f7ff fd1e 	bl	d5ef4 <__aeabi_dmul>
   d64b8:	4602      	mov	r2, r0
   d64ba:	460b      	mov	r3, r1
   d64bc:	4630      	mov	r0, r6
   d64be:	4639      	mov	r1, r7
   d64c0:	f7ff fb60 	bl	d5b84 <__aeabi_dsub>
   d64c4:	f7ff ffb0 	bl	d6428 <__aeabi_d2uiz>
   d64c8:	4621      	mov	r1, r4
   d64ca:	bdd0      	pop	{r4, r6, r7, pc}
   d64cc:	3df00000 	.word	0x3df00000
   d64d0:	41f00000 	.word	0x41f00000

000d64d4 <__udivmoddi4>:
   d64d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d64d8:	9d08      	ldr	r5, [sp, #32]
   d64da:	4604      	mov	r4, r0
   d64dc:	468c      	mov	ip, r1
   d64de:	2b00      	cmp	r3, #0
   d64e0:	f040 8083 	bne.w	d65ea <__udivmoddi4+0x116>
   d64e4:	428a      	cmp	r2, r1
   d64e6:	4617      	mov	r7, r2
   d64e8:	d947      	bls.n	d657a <__udivmoddi4+0xa6>
   d64ea:	fab2 f282 	clz	r2, r2
   d64ee:	b142      	cbz	r2, d6502 <__udivmoddi4+0x2e>
   d64f0:	f1c2 0020 	rsb	r0, r2, #32
   d64f4:	fa24 f000 	lsr.w	r0, r4, r0
   d64f8:	4091      	lsls	r1, r2
   d64fa:	4097      	lsls	r7, r2
   d64fc:	ea40 0c01 	orr.w	ip, r0, r1
   d6500:	4094      	lsls	r4, r2
   d6502:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6506:	0c23      	lsrs	r3, r4, #16
   d6508:	fbbc f6f8 	udiv	r6, ip, r8
   d650c:	fa1f fe87 	uxth.w	lr, r7
   d6510:	fb08 c116 	mls	r1, r8, r6, ip
   d6514:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d6518:	fb06 f10e 	mul.w	r1, r6, lr
   d651c:	4299      	cmp	r1, r3
   d651e:	d909      	bls.n	d6534 <__udivmoddi4+0x60>
   d6520:	18fb      	adds	r3, r7, r3
   d6522:	f106 30ff 	add.w	r0, r6, #4294967295
   d6526:	f080 8119 	bcs.w	d675c <__udivmoddi4+0x288>
   d652a:	4299      	cmp	r1, r3
   d652c:	f240 8116 	bls.w	d675c <__udivmoddi4+0x288>
   d6530:	3e02      	subs	r6, #2
   d6532:	443b      	add	r3, r7
   d6534:	1a5b      	subs	r3, r3, r1
   d6536:	b2a4      	uxth	r4, r4
   d6538:	fbb3 f0f8 	udiv	r0, r3, r8
   d653c:	fb08 3310 	mls	r3, r8, r0, r3
   d6540:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d6544:	fb00 fe0e 	mul.w	lr, r0, lr
   d6548:	45a6      	cmp	lr, r4
   d654a:	d909      	bls.n	d6560 <__udivmoddi4+0x8c>
   d654c:	193c      	adds	r4, r7, r4
   d654e:	f100 33ff 	add.w	r3, r0, #4294967295
   d6552:	f080 8105 	bcs.w	d6760 <__udivmoddi4+0x28c>
   d6556:	45a6      	cmp	lr, r4
   d6558:	f240 8102 	bls.w	d6760 <__udivmoddi4+0x28c>
   d655c:	3802      	subs	r0, #2
   d655e:	443c      	add	r4, r7
   d6560:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d6564:	eba4 040e 	sub.w	r4, r4, lr
   d6568:	2600      	movs	r6, #0
   d656a:	b11d      	cbz	r5, d6574 <__udivmoddi4+0xa0>
   d656c:	40d4      	lsrs	r4, r2
   d656e:	2300      	movs	r3, #0
   d6570:	e9c5 4300 	strd	r4, r3, [r5]
   d6574:	4631      	mov	r1, r6
   d6576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d657a:	b902      	cbnz	r2, d657e <__udivmoddi4+0xaa>
   d657c:	deff      	udf	#255	; 0xff
   d657e:	fab2 f282 	clz	r2, r2
   d6582:	2a00      	cmp	r2, #0
   d6584:	d150      	bne.n	d6628 <__udivmoddi4+0x154>
   d6586:	1bcb      	subs	r3, r1, r7
   d6588:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d658c:	fa1f f887 	uxth.w	r8, r7
   d6590:	2601      	movs	r6, #1
   d6592:	fbb3 fcfe 	udiv	ip, r3, lr
   d6596:	0c21      	lsrs	r1, r4, #16
   d6598:	fb0e 331c 	mls	r3, lr, ip, r3
   d659c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d65a0:	fb08 f30c 	mul.w	r3, r8, ip
   d65a4:	428b      	cmp	r3, r1
   d65a6:	d907      	bls.n	d65b8 <__udivmoddi4+0xe4>
   d65a8:	1879      	adds	r1, r7, r1
   d65aa:	f10c 30ff 	add.w	r0, ip, #4294967295
   d65ae:	d202      	bcs.n	d65b6 <__udivmoddi4+0xe2>
   d65b0:	428b      	cmp	r3, r1
   d65b2:	f200 80e9 	bhi.w	d6788 <__udivmoddi4+0x2b4>
   d65b6:	4684      	mov	ip, r0
   d65b8:	1ac9      	subs	r1, r1, r3
   d65ba:	b2a3      	uxth	r3, r4
   d65bc:	fbb1 f0fe 	udiv	r0, r1, lr
   d65c0:	fb0e 1110 	mls	r1, lr, r0, r1
   d65c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d65c8:	fb08 f800 	mul.w	r8, r8, r0
   d65cc:	45a0      	cmp	r8, r4
   d65ce:	d907      	bls.n	d65e0 <__udivmoddi4+0x10c>
   d65d0:	193c      	adds	r4, r7, r4
   d65d2:	f100 33ff 	add.w	r3, r0, #4294967295
   d65d6:	d202      	bcs.n	d65de <__udivmoddi4+0x10a>
   d65d8:	45a0      	cmp	r8, r4
   d65da:	f200 80d9 	bhi.w	d6790 <__udivmoddi4+0x2bc>
   d65de:	4618      	mov	r0, r3
   d65e0:	eba4 0408 	sub.w	r4, r4, r8
   d65e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d65e8:	e7bf      	b.n	d656a <__udivmoddi4+0x96>
   d65ea:	428b      	cmp	r3, r1
   d65ec:	d909      	bls.n	d6602 <__udivmoddi4+0x12e>
   d65ee:	2d00      	cmp	r5, #0
   d65f0:	f000 80b1 	beq.w	d6756 <__udivmoddi4+0x282>
   d65f4:	2600      	movs	r6, #0
   d65f6:	e9c5 0100 	strd	r0, r1, [r5]
   d65fa:	4630      	mov	r0, r6
   d65fc:	4631      	mov	r1, r6
   d65fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6602:	fab3 f683 	clz	r6, r3
   d6606:	2e00      	cmp	r6, #0
   d6608:	d14a      	bne.n	d66a0 <__udivmoddi4+0x1cc>
   d660a:	428b      	cmp	r3, r1
   d660c:	d302      	bcc.n	d6614 <__udivmoddi4+0x140>
   d660e:	4282      	cmp	r2, r0
   d6610:	f200 80b8 	bhi.w	d6784 <__udivmoddi4+0x2b0>
   d6614:	1a84      	subs	r4, r0, r2
   d6616:	eb61 0103 	sbc.w	r1, r1, r3
   d661a:	2001      	movs	r0, #1
   d661c:	468c      	mov	ip, r1
   d661e:	2d00      	cmp	r5, #0
   d6620:	d0a8      	beq.n	d6574 <__udivmoddi4+0xa0>
   d6622:	e9c5 4c00 	strd	r4, ip, [r5]
   d6626:	e7a5      	b.n	d6574 <__udivmoddi4+0xa0>
   d6628:	f1c2 0320 	rsb	r3, r2, #32
   d662c:	fa20 f603 	lsr.w	r6, r0, r3
   d6630:	4097      	lsls	r7, r2
   d6632:	fa01 f002 	lsl.w	r0, r1, r2
   d6636:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d663a:	40d9      	lsrs	r1, r3
   d663c:	4330      	orrs	r0, r6
   d663e:	0c03      	lsrs	r3, r0, #16
   d6640:	fbb1 f6fe 	udiv	r6, r1, lr
   d6644:	fa1f f887 	uxth.w	r8, r7
   d6648:	fb0e 1116 	mls	r1, lr, r6, r1
   d664c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d6650:	fb06 f108 	mul.w	r1, r6, r8
   d6654:	4299      	cmp	r1, r3
   d6656:	fa04 f402 	lsl.w	r4, r4, r2
   d665a:	d909      	bls.n	d6670 <__udivmoddi4+0x19c>
   d665c:	18fb      	adds	r3, r7, r3
   d665e:	f106 3cff 	add.w	ip, r6, #4294967295
   d6662:	f080 808d 	bcs.w	d6780 <__udivmoddi4+0x2ac>
   d6666:	4299      	cmp	r1, r3
   d6668:	f240 808a 	bls.w	d6780 <__udivmoddi4+0x2ac>
   d666c:	3e02      	subs	r6, #2
   d666e:	443b      	add	r3, r7
   d6670:	1a5b      	subs	r3, r3, r1
   d6672:	b281      	uxth	r1, r0
   d6674:	fbb3 f0fe 	udiv	r0, r3, lr
   d6678:	fb0e 3310 	mls	r3, lr, r0, r3
   d667c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d6680:	fb00 f308 	mul.w	r3, r0, r8
   d6684:	428b      	cmp	r3, r1
   d6686:	d907      	bls.n	d6698 <__udivmoddi4+0x1c4>
   d6688:	1879      	adds	r1, r7, r1
   d668a:	f100 3cff 	add.w	ip, r0, #4294967295
   d668e:	d273      	bcs.n	d6778 <__udivmoddi4+0x2a4>
   d6690:	428b      	cmp	r3, r1
   d6692:	d971      	bls.n	d6778 <__udivmoddi4+0x2a4>
   d6694:	3802      	subs	r0, #2
   d6696:	4439      	add	r1, r7
   d6698:	1acb      	subs	r3, r1, r3
   d669a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d669e:	e778      	b.n	d6592 <__udivmoddi4+0xbe>
   d66a0:	f1c6 0c20 	rsb	ip, r6, #32
   d66a4:	fa03 f406 	lsl.w	r4, r3, r6
   d66a8:	fa22 f30c 	lsr.w	r3, r2, ip
   d66ac:	431c      	orrs	r4, r3
   d66ae:	fa20 f70c 	lsr.w	r7, r0, ip
   d66b2:	fa01 f306 	lsl.w	r3, r1, r6
   d66b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d66ba:	fa21 f10c 	lsr.w	r1, r1, ip
   d66be:	431f      	orrs	r7, r3
   d66c0:	0c3b      	lsrs	r3, r7, #16
   d66c2:	fbb1 f9fe 	udiv	r9, r1, lr
   d66c6:	fa1f f884 	uxth.w	r8, r4
   d66ca:	fb0e 1119 	mls	r1, lr, r9, r1
   d66ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d66d2:	fb09 fa08 	mul.w	sl, r9, r8
   d66d6:	458a      	cmp	sl, r1
   d66d8:	fa02 f206 	lsl.w	r2, r2, r6
   d66dc:	fa00 f306 	lsl.w	r3, r0, r6
   d66e0:	d908      	bls.n	d66f4 <__udivmoddi4+0x220>
   d66e2:	1861      	adds	r1, r4, r1
   d66e4:	f109 30ff 	add.w	r0, r9, #4294967295
   d66e8:	d248      	bcs.n	d677c <__udivmoddi4+0x2a8>
   d66ea:	458a      	cmp	sl, r1
   d66ec:	d946      	bls.n	d677c <__udivmoddi4+0x2a8>
   d66ee:	f1a9 0902 	sub.w	r9, r9, #2
   d66f2:	4421      	add	r1, r4
   d66f4:	eba1 010a 	sub.w	r1, r1, sl
   d66f8:	b2bf      	uxth	r7, r7
   d66fa:	fbb1 f0fe 	udiv	r0, r1, lr
   d66fe:	fb0e 1110 	mls	r1, lr, r0, r1
   d6702:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d6706:	fb00 f808 	mul.w	r8, r0, r8
   d670a:	45b8      	cmp	r8, r7
   d670c:	d907      	bls.n	d671e <__udivmoddi4+0x24a>
   d670e:	19e7      	adds	r7, r4, r7
   d6710:	f100 31ff 	add.w	r1, r0, #4294967295
   d6714:	d22e      	bcs.n	d6774 <__udivmoddi4+0x2a0>
   d6716:	45b8      	cmp	r8, r7
   d6718:	d92c      	bls.n	d6774 <__udivmoddi4+0x2a0>
   d671a:	3802      	subs	r0, #2
   d671c:	4427      	add	r7, r4
   d671e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d6722:	eba7 0708 	sub.w	r7, r7, r8
   d6726:	fba0 8902 	umull	r8, r9, r0, r2
   d672a:	454f      	cmp	r7, r9
   d672c:	46c6      	mov	lr, r8
   d672e:	4649      	mov	r1, r9
   d6730:	d31a      	bcc.n	d6768 <__udivmoddi4+0x294>
   d6732:	d017      	beq.n	d6764 <__udivmoddi4+0x290>
   d6734:	b15d      	cbz	r5, d674e <__udivmoddi4+0x27a>
   d6736:	ebb3 020e 	subs.w	r2, r3, lr
   d673a:	eb67 0701 	sbc.w	r7, r7, r1
   d673e:	fa07 fc0c 	lsl.w	ip, r7, ip
   d6742:	40f2      	lsrs	r2, r6
   d6744:	ea4c 0202 	orr.w	r2, ip, r2
   d6748:	40f7      	lsrs	r7, r6
   d674a:	e9c5 2700 	strd	r2, r7, [r5]
   d674e:	2600      	movs	r6, #0
   d6750:	4631      	mov	r1, r6
   d6752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6756:	462e      	mov	r6, r5
   d6758:	4628      	mov	r0, r5
   d675a:	e70b      	b.n	d6574 <__udivmoddi4+0xa0>
   d675c:	4606      	mov	r6, r0
   d675e:	e6e9      	b.n	d6534 <__udivmoddi4+0x60>
   d6760:	4618      	mov	r0, r3
   d6762:	e6fd      	b.n	d6560 <__udivmoddi4+0x8c>
   d6764:	4543      	cmp	r3, r8
   d6766:	d2e5      	bcs.n	d6734 <__udivmoddi4+0x260>
   d6768:	ebb8 0e02 	subs.w	lr, r8, r2
   d676c:	eb69 0104 	sbc.w	r1, r9, r4
   d6770:	3801      	subs	r0, #1
   d6772:	e7df      	b.n	d6734 <__udivmoddi4+0x260>
   d6774:	4608      	mov	r0, r1
   d6776:	e7d2      	b.n	d671e <__udivmoddi4+0x24a>
   d6778:	4660      	mov	r0, ip
   d677a:	e78d      	b.n	d6698 <__udivmoddi4+0x1c4>
   d677c:	4681      	mov	r9, r0
   d677e:	e7b9      	b.n	d66f4 <__udivmoddi4+0x220>
   d6780:	4666      	mov	r6, ip
   d6782:	e775      	b.n	d6670 <__udivmoddi4+0x19c>
   d6784:	4630      	mov	r0, r6
   d6786:	e74a      	b.n	d661e <__udivmoddi4+0x14a>
   d6788:	f1ac 0c02 	sub.w	ip, ip, #2
   d678c:	4439      	add	r1, r7
   d678e:	e713      	b.n	d65b8 <__udivmoddi4+0xe4>
   d6790:	3802      	subs	r0, #2
   d6792:	443c      	add	r4, r7
   d6794:	e724      	b.n	d65e0 <__udivmoddi4+0x10c>
   d6796:	bf00      	nop

000d6798 <__aeabi_idiv0>:
   d6798:	4770      	bx	lr
   d679a:	bf00      	nop

000d679c <atexit>:
   d679c:	2300      	movs	r3, #0
   d679e:	4601      	mov	r1, r0
   d67a0:	461a      	mov	r2, r3
   d67a2:	4618      	mov	r0, r3
   d67a4:	f000 b860 	b.w	d6868 <__register_exitproc>

000d67a8 <memcpy>:
   d67a8:	440a      	add	r2, r1
   d67aa:	4291      	cmp	r1, r2
   d67ac:	f100 33ff 	add.w	r3, r0, #4294967295
   d67b0:	d100      	bne.n	d67b4 <memcpy+0xc>
   d67b2:	4770      	bx	lr
   d67b4:	b510      	push	{r4, lr}
   d67b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d67ba:	f803 4f01 	strb.w	r4, [r3, #1]!
   d67be:	4291      	cmp	r1, r2
   d67c0:	d1f9      	bne.n	d67b6 <memcpy+0xe>
   d67c2:	bd10      	pop	{r4, pc}

000d67c4 <memset>:
   d67c4:	4402      	add	r2, r0
   d67c6:	4603      	mov	r3, r0
   d67c8:	4293      	cmp	r3, r2
   d67ca:	d100      	bne.n	d67ce <memset+0xa>
   d67cc:	4770      	bx	lr
   d67ce:	f803 1b01 	strb.w	r1, [r3], #1
   d67d2:	e7f9      	b.n	d67c8 <memset+0x4>

000d67d4 <srand>:
   d67d4:	b538      	push	{r3, r4, r5, lr}
   d67d6:	4b0d      	ldr	r3, [pc, #52]	; (d680c <srand+0x38>)
   d67d8:	681d      	ldr	r5, [r3, #0]
   d67da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d67dc:	4604      	mov	r4, r0
   d67de:	b97b      	cbnz	r3, d6800 <srand+0x2c>
   d67e0:	2018      	movs	r0, #24
   d67e2:	f7fe f90f 	bl	d4a04 <malloc>
   d67e6:	4a0a      	ldr	r2, [pc, #40]	; (d6810 <srand+0x3c>)
   d67e8:	4b0a      	ldr	r3, [pc, #40]	; (d6814 <srand+0x40>)
   d67ea:	63a8      	str	r0, [r5, #56]	; 0x38
   d67ec:	e9c0 2300 	strd	r2, r3, [r0]
   d67f0:	4b09      	ldr	r3, [pc, #36]	; (d6818 <srand+0x44>)
   d67f2:	6083      	str	r3, [r0, #8]
   d67f4:	230b      	movs	r3, #11
   d67f6:	8183      	strh	r3, [r0, #12]
   d67f8:	2201      	movs	r2, #1
   d67fa:	2300      	movs	r3, #0
   d67fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6800:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6802:	2200      	movs	r2, #0
   d6804:	611c      	str	r4, [r3, #16]
   d6806:	615a      	str	r2, [r3, #20]
   d6808:	bd38      	pop	{r3, r4, r5, pc}
   d680a:	bf00      	nop
   d680c:	2003e520 	.word	0x2003e520
   d6810:	abcd330e 	.word	0xabcd330e
   d6814:	e66d1234 	.word	0xe66d1234
   d6818:	0005deec 	.word	0x0005deec

000d681c <strdup>:
   d681c:	4b02      	ldr	r3, [pc, #8]	; (d6828 <strdup+0xc>)
   d681e:	4601      	mov	r1, r0
   d6820:	6818      	ldr	r0, [r3, #0]
   d6822:	f000 b803 	b.w	d682c <_strdup_r>
   d6826:	bf00      	nop
   d6828:	2003e520 	.word	0x2003e520

000d682c <_strdup_r>:
   d682c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d682e:	4604      	mov	r4, r0
   d6830:	4608      	mov	r0, r1
   d6832:	460d      	mov	r5, r1
   d6834:	f000 f80f 	bl	d6856 <strlen>
   d6838:	1c42      	adds	r2, r0, #1
   d683a:	4611      	mov	r1, r2
   d683c:	4620      	mov	r0, r4
   d683e:	9201      	str	r2, [sp, #4]
   d6840:	f7fe f900 	bl	d4a44 <_malloc_r>
   d6844:	4604      	mov	r4, r0
   d6846:	b118      	cbz	r0, d6850 <_strdup_r+0x24>
   d6848:	9a01      	ldr	r2, [sp, #4]
   d684a:	4629      	mov	r1, r5
   d684c:	f7ff ffac 	bl	d67a8 <memcpy>
   d6850:	4620      	mov	r0, r4
   d6852:	b003      	add	sp, #12
   d6854:	bd30      	pop	{r4, r5, pc}

000d6856 <strlen>:
   d6856:	4603      	mov	r3, r0
   d6858:	f813 2b01 	ldrb.w	r2, [r3], #1
   d685c:	2a00      	cmp	r2, #0
   d685e:	d1fb      	bne.n	d6858 <strlen+0x2>
   d6860:	1a18      	subs	r0, r3, r0
   d6862:	3801      	subs	r0, #1
   d6864:	4770      	bx	lr
	...

000d6868 <__register_exitproc>:
   d6868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d686c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d6928 <__register_exitproc+0xc0>
   d6870:	4606      	mov	r6, r0
   d6872:	f8d8 0000 	ldr.w	r0, [r8]
   d6876:	461f      	mov	r7, r3
   d6878:	460d      	mov	r5, r1
   d687a:	4691      	mov	r9, r2
   d687c:	f000 f856 	bl	d692c <__retarget_lock_acquire_recursive>
   d6880:	4b25      	ldr	r3, [pc, #148]	; (d6918 <__register_exitproc+0xb0>)
   d6882:	681c      	ldr	r4, [r3, #0]
   d6884:	b934      	cbnz	r4, d6894 <__register_exitproc+0x2c>
   d6886:	4c25      	ldr	r4, [pc, #148]	; (d691c <__register_exitproc+0xb4>)
   d6888:	601c      	str	r4, [r3, #0]
   d688a:	4b25      	ldr	r3, [pc, #148]	; (d6920 <__register_exitproc+0xb8>)
   d688c:	b113      	cbz	r3, d6894 <__register_exitproc+0x2c>
   d688e:	681b      	ldr	r3, [r3, #0]
   d6890:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d6894:	6863      	ldr	r3, [r4, #4]
   d6896:	2b1f      	cmp	r3, #31
   d6898:	dd07      	ble.n	d68aa <__register_exitproc+0x42>
   d689a:	f8d8 0000 	ldr.w	r0, [r8]
   d689e:	f000 f847 	bl	d6930 <__retarget_lock_release_recursive>
   d68a2:	f04f 30ff 	mov.w	r0, #4294967295
   d68a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d68aa:	b34e      	cbz	r6, d6900 <__register_exitproc+0x98>
   d68ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d68b0:	b988      	cbnz	r0, d68d6 <__register_exitproc+0x6e>
   d68b2:	4b1c      	ldr	r3, [pc, #112]	; (d6924 <__register_exitproc+0xbc>)
   d68b4:	b923      	cbnz	r3, d68c0 <__register_exitproc+0x58>
   d68b6:	f8d8 0000 	ldr.w	r0, [r8]
   d68ba:	f000 f838 	bl	d692e <__retarget_lock_release>
   d68be:	e7f0      	b.n	d68a2 <__register_exitproc+0x3a>
   d68c0:	f44f 7084 	mov.w	r0, #264	; 0x108
   d68c4:	f7fe f89e 	bl	d4a04 <malloc>
   d68c8:	2800      	cmp	r0, #0
   d68ca:	d0f4      	beq.n	d68b6 <__register_exitproc+0x4e>
   d68cc:	2300      	movs	r3, #0
   d68ce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d68d2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d68d6:	6863      	ldr	r3, [r4, #4]
   d68d8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d68dc:	2201      	movs	r2, #1
   d68de:	409a      	lsls	r2, r3
   d68e0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d68e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d68e8:	4313      	orrs	r3, r2
   d68ea:	2e02      	cmp	r6, #2
   d68ec:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d68f0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d68f4:	bf02      	ittt	eq
   d68f6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d68fa:	431a      	orreq	r2, r3
   d68fc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d6900:	6863      	ldr	r3, [r4, #4]
   d6902:	f8d8 0000 	ldr.w	r0, [r8]
   d6906:	1c5a      	adds	r2, r3, #1
   d6908:	3302      	adds	r3, #2
   d690a:	6062      	str	r2, [r4, #4]
   d690c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d6910:	f000 f80e 	bl	d6930 <__retarget_lock_release_recursive>
   d6914:	2000      	movs	r0, #0
   d6916:	e7c6      	b.n	d68a6 <__register_exitproc+0x3e>
   d6918:	2003e7e0 	.word	0x2003e7e0
   d691c:	2003e754 	.word	0x2003e754
   d6920:	00000000 	.word	0x00000000
   d6924:	000d4a05 	.word	0x000d4a05
   d6928:	2003e584 	.word	0x2003e584

000d692c <__retarget_lock_acquire_recursive>:
   d692c:	4770      	bx	lr

000d692e <__retarget_lock_release>:
   d692e:	4770      	bx	lr

000d6930 <__retarget_lock_release_recursive>:
   d6930:	4770      	bx	lr

000d6932 <link_code_end>:
	...

000d6934 <dynalib_user>:
   d6934:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6944:	0000 0000 4844 3154 2031 6542 6967 216e     ....DHT11 Begin!
   d6954:	2121 4600 6961 656c 2064 6f74 7220 6165     !!.Failed to rea
   d6964:	2064 7266 6d6f 4420 5448 3131 7320 6e65     d from DHT11 sen
   d6974:	6f73 2172 4800 6d75 4520 7272 726f 5400     sor!.Hum Error.T
   d6984:	6d65 2070 7245 6f72 0072 7548 696d 6964     emp Error.Humidi
   d6994:	7974 003a 6554 706d 003a 0000               ty:.Temp:...

000d69a0 <_ZTVN5spark13EthernetClassE>:
	...
   d69a8:	4ac3 000d 4ab9 000d 4aaf 000d 4aa5 000d     .J...J...J...J..
   d69b8:	4a99 000d 4a8d 000d 5935 000d 593d 000d     .J...J..5Y..=Y..
   d69c8:	4a81 000d 4a79 000d 4a6f 000d 4a65 000d     .J..yJ..oJ..eJ..
   d69d8:	596d 000d 7061 0070 5925 252d 2d6d 6425     mY..app.%Y-%m-%d
   d69e8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d69f8:	6d69 0065                                   ime.

000d69fc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6a04:	4fbd 000d 4fc3 000d 5001 000d 4fd1 000d     .O...O...P...O..
   d6a14:	4fbf 000d                                   .O..

000d6a18 <_ZTV9IPAddress>:
	...
   d6a20:	5505 000d 54f5 000d 54f7 000d               .U...T...T..

000d6a2c <_ZTV9USBSerial>:
	...
   d6a34:	55dd 000d 5645 000d 561b 000d 4d59 000d     .U..EV...V..YM..
   d6a44:	560d 000d 55df 000d 55ef 000d 563f 000d     .V...U...U..?V..
   d6a54:	55ff 000d 55d7 000d                         .U...U..

000d6a5c <_ZTV11USARTSerial>:
	...
   d6a64:	56e1 000d 574f 000d 5727 000d 4d59 000d     .V..OW..'W..YM..
   d6a74:	56f7 000d 5713 000d 5705 000d 5721 000d     .V...W...W..!W..
   d6a84:	56e3 000d 56e9 000d                         .V...V..

000d6a8c <_ZTV7TwoWire>:
	...
   d6a94:	57fd 000d 5847 000d 581f 000d 57ff 000d     .W..GX...X...W..
   d6aa4:	5827 000d 582f 000d 5837 000d 583f 000d     'X../X..7X..?X..

000d6ab4 <_ZTVN5spark9WiFiClassE>:
	...
   d6abc:	58d7 000d 58cd 000d 58c3 000d 5879 000d     .X...X...X..yX..
   d6acc:	58b7 000d 58ab 000d 5935 000d 593d 000d     .X...X..5Y..=Y..
   d6adc:	589f 000d 5897 000d 588d 000d 5883 000d     .X...X...X...X..
   d6aec:	596d 000d                                   mY..

000d6af0 <_ZTVN5spark12NetworkClassE>:
	...
   d6af8:	58f5 000d 58ff 000d 5909 000d 5913 000d     .X...X...Y...Y..
   d6b08:	591d 000d 5929 000d 5935 000d 593d 000d     .Y..)Y..5Y..=Y..
   d6b18:	5945 000d 5951 000d 5959 000d 5963 000d     EY..QY..YY..cY..
   d6b28:	596d 000d                                   mY..

000d6b2c <_ZSt7nothrow>:
	...

000d6b2d <link_const_variable_data_end>:
   d6b2d:	00          	.byte	0x00
	...

000d6b30 <link_constructors_location>:
   d6b30:	000d421d 	.word	0x000d421d
   d6b34:	000d4acd 	.word	0x000d4acd
   d6b38:	000d4af5 	.word	0x000d4af5
   d6b3c:	000d4d49 	.word	0x000d4d49
   d6b40:	000d4e19 	.word	0x000d4e19
   d6b44:	000d4e29 	.word	0x000d4e29
   d6b48:	000d4e79 	.word	0x000d4e79
   d6b4c:	000d58e1 	.word	0x000d58e1
   d6b50:	000d5a41 	.word	0x000d5a41

000d6b54 <link_constructors_end>:
	...
