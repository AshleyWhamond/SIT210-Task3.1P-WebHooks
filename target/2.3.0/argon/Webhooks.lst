
c:/Users/ashkl/Desktop/Deakin_22/SIT_210/Week_3/Task3.1P/Webhooks/target/2.3.0/argon/Webhooks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002de4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d6e00  000d6e00  00006e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d6e08  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e518  000d6e0c  0001e518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000268  2003e588  2003e588  0002e588  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d6e7c  000d6e7c  00026e7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d6ea4  000d6ea4  00026ea4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014ce3e  00000000  00000000  00026ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001688a  00000000  00000000  00173ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002a624  00000000  00000000  0018a570  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000027e0  00000000  00000000  001b4b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007640  00000000  00000000  001b7374  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00039f8e  00000000  00000000  001be9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00037ed3  00000000  00000000  001f8942  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010c17d  00000000  00000000  00230815  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00006dcc  00000000  00000000  0033c994  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fd09 	bl	d6a44 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fd11 	bl	d6a60 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e518 	.word	0x2003e518
   d4048:	000d6e0c 	.word	0x000d6e0c
   d404c:	2003e588 	.word	0x2003e588
   d4050:	2003e588 	.word	0x2003e588
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 f88b 	bl	d5178 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6ddc 	.word	0x000d6ddc
   d407c:	000d6e00 	.word	0x000d6e00

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b816 	b.w	d40b0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f83f 	bl	d4108 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 b82b 	b.w	d50e8 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bceb 	b.w	d4a6c <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bce9 	b.w	d4a6c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bcef 	b.w	d4a7c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <setup>:

int dhtPin = D2;
DHT dht(dhtPin);

void setup()
{
   d40b0:	b508      	push	{r3, lr}
  pinMode(dhtPin, INPUT);
   d40b2:	4b07      	ldr	r3, [pc, #28]	; (d40d0 <setup+0x20>)
   d40b4:	2100      	movs	r1, #0
   d40b6:	8818      	ldrh	r0, [r3, #0]
   d40b8:	f001 fe1a 	bl	d5cf0 <pinMode>

  Serial.println("DHT11 Begin!!!");
   d40bc:	f001 fbf6 	bl	d58ac <_Z16_fetch_usbserialv>
   d40c0:	4904      	ldr	r1, [pc, #16]	; (d40d4 <setup+0x24>)
   d40c2:	f000 feb8 	bl	d4e36 <_ZN5Print7printlnEPKc>

  dht.begin();
}
   d40c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  dht.begin();
   d40ca:	4803      	ldr	r0, [pc, #12]	; (d40d8 <setup+0x28>)
   d40cc:	f000 b914 	b.w	d42f8 <_ZN3DHT5beginEv>
   d40d0:	2003e518 	.word	0x2003e518
   d40d4:	000d6be4 	.word	0x000d6be4
   d40d8:	2003e58c 	.word	0x2003e58c

000d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40dc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d40de:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d40e0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d40e2:	b17c      	cbz	r4, d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d40e4:	6863      	ldr	r3, [r4, #4]
   d40e6:	3b01      	subs	r3, #1
   d40e8:	6063      	str	r3, [r4, #4]
   d40ea:	b95b      	cbnz	r3, d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d40ec:	6823      	ldr	r3, [r4, #0]
   d40ee:	4620      	mov	r0, r4
   d40f0:	689b      	ldr	r3, [r3, #8]
   d40f2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40f4:	68a3      	ldr	r3, [r4, #8]
   d40f6:	3b01      	subs	r3, #1
   d40f8:	60a3      	str	r3, [r4, #8]
   d40fa:	b91b      	cbnz	r3, d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d40fc:	6823      	ldr	r3, [r4, #0]
   d40fe:	4620      	mov	r0, r4
   d4100:	68db      	ldr	r3, [r3, #12]
   d4102:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4104:	4628      	mov	r0, r5
   d4106:	bd38      	pop	{r3, r4, r5, pc}

000d4108 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
   d4108:	b510      	push	{r4, lr}
   d410a:	ed2d 8b04 	vpush	{d8-d9}
  delay(5000);
   d410e:	f241 3088 	movw	r0, #5000	; 0x1388
{
   d4112:	b088      	sub	sp, #32
  delay(5000);
   d4114:	f000 ffa2 	bl	d505c <delay>

  // Read Humidity
  float h = dht.getHumidity();
   d4118:	484a      	ldr	r0, [pc, #296]	; (d4244 <loop+0x13c>)
   d411a:	4c4b      	ldr	r4, [pc, #300]	; (d4248 <loop+0x140>)
   d411c:	f000 fae0 	bl	d46e0 <_ZN3DHT11getHumidityEv>
  // Read temperature as Celsius
  float t = dht.getTempCelcius();
   d4120:	4848      	ldr	r0, [pc, #288]	; (d4244 <loop+0x13c>)
  float h = dht.getHumidity();
   d4122:	eef0 8a40 	vmov.f32	s17, s0
  float t = dht.getTempCelcius();
   d4126:	f000 fab7 	bl	d4698 <_ZN3DHT14getTempCelciusEv>
  // Read temperature as Farenheit
  float f = dht.getTempFarenheit();
   d412a:	4846      	ldr	r0, [pc, #280]	; (d4244 <loop+0x13c>)
  float t = dht.getTempCelcius();
   d412c:	eeb0 8a40 	vmov.f32	s16, s0
  float f = dht.getTempFarenheit();
   d4130:	f000 fab4 	bl	d469c <_ZN3DHT16getTempFarenheitEv>

  // Check if any reads failed
  if (isnan(h) || isnan(t) || isnan(f))
   d4134:	eef4 8a68 	vcmp.f32	s17, s17
   d4138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float f = dht.getTempFarenheit();
   d413c:	eeb0 9a40 	vmov.f32	s18, s0
  if (isnan(h) || isnan(t) || isnan(f))
   d4140:	d609      	bvs.n	d4156 <loop+0x4e>
   d4142:	eeb4 8a48 	vcmp.f32	s16, s16
   d4146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d414a:	d604      	bvs.n	d4156 <loop+0x4e>
   d414c:	eeb4 0a40 	vcmp.f32	s0, s0
   d4150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4154:	d714      	bvc.n	d4180 <loop+0x78>
  {
    Serial.println("Failed to read from DHT11 sensor!");
   d4156:	f001 fba9 	bl	d58ac <_Z16_fetch_usbserialv>
   d415a:	493c      	ldr	r1, [pc, #240]	; (d424c <loop+0x144>)
   d415c:	f000 fe6b 	bl	d4e36 <_ZN5Print7printlnEPKc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4160:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4162:	f88d 3000 	strb.w	r3, [sp]
   d4166:	a804      	add	r0, sp, #16
   d4168:	4938      	ldr	r1, [pc, #224]	; (d424c <loop+0x144>)
   d416a:	233c      	movs	r3, #60	; 0x3c
   d416c:	2200      	movs	r2, #0
   d416e:	f001 f95b 	bl	d5428 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4172:	a805      	add	r0, sp, #20
   d4174:	f7ff ffb2 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Serial.println();
  Serial.println();

  Particle.publish("Humidity:", String(h));
  Particle.publish("Temp:", String(t));
   d4178:	b008      	add	sp, #32
   d417a:	ecbd 8b04 	vpop	{d8-d9}
   d417e:	bd10      	pop	{r4, pc}
  Serial.print("Humid: ");
   d4180:	f001 fb94 	bl	d58ac <_Z16_fetch_usbserialv>
   d4184:	4932      	ldr	r1, [pc, #200]	; (d4250 <loop+0x148>)
   d4186:	f000 fe43 	bl	d4e10 <_ZN5Print5printEPKc>
  Serial.print(h);
   d418a:	f001 fb8f 	bl	d58ac <_Z16_fetch_usbserialv>
   d418e:	eeb0 0a68 	vmov.f32	s0, s17
   d4192:	2102      	movs	r1, #2
   d4194:	f000 ff40 	bl	d5018 <_ZN5Print5printEfi>
  Serial.println("%  ");
   d4198:	f001 fb88 	bl	d58ac <_Z16_fetch_usbserialv>
   d419c:	492d      	ldr	r1, [pc, #180]	; (d4254 <loop+0x14c>)
   d419e:	f000 fe4a 	bl	d4e36 <_ZN5Print7printlnEPKc>
  Serial.print("Temp: ");
   d41a2:	f001 fb83 	bl	d58ac <_Z16_fetch_usbserialv>
   d41a6:	492c      	ldr	r1, [pc, #176]	; (d4258 <loop+0x150>)
   d41a8:	f000 fe32 	bl	d4e10 <_ZN5Print5printEPKc>
  Serial.print(t);
   d41ac:	f001 fb7e 	bl	d58ac <_Z16_fetch_usbserialv>
   d41b0:	eeb0 0a48 	vmov.f32	s0, s16
   d41b4:	2102      	movs	r1, #2
   d41b6:	f000 ff2f 	bl	d5018 <_ZN5Print5printEfi>
  Serial.println("*C ");
   d41ba:	f001 fb77 	bl	d58ac <_Z16_fetch_usbserialv>
   d41be:	4927      	ldr	r1, [pc, #156]	; (d425c <loop+0x154>)
   d41c0:	f000 fe39 	bl	d4e36 <_ZN5Print7printlnEPKc>
  Serial.print("Temp: ");
   d41c4:	f001 fb72 	bl	d58ac <_Z16_fetch_usbserialv>
   d41c8:	4923      	ldr	r1, [pc, #140]	; (d4258 <loop+0x150>)
   d41ca:	f000 fe21 	bl	d4e10 <_ZN5Print5printEPKc>
  Serial.print(f);
   d41ce:	f001 fb6d 	bl	d58ac <_Z16_fetch_usbserialv>
   d41d2:	eeb0 0a49 	vmov.f32	s0, s18
   d41d6:	2102      	movs	r1, #2
   d41d8:	f000 ff1e 	bl	d5018 <_ZN5Print5printEfi>
  Serial.println();
   d41dc:	f001 fb66 	bl	d58ac <_Z16_fetch_usbserialv>
   d41e0:	f000 fe1d 	bl	d4e1e <_ZN5Print7printlnEv>
  Serial.println();
   d41e4:	f001 fb62 	bl	d58ac <_Z16_fetch_usbserialv>
   d41e8:	f000 fe19 	bl	d4e1e <_ZN5Print7printlnEv>
  Particle.publish("Humidity:", String(h));
   d41ec:	eeb0 0a68 	vmov.f32	s0, s17
   d41f0:	2106      	movs	r1, #6
   d41f2:	a804      	add	r0, sp, #16
   d41f4:	f000 fdbb 	bl	d4d6e <_ZN6StringC1Efi>
   d41f8:	7823      	ldrb	r3, [r4, #0]
   d41fa:	9a04      	ldr	r2, [sp, #16]
   d41fc:	4918      	ldr	r1, [pc, #96]	; (d4260 <loop+0x158>)
   d41fe:	f88d 3000 	strb.w	r3, [sp]
   d4202:	a802      	add	r0, sp, #8
   d4204:	233c      	movs	r3, #60	; 0x3c
   d4206:	f001 f90f 	bl	d5428 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d420a:	a803      	add	r0, sp, #12
   d420c:	f7ff ff66 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4210:	a804      	add	r0, sp, #16
   d4212:	f000 fd4f 	bl	d4cb4 <_ZN6StringD1Ev>
  Particle.publish("Temp:", String(t));
   d4216:	eeb0 0a48 	vmov.f32	s0, s16
   d421a:	2106      	movs	r1, #6
   d421c:	a804      	add	r0, sp, #16
   d421e:	f000 fda6 	bl	d4d6e <_ZN6StringC1Efi>
   d4222:	7823      	ldrb	r3, [r4, #0]
   d4224:	9a04      	ldr	r2, [sp, #16]
   d4226:	490f      	ldr	r1, [pc, #60]	; (d4264 <loop+0x15c>)
   d4228:	f88d 3000 	strb.w	r3, [sp]
   d422c:	a802      	add	r0, sp, #8
   d422e:	233c      	movs	r3, #60	; 0x3c
   d4230:	f001 f8fa 	bl	d5428 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4234:	a803      	add	r0, sp, #12
   d4236:	f7ff ff51 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d423a:	a804      	add	r0, sp, #16
   d423c:	f000 fd3a 	bl	d4cb4 <_ZN6StringD1Ev>
   d4240:	e79a      	b.n	d4178 <loop+0x70>
   d4242:	bf00      	nop
   d4244:	2003e58c 	.word	0x2003e58c
   d4248:	2003e588 	.word	0x2003e588
   d424c:	000d6bf3 	.word	0x000d6bf3
   d4250:	000d6c15 	.word	0x000d6c15
   d4254:	000d6c1d 	.word	0x000d6c1d
   d4258:	000d6c21 	.word	0x000d6c21
   d425c:	000d6c28 	.word	0x000d6c28
   d4260:	000d6c2c 	.word	0x000d6c2c
   d4264:	000d6c36 	.word	0x000d6c36

000d4268 <_GLOBAL__sub_I_dhtPin>:
        val_(val) {
   d4268:	4b04      	ldr	r3, [pc, #16]	; (d427c <_GLOBAL__sub_I_dhtPin+0x14>)
DHT dht(dhtPin);
   d426a:	4805      	ldr	r0, [pc, #20]	; (d4280 <_GLOBAL__sub_I_dhtPin+0x18>)
   d426c:	2200      	movs	r2, #0
   d426e:	701a      	strb	r2, [r3, #0]
   d4270:	4b04      	ldr	r3, [pc, #16]	; (d4284 <_GLOBAL__sub_I_dhtPin+0x1c>)
   d4272:	2206      	movs	r2, #6
   d4274:	7819      	ldrb	r1, [r3, #0]
   d4276:	f000 b83a 	b.w	d42ee <_ZN3DHTC1Ehh>
   d427a:	bf00      	nop
   d427c:	2003e588 	.word	0x2003e588
   d4280:	2003e58c 	.word	0x2003e58c
   d4284:	2003e518 	.word	0x2003e518

000d4288 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4288:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d428a:	6803      	ldr	r3, [r0, #0]
   d428c:	2b2f      	cmp	r3, #47	; 0x2f
{
   d428e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4290:	d904      	bls.n	d429c <nrf_gpio_pin_port_decode+0x14>
   d4292:	4a07      	ldr	r2, [pc, #28]	; (d42b0 <nrf_gpio_pin_port_decode+0x28>)
   d4294:	2100      	movs	r1, #0
   d4296:	200a      	movs	r0, #10
   d4298:	f000 fb34 	bl	d4904 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d429c:	6823      	ldr	r3, [r4, #0]
   d429e:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d42a0:	bf83      	ittte	hi
   d42a2:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d42a6:	4803      	ldrhi	r0, [pc, #12]	; (d42b4 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d42a8:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d42aa:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d42ae:	bd10      	pop	{r4, pc}
   d42b0:	000d4755 	.word	0x000d4755
   d42b4:	50000300 	.word	0x50000300

000d42b8 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d42b8:	b507      	push	{r0, r1, r2, lr}
   d42ba:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d42bc:	a801      	add	r0, sp, #4
   d42be:	f7ff ffe3 	bl	d4288 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d42c2:	9a01      	ldr	r2, [sp, #4]
   d42c4:	2301      	movs	r3, #1
   d42c6:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d42c8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d42cc:	b003      	add	sp, #12
   d42ce:	f85d fb04 	ldr.w	pc, [sp], #4

000d42d2 <nrf_gpio_pin_read>:
{
   d42d2:	b507      	push	{r0, r1, r2, lr}
   d42d4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d42d6:	a801      	add	r0, sp, #4
   d42d8:	f7ff ffd6 	bl	d4288 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d42dc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d42de:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d42e2:	40d8      	lsrs	r0, r3
}
   d42e4:	f000 0001 	and.w	r0, r0, #1
   d42e8:	b003      	add	sp, #12
   d42ea:	f85d fb04 	ldr.w	pc, [sp], #4

000d42ee <_ZN3DHTC1Ehh>:
#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
	_count = count;
   d42ee:	7202      	strb	r2, [r0, #8]
	firstreading = true;
   d42f0:	2201      	movs	r2, #1
	_pin = pin;
   d42f2:	7181      	strb	r1, [r0, #6]
	firstreading = true;
   d42f4:	7402      	strb	r2, [r0, #16]
}
   d42f6:	4770      	bx	lr

000d42f8 <_ZN3DHT5beginEv>:

void DHT::begin(void)
{
   d42f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d42fc:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42fe:	4c1e      	ldr	r4, [pc, #120]	; (d4378 <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d4300:	7980      	ldrb	r0, [r0, #6]
   d4302:	f8df 8078 	ldr.w	r8, [pc, #120]	; d437c <_ZN3DHT5beginEv+0x84>
   d4306:	2100      	movs	r1, #0
   d4308:	f001 fcf2 	bl	d5cf0 <pinMode>
	pinSetFast(_pin);
   d430c:	79ae      	ldrb	r6, [r5, #6]
   d430e:	7823      	ldrb	r3, [r4, #0]
   d4310:	f3bf 8f5b 	dmb	ish
   d4314:	f013 0f01 	tst.w	r3, #1
   d4318:	d10a      	bne.n	d4330 <_ZN3DHT5beginEv+0x38>
   d431a:	4620      	mov	r0, r4
   d431c:	f7ff febf 	bl	d409e <__cxa_guard_acquire>
   d4320:	b130      	cbz	r0, d4330 <_ZN3DHT5beginEv+0x38>
   d4322:	f000 f9ef 	bl	d4704 <HAL_Pin_Map>
   d4326:	f8c8 0000 	str.w	r0, [r8]
   d432a:	4620      	mov	r0, r4
   d432c:	f7ff febc 	bl	d40a8 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4330:	f8d8 3000 	ldr.w	r3, [r8]
   d4334:	0136      	lsls	r6, r6, #4
   d4336:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4338:	7823      	ldrb	r3, [r4, #0]
   d433a:	f3bf 8f5b 	dmb	ish
   d433e:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4340:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4344:	d40a      	bmi.n	d435c <_ZN3DHT5beginEv+0x64>
   d4346:	480c      	ldr	r0, [pc, #48]	; (d4378 <_ZN3DHT5beginEv+0x80>)
   d4348:	f7ff fea9 	bl	d409e <__cxa_guard_acquire>
   d434c:	b130      	cbz	r0, d435c <_ZN3DHT5beginEv+0x64>
   d434e:	f000 f9d9 	bl	d4704 <HAL_Pin_Map>
   d4352:	f8c8 0000 	str.w	r0, [r8]
   d4356:	4808      	ldr	r0, [pc, #32]	; (d4378 <_ZN3DHT5beginEv+0x80>)
   d4358:	f7ff fea6 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d435c:	f8d8 3000 	ldr.w	r3, [r8]
   d4360:	4433      	add	r3, r6
   d4362:	785b      	ldrb	r3, [r3, #1]
   d4364:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d4368:	ea43 0007 	orr.w	r0, r3, r7
   d436c:	f7ff ffa4 	bl	d42b8 <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d4370:	2300      	movs	r3, #0
   d4372:	60eb      	str	r3, [r5, #12]
}
   d4374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4378:	2003e5a0 	.word	0x2003e5a0
   d437c:	2003e5a4 	.word	0x2003e5a4

000d4380 <_ZN3DHT4readEv>:
	return NAN;
}


boolean DHT::read(void)
{
   d4380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4384:	4604      	mov	r4, r0
   d4386:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4388:	f000 f9ec 	bl	d4764 <HAL_Timer_Get_Milli_Seconds>
	u32 currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   d438c:	68e3      	ldr	r3, [r4, #12]
   d438e:	4283      	cmp	r3, r0
	{
// ie there was a rollover
		_lastreadtime = 0;
   d4390:	bf84      	itt	hi
   d4392:	2300      	movhi	r3, #0
   d4394:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4396:	7c23      	ldrb	r3, [r4, #16]
   d4398:	b92b      	cbnz	r3, d43a6 <_ZN3DHT4readEv+0x26>
   d439a:	68e3      	ldr	r3, [r4, #12]
   d439c:	1ac0      	subs	r0, r0, r3
   d439e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d43a2:	f0c0 8160 	bcc.w	d4666 <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d43a6:	2500      	movs	r5, #0
   d43a8:	7425      	strb	r5, [r4, #16]
   d43aa:	f000 f9db 	bl	d4764 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43ae:	4eb0      	ldr	r6, [pc, #704]	; (d4670 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d43b0:	6025      	str	r5, [r4, #0]
   d43b2:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d43b4:	60e0      	str	r0, [r4, #12]

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d43b6:	79a7      	ldrb	r7, [r4, #6]
   d43b8:	7833      	ldrb	r3, [r6, #0]
   d43ba:	4dae      	ldr	r5, [pc, #696]	; (d4674 <_ZN3DHT4readEv+0x2f4>)
   d43bc:	f3bf 8f5b 	dmb	ish
   d43c0:	f013 0f01 	tst.w	r3, #1
   d43c4:	d109      	bne.n	d43da <_ZN3DHT4readEv+0x5a>
   d43c6:	4630      	mov	r0, r6
   d43c8:	f7ff fe69 	bl	d409e <__cxa_guard_acquire>
   d43cc:	b128      	cbz	r0, d43da <_ZN3DHT4readEv+0x5a>
   d43ce:	f000 f999 	bl	d4704 <HAL_Pin_Map>
   d43d2:	6028      	str	r0, [r5, #0]
   d43d4:	4630      	mov	r0, r6
   d43d6:	f7ff fe67 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43da:	682b      	ldr	r3, [r5, #0]
   d43dc:	013f      	lsls	r7, r7, #4
   d43de:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43e2:	7833      	ldrb	r3, [r6, #0]
   d43e4:	f3bf 8f5b 	dmb	ish
   d43e8:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43ea:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43ee:	d409      	bmi.n	d4404 <_ZN3DHT4readEv+0x84>
   d43f0:	489f      	ldr	r0, [pc, #636]	; (d4670 <_ZN3DHT4readEv+0x2f0>)
   d43f2:	f7ff fe54 	bl	d409e <__cxa_guard_acquire>
   d43f6:	b128      	cbz	r0, d4404 <_ZN3DHT4readEv+0x84>
   d43f8:	f000 f984 	bl	d4704 <HAL_Pin_Map>
   d43fc:	6028      	str	r0, [r5, #0]
   d43fe:	489c      	ldr	r0, [pc, #624]	; (d4670 <_ZN3DHT4readEv+0x2f0>)
   d4400:	f7ff fe52 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4404:	682b      	ldr	r3, [r5, #0]
   d4406:	441f      	add	r7, r3
   d4408:	7878      	ldrb	r0, [r7, #1]
   d440a:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d440e:	ea40 0008 	orr.w	r0, r0, r8
   d4412:	f7ff ff51 	bl	d42b8 <nrf_gpio_pin_set>
	delay(250);
   d4416:	20fa      	movs	r0, #250	; 0xfa
   d4418:	f000 fe20 	bl	d505c <delay>

// send begin signal
	pinMode(_pin, OUTPUT);
   d441c:	79a0      	ldrb	r0, [r4, #6]
   d441e:	2101      	movs	r1, #1
   d4420:	f001 fc66 	bl	d5cf0 <pinMode>
	pinResetFast(_pin);
   d4424:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4426:	7833      	ldrb	r3, [r6, #0]
   d4428:	f3bf 8f5b 	dmb	ish
   d442c:	07da      	lsls	r2, r3, #31
   d442e:	d409      	bmi.n	d4444 <_ZN3DHT4readEv+0xc4>
   d4430:	488f      	ldr	r0, [pc, #572]	; (d4670 <_ZN3DHT4readEv+0x2f0>)
   d4432:	f7ff fe34 	bl	d409e <__cxa_guard_acquire>
   d4436:	b128      	cbz	r0, d4444 <_ZN3DHT4readEv+0xc4>
   d4438:	f000 f964 	bl	d4704 <HAL_Pin_Map>
   d443c:	6028      	str	r0, [r5, #0]
   d443e:	488c      	ldr	r0, [pc, #560]	; (d4670 <_ZN3DHT4readEv+0x2f0>)
   d4440:	f7ff fe32 	bl	d40a8 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4444:	682b      	ldr	r3, [r5, #0]
   d4446:	013f      	lsls	r7, r7, #4
   d4448:	5ddb      	ldrb	r3, [r3, r7]
   d444a:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d444e:	7833      	ldrb	r3, [r6, #0]
   d4450:	f3bf 8f5b 	dmb	ish
   d4454:	07db      	lsls	r3, r3, #31
   d4456:	d409      	bmi.n	d446c <_ZN3DHT4readEv+0xec>
   d4458:	4885      	ldr	r0, [pc, #532]	; (d4670 <_ZN3DHT4readEv+0x2f0>)
   d445a:	f7ff fe20 	bl	d409e <__cxa_guard_acquire>
   d445e:	b128      	cbz	r0, d446c <_ZN3DHT4readEv+0xec>
   d4460:	f000 f950 	bl	d4704 <HAL_Pin_Map>
   d4464:	6028      	str	r0, [r5, #0]
   d4466:	4882      	ldr	r0, [pc, #520]	; (d4670 <_ZN3DHT4readEv+0x2f0>)
   d4468:	f7ff fe1e 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d446c:	682b      	ldr	r3, [r5, #0]
   d446e:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4470:	a803      	add	r0, sp, #12
   d4472:	787b      	ldrb	r3, [r7, #1]
   d4474:	f003 031f 	and.w	r3, r3, #31
   d4478:	ea43 0308 	orr.w	r3, r3, r8
   d447c:	9303      	str	r3, [sp, #12]
   d447e:	f7ff ff03 	bl	d4288 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4482:	9a03      	ldr	r2, [sp, #12]
   d4484:	2301      	movs	r3, #1
   d4486:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4488:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d448c:	2014      	movs	r0, #20
   d448e:	f000 fde5 	bl	d505c <delay>
	noInterrupts();
   d4492:	f001 fa31 	bl	d58f8 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d4496:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4498:	7833      	ldrb	r3, [r6, #0]
   d449a:	f3bf 8f5b 	dmb	ish
   d449e:	07d8      	lsls	r0, r3, #31
   d44a0:	d409      	bmi.n	d44b6 <_ZN3DHT4readEv+0x136>
   d44a2:	4873      	ldr	r0, [pc, #460]	; (d4670 <_ZN3DHT4readEv+0x2f0>)
   d44a4:	f7ff fdfb 	bl	d409e <__cxa_guard_acquire>
   d44a8:	b128      	cbz	r0, d44b6 <_ZN3DHT4readEv+0x136>
   d44aa:	f000 f92b 	bl	d4704 <HAL_Pin_Map>
   d44ae:	6028      	str	r0, [r5, #0]
   d44b0:	486f      	ldr	r0, [pc, #444]	; (d4670 <_ZN3DHT4readEv+0x2f0>)
   d44b2:	f7ff fdf9 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44b6:	682b      	ldr	r3, [r5, #0]
   d44b8:	013f      	lsls	r7, r7, #4
   d44ba:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44be:	7833      	ldrb	r3, [r6, #0]
   d44c0:	f3bf 8f5b 	dmb	ish
   d44c4:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44c6:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44ca:	d409      	bmi.n	d44e0 <_ZN3DHT4readEv+0x160>
   d44cc:	4868      	ldr	r0, [pc, #416]	; (d4670 <_ZN3DHT4readEv+0x2f0>)
   d44ce:	f7ff fde6 	bl	d409e <__cxa_guard_acquire>
   d44d2:	b128      	cbz	r0, d44e0 <_ZN3DHT4readEv+0x160>
   d44d4:	f000 f916 	bl	d4704 <HAL_Pin_Map>
   d44d8:	6028      	str	r0, [r5, #0]
   d44da:	4865      	ldr	r0, [pc, #404]	; (d4670 <_ZN3DHT4readEv+0x2f0>)
   d44dc:	f7ff fde4 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44e0:	682b      	ldr	r3, [r5, #0]
   d44e2:	441f      	add	r7, r3
   d44e4:	7878      	ldrb	r0, [r7, #1]
   d44e6:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d44ea:	ea40 0008 	orr.w	r0, r0, r8
   d44ee:	f7ff fee3 	bl	d42b8 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d44f2:	2028      	movs	r0, #40	; 0x28
   d44f4:	f000 f92e 	bl	d4754 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d44f8:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44fa:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4670 <_ZN3DHT4readEv+0x2f0>
   d44fe:	2100      	movs	r1, #0
   d4500:	f001 fbf6 	bl	d5cf0 <pinMode>

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
   d4504:	2700      	movs	r7, #0
	u8 laststate = HIGH;
   d4506:	2301      	movs	r3, #1
	u8 j = 0, i;
   d4508:	46ba      	mov	sl, r7
	u8 laststate = HIGH;
   d450a:	9300      	str	r3, [sp, #0]
		counter = 0;
   d450c:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d4510:	f894 b006 	ldrb.w	fp, [r4, #6]
   d4514:	7833      	ldrb	r3, [r6, #0]
   d4516:	f3bf 8f5b 	dmb	ish
   d451a:	07da      	lsls	r2, r3, #31
   d451c:	d409      	bmi.n	d4532 <_ZN3DHT4readEv+0x1b2>
   d451e:	4640      	mov	r0, r8
   d4520:	f7ff fdbd 	bl	d409e <__cxa_guard_acquire>
   d4524:	b128      	cbz	r0, d4532 <_ZN3DHT4readEv+0x1b2>
   d4526:	f000 f8ed 	bl	d4704 <HAL_Pin_Map>
   d452a:	6028      	str	r0, [r5, #0]
   d452c:	4640      	mov	r0, r8
   d452e:	f7ff fdbb 	bl	d40a8 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4532:	682b      	ldr	r3, [r5, #0]
   d4534:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4538:	f813 300b 	ldrb.w	r3, [r3, fp]
   d453c:	015b      	lsls	r3, r3, #5
   d453e:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4540:	7833      	ldrb	r3, [r6, #0]
   d4542:	f3bf 8f5b 	dmb	ish
   d4546:	07db      	lsls	r3, r3, #31
   d4548:	d409      	bmi.n	d455e <_ZN3DHT4readEv+0x1de>
   d454a:	4640      	mov	r0, r8
   d454c:	f7ff fda7 	bl	d409e <__cxa_guard_acquire>
   d4550:	b128      	cbz	r0, d455e <_ZN3DHT4readEv+0x1de>
   d4552:	f000 f8d7 	bl	d4704 <HAL_Pin_Map>
   d4556:	6028      	str	r0, [r5, #0]
   d4558:	4640      	mov	r0, r8
   d455a:	f7ff fda5 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d455e:	682b      	ldr	r3, [r5, #0]
   d4560:	445b      	add	r3, fp
   d4562:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4566:	9b01      	ldr	r3, [sp, #4]
   d4568:	f00b 0b1f 	and.w	fp, fp, #31
   d456c:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4570:	4658      	mov	r0, fp
   d4572:	f7ff feae 	bl	d42d2 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4576:	4658      	mov	r0, fp
   d4578:	f7ff feab 	bl	d42d2 <nrf_gpio_pin_read>
   d457c:	9b00      	ldr	r3, [sp, #0]
   d457e:	4283      	cmp	r3, r0
   d4580:	d109      	bne.n	d4596 <_ZN3DHT4readEv+0x216>
			counter++;
   d4582:	f109 0901 	add.w	r9, r9, #1
   d4586:	fa5f f989 	uxtb.w	r9, r9
   d458a:	2001      	movs	r0, #1
   d458c:	f000 f8e2 	bl	d4754 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d4590:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d4594:	d1bc      	bne.n	d4510 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4596:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d459a:	7833      	ldrb	r3, [r6, #0]
   d459c:	f3bf 8f5b 	dmb	ish
   d45a0:	07d8      	lsls	r0, r3, #31
   d45a2:	d409      	bmi.n	d45b8 <_ZN3DHT4readEv+0x238>
   d45a4:	4640      	mov	r0, r8
   d45a6:	f7ff fd7a 	bl	d409e <__cxa_guard_acquire>
   d45aa:	b128      	cbz	r0, d45b8 <_ZN3DHT4readEv+0x238>
   d45ac:	f000 f8aa 	bl	d4704 <HAL_Pin_Map>
   d45b0:	6028      	str	r0, [r5, #0]
   d45b2:	4640      	mov	r0, r8
   d45b4:	f7ff fd78 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45b8:	682b      	ldr	r3, [r5, #0]
   d45ba:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d45be:	f813 300b 	ldrb.w	r3, [r3, fp]
   d45c2:	015b      	lsls	r3, r3, #5
   d45c4:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45c6:	7833      	ldrb	r3, [r6, #0]
   d45c8:	f3bf 8f5b 	dmb	ish
   d45cc:	07d9      	lsls	r1, r3, #31
   d45ce:	d409      	bmi.n	d45e4 <_ZN3DHT4readEv+0x264>
   d45d0:	4640      	mov	r0, r8
   d45d2:	f7ff fd64 	bl	d409e <__cxa_guard_acquire>
   d45d6:	b128      	cbz	r0, d45e4 <_ZN3DHT4readEv+0x264>
   d45d8:	f000 f894 	bl	d4704 <HAL_Pin_Map>
   d45dc:	6028      	str	r0, [r5, #0]
   d45de:	4640      	mov	r0, r8
   d45e0:	f7ff fd62 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45e4:	682b      	ldr	r3, [r5, #0]
   d45e6:	445b      	add	r3, fp
   d45e8:	f893 b001 	ldrb.w	fp, [r3, #1]
   d45ec:	9b00      	ldr	r3, [sp, #0]
   d45ee:	f00b 0b1f 	and.w	fp, fp, #31
   d45f2:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d45f6:	4658      	mov	r0, fp
   d45f8:	f7ff fe6b 	bl	d42d2 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d45fc:	4658      	mov	r0, fp
   d45fe:	f7ff fe68 	bl	d42d2 <nrf_gpio_pin_read>

		if (counter == 255) break;
   d4602:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d4606:	b2c3      	uxtb	r3, r0
   d4608:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d460a:	d018      	beq.n	d463e <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
   d460c:	2f03      	cmp	r7, #3
   d460e:	d911      	bls.n	d4634 <_ZN3DHT4readEv+0x2b4>
   d4610:	07fa      	lsls	r2, r7, #31
   d4612:	d40f      	bmi.n	d4634 <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4614:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4618:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d461c:	5ca3      	ldrb	r3, [r4, r2]
   d461e:	005b      	lsls	r3, r3, #1
   d4620:	b2db      	uxtb	r3, r3
   d4622:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4624:	7a21      	ldrb	r1, [r4, #8]
   d4626:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4628:	bf3c      	itt	cc
   d462a:	f043 0301 	orrcc.w	r3, r3, #1
   d462e:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4630:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d4634:	3701      	adds	r7, #1
   d4636:	b2ff      	uxtb	r7, r7
   d4638:	2f55      	cmp	r7, #85	; 0x55
   d463a:	f47f af67 	bne.w	d450c <_ZN3DHT4readEv+0x18c>
		}

	}

	interrupts();
   d463e:	f001 f95d 	bl	d58fc <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// Verify that the data is correct
	if ((j >= 40) &&
   d4642:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d4646:	d910      	bls.n	d466a <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4648:	7863      	ldrb	r3, [r4, #1]
   d464a:	7820      	ldrb	r0, [r4, #0]
   d464c:	4418      	add	r0, r3
   d464e:	78a3      	ldrb	r3, [r4, #2]
   d4650:	4418      	add	r0, r3
   d4652:	78e3      	ldrb	r3, [r4, #3]
   d4654:	4418      	add	r0, r3
   d4656:	7923      	ldrb	r3, [r4, #4]
   d4658:	b2c0      	uxtb	r0, r0
	if ((j >= 40) &&
   d465a:	1ac3      	subs	r3, r0, r3
   d465c:	4258      	negs	r0, r3
   d465e:	4158      	adcs	r0, r3
		return true;
	}

	return false;

}
   d4660:	b005      	add	sp, #20
   d4662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d4666:	2001      	movs	r0, #1
   d4668:	e7fa      	b.n	d4660 <_ZN3DHT4readEv+0x2e0>
	return false;
   d466a:	2000      	movs	r0, #0
   d466c:	e7f8      	b.n	d4660 <_ZN3DHT4readEv+0x2e0>
   d466e:	bf00      	nop
   d4670:	2003e5a0 	.word	0x2003e5a0
   d4674:	2003e5a4 	.word	0x2003e5a4

000d4678 <_ZN3DHT15readTemperatureEv>:
{
   d4678:	b510      	push	{r4, lr}
   d467a:	4604      	mov	r4, r0
	if (read())
   d467c:	f7ff fe80 	bl	d4380 <_ZN3DHT4readEv>
   d4680:	b128      	cbz	r0, d468e <_ZN3DHT15readTemperatureEv+0x16>
		f = data[2];
   d4682:	78a3      	ldrb	r3, [r4, #2]
   d4684:	ee00 3a10 	vmov	s0, r3
   d4688:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d468c:	bd10      	pop	{r4, pc}
	return NAN;
   d468e:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4694 <_ZN3DHT15readTemperatureEv+0x1c>
   d4692:	e7fb      	b.n	d468c <_ZN3DHT15readTemperatureEv+0x14>
   d4694:	7fc00000 	.word	0x7fc00000

000d4698 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d4698:	f7ff bfee 	b.w	d4678 <_ZN3DHT15readTemperatureEv>

000d469c <_ZN3DHT16getTempFarenheitEv>:
{
   d469c:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d469e:	f7ff ffeb 	bl	d4678 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d46a2:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d46a6:	ee20 0a27 	vmul.f32	s0, s0, s15
   d46aa:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d46ae:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d46b2:	ed9f 0a02 	vldr	s0, [pc, #8]	; d46bc <_ZN3DHT16getTempFarenheitEv+0x20>
   d46b6:	ee37 0a00 	vadd.f32	s0, s14, s0
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	42000000 	.word	0x42000000

000d46c0 <_ZN3DHT12readHumidityEv>:
{
   d46c0:	b510      	push	{r4, lr}
   d46c2:	4604      	mov	r4, r0
	if (read())
   d46c4:	f7ff fe5c 	bl	d4380 <_ZN3DHT4readEv>
   d46c8:	b128      	cbz	r0, d46d6 <_ZN3DHT12readHumidityEv+0x16>
		f = data[0];
   d46ca:	7823      	ldrb	r3, [r4, #0]
   d46cc:	ee00 3a10 	vmov	s0, r3
   d46d0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d46d4:	bd10      	pop	{r4, pc}
	return NAN;
   d46d6:	ed9f 0a01 	vldr	s0, [pc, #4]	; d46dc <_ZN3DHT12readHumidityEv+0x1c>
   d46da:	e7fb      	b.n	d46d4 <_ZN3DHT12readHumidityEv+0x14>
   d46dc:	7fc00000 	.word	0x7fc00000

000d46e0 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d46e0:	f7ff bfee 	b.w	d46c0 <_ZN3DHT12readHumidityEv>

000d46e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <netdb_freeaddrinfo+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	689b      	ldr	r3, [r3, #8]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030268 	.word	0x00030268

000d46f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <netdb_getaddrinfo+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	68db      	ldr	r3, [r3, #12]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030268 	.word	0x00030268

000d4704 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <HAL_Pin_Map+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	681b      	ldr	r3, [r3, #0]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003022c 	.word	0x0003022c

000d4714 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <HAL_Pin_Mode+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	689b      	ldr	r3, [r3, #8]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003022c 	.word	0x0003022c

000d4724 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <HAL_Interrupts_Enable_All+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	6a1b      	ldr	r3, [r3, #32]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003022c 	.word	0x0003022c

000d4734 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <HAL_Interrupts_Disable_All+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003022c 	.word	0x0003022c

000d4744 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <HAL_RNG_GetRandomNumber+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	685b      	ldr	r3, [r3, #4]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030218 	.word	0x00030218

000d4754 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <HAL_Delay_Microseconds+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	68db      	ldr	r3, [r3, #12]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030218 	.word	0x00030218

000d4764 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	695b      	ldr	r3, [r3, #20]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030218 	.word	0x00030218

000d4774 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <os_mutex_recursive_create+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030248 	.word	0x00030248

000d4784 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <inet_inet_ntop+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	695b      	ldr	r3, [r3, #20]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030264 	.word	0x00030264

000d4794 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <hal_usart_init+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	681b      	ldr	r3, [r3, #0]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	0003023c 	.word	0x0003023c

000d47a4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <hal_usart_write+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	68db      	ldr	r3, [r3, #12]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	0003023c 	.word	0x0003023c

000d47b4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <hal_usart_available+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	691b      	ldr	r3, [r3, #16]
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	0003023c 	.word	0x0003023c

000d47c4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <hal_usart_read+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	695b      	ldr	r3, [r3, #20]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	0003023c 	.word	0x0003023c

000d47d4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <hal_usart_peek+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	699b      	ldr	r3, [r3, #24]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	0003023c 	.word	0x0003023c

000d47e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <hal_usart_flush+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	69db      	ldr	r3, [r3, #28]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	0003023c 	.word	0x0003023c

000d47f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <hal_usart_is_enabled+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	6a1b      	ldr	r3, [r3, #32]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	0003023c 	.word	0x0003023c

000d4804 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <hal_usart_available_data_for_write+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	0003023c 	.word	0x0003023c

000d4814 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <hal_i2c_write+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	6a1b      	ldr	r3, [r3, #32]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	00030228 	.word	0x00030228

000d4824 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <hal_i2c_available+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	00030228 	.word	0x00030228

000d4834 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <hal_i2c_read+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	00030228 	.word	0x00030228

000d4844 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <hal_i2c_peek+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	00030228 	.word	0x00030228

000d4854 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <hal_i2c_flush+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	00030228 	.word	0x00030228

000d4864 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <hal_i2c_is_enabled+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030228 	.word	0x00030228

000d4874 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <hal_i2c_init+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	00030228 	.word	0x00030228

000d4884 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <hal_spi_init+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	69db      	ldr	r3, [r3, #28]
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030230 	.word	0x00030230

000d4894 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <hal_spi_is_enabled+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	6a1b      	ldr	r3, [r3, #32]
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030230 	.word	0x00030230

000d48a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <HAL_USB_USART_Init+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	681b      	ldr	r3, [r3, #0]
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	0003024c 	.word	0x0003024c

000d48b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <HAL_USB_USART_Available_Data+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	691b      	ldr	r3, [r3, #16]
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	0003024c 	.word	0x0003024c

000d48c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	695b      	ldr	r3, [r3, #20]
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	0003024c 	.word	0x0003024c

000d48d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <HAL_USB_USART_Receive_Data+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	699b      	ldr	r3, [r3, #24]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	0003024c 	.word	0x0003024c

000d48e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <HAL_USB_USART_Send_Data+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	69db      	ldr	r3, [r3, #28]
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	0003024c 	.word	0x0003024c

000d48f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <HAL_USB_USART_Flush_Data+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	6a1b      	ldr	r3, [r3, #32]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	0003024c 	.word	0x0003024c

000d4904 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <panic_+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030260 	.word	0x00030260

000d4914 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <set_system_mode+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	685b      	ldr	r3, [r3, #4]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030220 	.word	0x00030220

000d4924 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <system_delay_ms+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	695b      	ldr	r3, [r3, #20]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030220 	.word	0x00030220

000d4934 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <application_thread_current+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030220 	.word	0x00030220

000d4944 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <application_thread_invoke+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030220 	.word	0x00030220

000d4954 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b03      	ldr	r3, [pc, #12]	; (d4964 <system_ctrl_set_app_request_handler+0x10>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d495e:	9301      	str	r3, [sp, #4]
   d4960:	bd08      	pop	{r3, pc}
   d4962:	0000      	.short	0x0000
   d4964:	00030220 	.word	0x00030220

000d4968 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b03      	ldr	r3, [pc, #12]	; (d4978 <system_ctrl_set_result+0x10>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4972:	9301      	str	r3, [sp, #4]
   d4974:	bd08      	pop	{r3, pc}
   d4976:	0000      	.short	0x0000
   d4978:	00030220 	.word	0x00030220

000d497c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <network_connect+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	685b      	ldr	r3, [r3, #4]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030240 	.word	0x00030240

000d498c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <network_connecting+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	689b      	ldr	r3, [r3, #8]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	00030240 	.word	0x00030240

000d499c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <network_disconnect+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	68db      	ldr	r3, [r3, #12]
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	00030240 	.word	0x00030240

000d49ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <network_ready+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	691b      	ldr	r3, [r3, #16]
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	00030240 	.word	0x00030240

000d49bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <network_on+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	695b      	ldr	r3, [r3, #20]
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	00030240 	.word	0x00030240

000d49cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <network_off+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	699b      	ldr	r3, [r3, #24]
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	00030240 	.word	0x00030240

000d49dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <network_listen+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	69db      	ldr	r3, [r3, #28]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	00030240 	.word	0x00030240

000d49ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <network_listening+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	6a1b      	ldr	r3, [r3, #32]
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	00030240 	.word	0x00030240

000d49fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <network_set_listen_timeout+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	00030240 	.word	0x00030240

000d4a0c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <network_get_listen_timeout+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	00030240 	.word	0x00030240

000d4a1c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <network_is_on+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	00030240 	.word	0x00030240

000d4a2c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <network_is_off+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	00030240 	.word	0x00030240

000d4a3c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <spark_cloud_flag_connected+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	695b      	ldr	r3, [r3, #20]
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	00030244 	.word	0x00030244

000d4a4c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <spark_send_event+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	6a1b      	ldr	r3, [r3, #32]
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	00030244 	.word	0x00030244

000d4a5c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	00030244 	.word	0x00030244

000d4a6c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <malloc+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	681b      	ldr	r3, [r3, #0]
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	0003021c 	.word	0x0003021c

000d4a7c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <free+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	685b      	ldr	r3, [r3, #4]
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	0003021c 	.word	0x0003021c

000d4a8c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <realloc+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	689b      	ldr	r3, [r3, #8]
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	0003021c 	.word	0x0003021c

000d4a9c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <abort+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	0003021c 	.word	0x0003021c

000d4aac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <_malloc_r+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	0003021c 	.word	0x0003021c

000d4abc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <newlib_impure_ptr_callback+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	0003021c 	.word	0x0003021c

000d4acc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4acc:	2200      	movs	r2, #0
   d4ace:	6840      	ldr	r0, [r0, #4]
   d4ad0:	4611      	mov	r1, r2
   d4ad2:	f7ff bf8b 	b.w	d49ec <network_listening>

000d4ad6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4ad6:	2200      	movs	r2, #0
   d4ad8:	6840      	ldr	r0, [r0, #4]
   d4ada:	4611      	mov	r1, r2
   d4adc:	f7ff bf96 	b.w	d4a0c <network_get_listen_timeout>

000d4ae0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4ae0:	6840      	ldr	r0, [r0, #4]
   d4ae2:	2200      	movs	r2, #0
   d4ae4:	f7ff bf8a 	b.w	d49fc <network_set_listen_timeout>

000d4ae8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ae8:	6840      	ldr	r0, [r0, #4]
   d4aea:	2200      	movs	r2, #0
   d4aec:	f081 0101 	eor.w	r1, r1, #1
   d4af0:	f7ff bf74 	b.w	d49dc <network_listen>

000d4af4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4af4:	2300      	movs	r3, #0
   d4af6:	6840      	ldr	r0, [r0, #4]
   d4af8:	461a      	mov	r2, r3
   d4afa:	4619      	mov	r1, r3
   d4afc:	f7ff bf66 	b.w	d49cc <network_off>

000d4b00 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4b00:	2300      	movs	r3, #0
   d4b02:	6840      	ldr	r0, [r0, #4]
   d4b04:	461a      	mov	r2, r3
   d4b06:	4619      	mov	r1, r3
   d4b08:	f7ff bf58 	b.w	d49bc <network_on>

000d4b0c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b0c:	2200      	movs	r2, #0
   d4b0e:	6840      	ldr	r0, [r0, #4]
   d4b10:	4611      	mov	r1, r2
   d4b12:	f7ff bf4b 	b.w	d49ac <network_ready>

000d4b16 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4b16:	2200      	movs	r2, #0
   d4b18:	6840      	ldr	r0, [r0, #4]
   d4b1a:	4611      	mov	r1, r2
   d4b1c:	f7ff bf36 	b.w	d498c <network_connecting>

000d4b20 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b20:	6840      	ldr	r0, [r0, #4]
   d4b22:	2200      	movs	r2, #0
   d4b24:	2102      	movs	r1, #2
   d4b26:	f7ff bf39 	b.w	d499c <network_disconnect>

000d4b2a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4b2a:	2300      	movs	r3, #0
   d4b2c:	6840      	ldr	r0, [r0, #4]
   d4b2e:	461a      	mov	r2, r3
   d4b30:	f7ff bf24 	b.w	d497c <network_connect>

000d4b34 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b34:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b36:	2203      	movs	r2, #3
   d4b38:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b3a:	4a02      	ldr	r2, [pc, #8]	; (d4b44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b3c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4b3e:	4770      	bx	lr
   d4b40:	2003e5a8 	.word	0x2003e5a8
   d4b44:	000d6c44 	.word	0x000d6c44

000d4b48 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4b48:	b510      	push	{r4, lr}
   d4b4a:	4604      	mov	r4, r0
   d4b4c:	4608      	mov	r0, r1
{
    _spi = spi;
   d4b4e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4b50:	f7ff fe98 	bl	d4884 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4b54:	2300      	movs	r3, #0
   d4b56:	6063      	str	r3, [r4, #4]
}
   d4b58:	4620      	mov	r0, r4
   d4b5a:	bd10      	pop	{r4, pc}

000d4b5c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4b5c:	4b05      	ldr	r3, [pc, #20]	; (d4b74 <_GLOBAL__sub_I_System+0x18>)
   d4b5e:	2202      	movs	r2, #2
   d4b60:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b62:	4b05      	ldr	r3, [pc, #20]	; (d4b78 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d4b64:	4a05      	ldr	r2, [pc, #20]	; (d4b7c <_GLOBAL__sub_I_System+0x20>)
   d4b66:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4b68:	2000      	movs	r0, #0
   d4b6a:	6018      	str	r0, [r3, #0]
   d4b6c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d4b6e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b70:	f7ff bed0 	b.w	d4914 <set_system_mode>
   d4b74:	2003e5bc 	.word	0x2003e5bc
   d4b78:	2003e5b0 	.word	0x2003e5b0
   d4b7c:	ffff0000 	.word	0xffff0000

000d4b80 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4b80:	b510      	push	{r4, lr}
   d4b82:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4b84:	f001 ffb5 	bl	d6af2 <strlen>
   d4b88:	3801      	subs	r0, #1
   d4b8a:	1823      	adds	r3, r4, r0
   d4b8c:	4620      	mov	r0, r4
	while(i<j){
   d4b8e:	4283      	cmp	r3, r0
   d4b90:	d906      	bls.n	d4ba0 <_Z11str_reversePc+0x20>
		c = *i;
   d4b92:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4b94:	7819      	ldrb	r1, [r3, #0]
   d4b96:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4b9a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d4b9e:	e7f6      	b.n	d4b8e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d4ba0:	bd10      	pop	{r4, pc}

000d4ba2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4ba2:	b570      	push	{r4, r5, r6, lr}
   d4ba4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4ba6:	1e91      	subs	r1, r2, #2
   d4ba8:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4baa:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d4bac:	d822      	bhi.n	d4bf4 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d4bae:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d4bb0:	b16d      	cbz	r5, d4bce <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4bb2:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d4bb6:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d4bba:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d4bbc:	2d09      	cmp	r5, #9
                *ptr += '0';
   d4bbe:	bf94      	ite	ls
   d4bc0:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4bc2:	3157      	addhi	r1, #87	; 0x57
   d4bc4:	b2c9      	uxtb	r1, r1
   d4bc6:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d4bca:	4635      	mov	r5, r6
	while(a){
   d4bcc:	e7f0      	b.n	d4bb0 <ultoa+0xe>
   d4bce:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d4bd0:	4423      	add	r3, r4
            *ptr++ = '0';
   d4bd2:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d4bd4:	4293      	cmp	r3, r2
   d4bd6:	d902      	bls.n	d4bde <ultoa+0x3c>
            *ptr++ = '0';
   d4bd8:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d4bdc:	e7fa      	b.n	d4bd4 <ultoa+0x32>
   d4bde:	1a1a      	subs	r2, r3, r0
   d4be0:	4283      	cmp	r3, r0
   d4be2:	bf38      	it	cc
   d4be4:	2200      	movcc	r2, #0

	*ptr = '\0';
   d4be6:	2300      	movs	r3, #0
   d4be8:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d4bea:	4620      	mov	r0, r4
   d4bec:	f7ff ffc8 	bl	d4b80 <_Z11str_reversePc>
	return buffer;
   d4bf0:	4620      	mov	r0, r4
}
   d4bf2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d4bf4:	2000      	movs	r0, #0
   d4bf6:	e7fc      	b.n	d4bf2 <ultoa+0x50>

000d4bf8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d4bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4bfc:	ec57 6b10 	vmov	r6, r7, d0
   d4c00:	4680      	mov	r8, r0
   d4c02:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d4c04:	ee10 0a10 	vmov	r0, s0
   d4c08:	2200      	movs	r2, #0
   d4c0a:	2300      	movs	r3, #0
   d4c0c:	4639      	mov	r1, r7
   d4c0e:	f001 fcf3 	bl	d65f8 <__aeabi_dcmplt>
   d4c12:	b128      	cbz	r0, d4c20 <_Z4dtoadhPc+0x28>
        val = -val;
   d4c14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d4c18:	461f      	mov	r7, r3
        *sout++ = '-';
   d4c1a:	232d      	movs	r3, #45	; 0x2d
   d4c1c:	f804 3b01 	strb.w	r3, [r4], #1
   d4c20:	2300      	movs	r3, #0
    }
    long scale = 1;
   d4c22:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d4c26:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d4c28:	b2d9      	uxtb	r1, r3
   d4c2a:	4588      	cmp	r8, r1
   d4c2c:	d903      	bls.n	d4c36 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d4c2e:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d4c32:	3301      	adds	r3, #1
   d4c34:	e7f8      	b.n	d4c28 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d4c36:	4648      	mov	r0, r9
   d4c38:	f001 fa02 	bl	d6040 <__aeabi_i2d>
   d4c3c:	4632      	mov	r2, r6
   d4c3e:	463b      	mov	r3, r7
   d4c40:	f001 fa68 	bl	d6114 <__aeabi_dmul>
   d4c44:	4606      	mov	r6, r0
   d4c46:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d4c48:	f001 fd74 	bl	d6734 <__aeabi_d2ulz>
   d4c4c:	4605      	mov	r5, r0
   d4c4e:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d4c50:	f001 fa2a 	bl	d60a8 <__aeabi_ul2d>
   d4c54:	4602      	mov	r2, r0
   d4c56:	460b      	mov	r3, r1
   d4c58:	4630      	mov	r0, r6
   d4c5a:	4639      	mov	r1, r7
   d4c5c:	f001 f8a2 	bl	d5da4 <__aeabi_dsub>
   d4c60:	4b13      	ldr	r3, [pc, #76]	; (d4cb0 <_Z4dtoadhPc+0xb8>)
   d4c62:	2200      	movs	r2, #0
   d4c64:	f001 fcdc 	bl	d6620 <__aeabi_dcmpge>
   d4c68:	b110      	cbz	r0, d4c70 <_Z4dtoadhPc+0x78>
        fixed++;
   d4c6a:	3501      	adds	r5, #1
   d4c6c:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d4c70:	464a      	mov	r2, r9
   d4c72:	4628      	mov	r0, r5
   d4c74:	17d3      	asrs	r3, r2, #31
   d4c76:	4651      	mov	r1, sl
   d4c78:	f001 fd44 	bl	d6704 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d4c7c:	2301      	movs	r3, #1
   d4c7e:	4615      	mov	r5, r2
   d4c80:	4621      	mov	r1, r4
   d4c82:	220a      	movs	r2, #10
   d4c84:	f7ff ff8d 	bl	d4ba2 <ultoa>
    if (prec) {
   d4c88:	f1b8 0f00 	cmp.w	r8, #0
   d4c8c:	d00d      	beq.n	d4caa <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d4c8e:	4620      	mov	r0, r4
   d4c90:	f001 ff2f 	bl	d6af2 <strlen>
        *sout++ = '.';
   d4c94:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d4c96:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d4c98:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d4c9a:	220a      	movs	r2, #10
   d4c9c:	4643      	mov	r3, r8
   d4c9e:	4628      	mov	r0, r5
   d4ca0:	3101      	adds	r1, #1
    }
}
   d4ca2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d4ca6:	f7ff bf7c 	b.w	d4ba2 <ultoa>
}
   d4caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4cae:	bf00      	nop
   d4cb0:	3fe00000 	.word	0x3fe00000

000d4cb4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4cb4:	b510      	push	{r4, lr}
   d4cb6:	4604      	mov	r4, r0
{
	free(buffer);
   d4cb8:	6800      	ldr	r0, [r0, #0]
   d4cba:	f7ff fedf 	bl	d4a7c <free>
}
   d4cbe:	4620      	mov	r0, r4
   d4cc0:	bd10      	pop	{r4, pc}

000d4cc2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4cc2:	b510      	push	{r4, lr}
   d4cc4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4cc6:	6800      	ldr	r0, [r0, #0]
   d4cc8:	b108      	cbz	r0, d4cce <_ZN6String10invalidateEv+0xc>
   d4cca:	f7ff fed7 	bl	d4a7c <free>
	buffer = NULL;
   d4cce:	2300      	movs	r3, #0
	capacity = len = 0;
   d4cd0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4cd4:	6023      	str	r3, [r4, #0]
}
   d4cd6:	bd10      	pop	{r4, pc}

000d4cd8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4cd8:	b538      	push	{r3, r4, r5, lr}
   d4cda:	4604      	mov	r4, r0
   d4cdc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4cde:	6800      	ldr	r0, [r0, #0]
   d4ce0:	3101      	adds	r1, #1
   d4ce2:	f7ff fed3 	bl	d4a8c <realloc>
	if (newbuffer) {
   d4ce6:	b110      	cbz	r0, d4cee <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4ce8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4cec:	2001      	movs	r0, #1
	}
	return 0;
}
   d4cee:	bd38      	pop	{r3, r4, r5, pc}

000d4cf0 <_ZN6String7reserveEj>:
{
   d4cf0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4cf2:	6803      	ldr	r3, [r0, #0]
{
   d4cf4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4cf6:	b123      	cbz	r3, d4d02 <_ZN6String7reserveEj+0x12>
   d4cf8:	6843      	ldr	r3, [r0, #4]
   d4cfa:	428b      	cmp	r3, r1
   d4cfc:	d301      	bcc.n	d4d02 <_ZN6String7reserveEj+0x12>
   d4cfe:	2001      	movs	r0, #1
}
   d4d00:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4d02:	4620      	mov	r0, r4
   d4d04:	f7ff ffe8 	bl	d4cd8 <_ZN6String12changeBufferEj>
   d4d08:	2800      	cmp	r0, #0
   d4d0a:	d0f9      	beq.n	d4d00 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4d0c:	68a3      	ldr	r3, [r4, #8]
   d4d0e:	2b00      	cmp	r3, #0
   d4d10:	d1f5      	bne.n	d4cfe <_ZN6String7reserveEj+0xe>
   d4d12:	6822      	ldr	r2, [r4, #0]
   d4d14:	7013      	strb	r3, [r2, #0]
   d4d16:	e7f2      	b.n	d4cfe <_ZN6String7reserveEj+0xe>

000d4d18 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4d1a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4d1c:	4611      	mov	r1, r2
   d4d1e:	9201      	str	r2, [sp, #4]
{
   d4d20:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4d22:	f7ff ffe5 	bl	d4cf0 <_ZN6String7reserveEj>
   d4d26:	9a01      	ldr	r2, [sp, #4]
   d4d28:	b928      	cbnz	r0, d4d36 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4d2a:	4620      	mov	r0, r4
   d4d2c:	f7ff ffc9 	bl	d4cc2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4d30:	4620      	mov	r0, r4
   d4d32:	b003      	add	sp, #12
   d4d34:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4d36:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4d38:	4629      	mov	r1, r5
   d4d3a:	6820      	ldr	r0, [r4, #0]
   d4d3c:	f001 fe82 	bl	d6a44 <memcpy>
	buffer[len] = 0;
   d4d40:	6822      	ldr	r2, [r4, #0]
   d4d42:	68a3      	ldr	r3, [r4, #8]
   d4d44:	2100      	movs	r1, #0
   d4d46:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4d48:	e7f2      	b.n	d4d30 <_ZN6String4copyEPKcj+0x18>

000d4d4a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4d4a:	b513      	push	{r0, r1, r4, lr}
   d4d4c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4d4e:	b159      	cbz	r1, d4d68 <_ZN6StringaSEPKc+0x1e>
   d4d50:	4608      	mov	r0, r1
   d4d52:	9101      	str	r1, [sp, #4]
   d4d54:	f001 fecd 	bl	d6af2 <strlen>
   d4d58:	9901      	ldr	r1, [sp, #4]
   d4d5a:	4602      	mov	r2, r0
   d4d5c:	4620      	mov	r0, r4
   d4d5e:	f7ff ffdb 	bl	d4d18 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4d62:	4620      	mov	r0, r4
   d4d64:	b002      	add	sp, #8
   d4d66:	bd10      	pop	{r4, pc}
	else invalidate();
   d4d68:	f7ff ffab 	bl	d4cc2 <_ZN6String10invalidateEv>
   d4d6c:	e7f9      	b.n	d4d62 <_ZN6StringaSEPKc+0x18>

000d4d6e <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d4d6e:	b530      	push	{r4, r5, lr}
   d4d70:	4604      	mov	r4, r0
	buffer = NULL;
   d4d72:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d4d74:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d4d76:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d4d7a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4d7c:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d4d7e:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d4d82:	b2cd      	uxtb	r5, r1
   d4d84:	f001 f96e 	bl	d6064 <__aeabi_f2d>
   d4d88:	ec41 0b10 	vmov	d0, r0, r1
   d4d8c:	a901      	add	r1, sp, #4
   d4d8e:	4628      	mov	r0, r5
   d4d90:	f7ff ff32 	bl	d4bf8 <_Z4dtoadhPc>
        *this = buf;
   d4d94:	a901      	add	r1, sp, #4
   d4d96:	4620      	mov	r0, r4
   d4d98:	f7ff ffd7 	bl	d4d4a <_ZN6StringaSEPKc>
}
   d4d9c:	4620      	mov	r0, r4
   d4d9e:	b00b      	add	sp, #44	; 0x2c
   d4da0:	bd30      	pop	{r4, r5, pc}

000d4da2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4da2:	680b      	ldr	r3, [r1, #0]
   d4da4:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4da6:	b113      	cbz	r3, d4dae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4da8:	685a      	ldr	r2, [r3, #4]
   d4daa:	3201      	adds	r2, #1
   d4dac:	605a      	str	r2, [r3, #4]
      }
   d4dae:	4770      	bx	lr

000d4db0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4db0:	4802      	ldr	r0, [pc, #8]	; (d4dbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4db2:	2300      	movs	r3, #0
   d4db4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4db6:	f7ff bcdd 	b.w	d4774 <os_mutex_recursive_create>
   d4dba:	bf00      	nop
   d4dbc:	2003e5c0 	.word	0x2003e5c0

000d4dc0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4dc2:	4606      	mov	r6, r0
   d4dc4:	460d      	mov	r5, r1
  size_t n = 0;
   d4dc6:	188f      	adds	r7, r1, r2
   d4dc8:	2400      	movs	r4, #0
  while (size--) {
   d4dca:	42bd      	cmp	r5, r7
   d4dcc:	d00c      	beq.n	d4de8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4dce:	6833      	ldr	r3, [r6, #0]
   d4dd0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4dd4:	689b      	ldr	r3, [r3, #8]
   d4dd6:	4630      	mov	r0, r6
   d4dd8:	4798      	blx	r3
     if (chunk>=0)
   d4dda:	1e03      	subs	r3, r0, #0
   d4ddc:	db01      	blt.n	d4de2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4dde:	441c      	add	r4, r3
  while (size--) {
   d4de0:	e7f3      	b.n	d4dca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4de2:	2c00      	cmp	r4, #0
   d4de4:	bf08      	it	eq
   d4de6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4de8:	4620      	mov	r0, r4
   d4dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4dec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4dec:	b513      	push	{r0, r1, r4, lr}
   d4dee:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4df0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4df2:	b159      	cbz	r1, d4e0c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4df4:	9101      	str	r1, [sp, #4]
   d4df6:	f001 fe7c 	bl	d6af2 <strlen>
   d4dfa:	6823      	ldr	r3, [r4, #0]
   d4dfc:	9901      	ldr	r1, [sp, #4]
   d4dfe:	68db      	ldr	r3, [r3, #12]
   d4e00:	4602      	mov	r2, r0
   d4e02:	4620      	mov	r0, r4
    }
   d4e04:	b002      	add	sp, #8
   d4e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4e0a:	4718      	bx	r3
    }
   d4e0c:	b002      	add	sp, #8
   d4e0e:	bd10      	pop	{r4, pc}

000d4e10 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4e10:	b508      	push	{r3, lr}
  return write(str);
   d4e12:	f7ff ffeb 	bl	d4dec <_ZN5Print5writeEPKc>
}
   d4e16:	bd08      	pop	{r3, pc}

000d4e18 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4e18:	6803      	ldr	r3, [r0, #0]
   d4e1a:	689b      	ldr	r3, [r3, #8]
   d4e1c:	4718      	bx	r3

000d4e1e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4e1e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4e20:	210d      	movs	r1, #13
{
   d4e22:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4e24:	f7ff fff8 	bl	d4e18 <_ZN5Print5printEc>
  n += print('\n');
   d4e28:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4e2a:	4604      	mov	r4, r0
  n += print('\n');
   d4e2c:	4628      	mov	r0, r5
   d4e2e:	f7ff fff3 	bl	d4e18 <_ZN5Print5printEc>
  return n;
}
   d4e32:	4420      	add	r0, r4
   d4e34:	bd38      	pop	{r3, r4, r5, pc}

000d4e36 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4e36:	b538      	push	{r3, r4, r5, lr}
   d4e38:	4605      	mov	r5, r0
  return write(str);
   d4e3a:	f7ff ffd7 	bl	d4dec <_ZN5Print5writeEPKc>
   d4e3e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4e40:	4628      	mov	r0, r5
   d4e42:	f7ff ffec 	bl	d4e1e <_ZN5Print7printlnEv>
  return n;
}
   d4e46:	4420      	add	r0, r4
   d4e48:	bd38      	pop	{r3, r4, r5, pc}

000d4e4a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4e4a:	b530      	push	{r4, r5, lr}
   d4e4c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4e4e:	2300      	movs	r3, #0
   d4e50:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4e54:	2a01      	cmp	r2, #1
   d4e56:	bf98      	it	ls
   d4e58:	220a      	movls	r2, #10
   d4e5a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4e5c:	460d      	mov	r5, r1
   d4e5e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4e62:	fb01 5312 	mls	r3, r1, r2, r5
   d4e66:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e6a:	2b09      	cmp	r3, #9
   d4e6c:	bf94      	ite	ls
   d4e6e:	3330      	addls	r3, #48	; 0x30
   d4e70:	3337      	addhi	r3, #55	; 0x37
   d4e72:	b2db      	uxtb	r3, r3
  } while(n);
   d4e74:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e76:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4e7a:	d9ef      	bls.n	d4e5c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4e7c:	4621      	mov	r1, r4
   d4e7e:	f7ff ffb5 	bl	d4dec <_ZN5Print5writeEPKc>
}
   d4e82:	b00b      	add	sp, #44	; 0x2c
   d4e84:	bd30      	pop	{r4, r5, pc}
	...

000d4e88 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e8c:	ec55 4b10 	vmov	r4, r5, d0
   d4e90:	4606      	mov	r6, r0
   d4e92:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4e94:	ee10 2a10 	vmov	r2, s0
   d4e98:	ee10 0a10 	vmov	r0, s0
   d4e9c:	462b      	mov	r3, r5
   d4e9e:	4629      	mov	r1, r5
   d4ea0:	f001 fbd2 	bl	d6648 <__aeabi_dcmpun>
   d4ea4:	b140      	cbz	r0, d4eb8 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d4ea6:	4953      	ldr	r1, [pc, #332]	; (d4ff4 <_ZN5Print10printFloatEdh+0x16c>)
   d4ea8:	4630      	mov	r0, r6
   d4eaa:	f7ff ff9f 	bl	d4dec <_ZN5Print5writeEPKc>
   d4eae:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d4eb0:	4650      	mov	r0, sl
   d4eb2:	b003      	add	sp, #12
   d4eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d4eb8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d4ebc:	4b4e      	ldr	r3, [pc, #312]	; (d4ff8 <_ZN5Print10printFloatEdh+0x170>)
   d4ebe:	f04f 32ff 	mov.w	r2, #4294967295
   d4ec2:	4620      	mov	r0, r4
   d4ec4:	4649      	mov	r1, r9
   d4ec6:	f001 fbbf 	bl	d6648 <__aeabi_dcmpun>
   d4eca:	b948      	cbnz	r0, d4ee0 <_ZN5Print10printFloatEdh+0x58>
   d4ecc:	4b4a      	ldr	r3, [pc, #296]	; (d4ff8 <_ZN5Print10printFloatEdh+0x170>)
   d4ece:	f04f 32ff 	mov.w	r2, #4294967295
   d4ed2:	4620      	mov	r0, r4
   d4ed4:	4649      	mov	r1, r9
   d4ed6:	f001 fb99 	bl	d660c <__aeabi_dcmple>
   d4eda:	b908      	cbnz	r0, d4ee0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d4edc:	4947      	ldr	r1, [pc, #284]	; (d4ffc <_ZN5Print10printFloatEdh+0x174>)
   d4ede:	e7e3      	b.n	d4ea8 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4ee0:	4b47      	ldr	r3, [pc, #284]	; (d5000 <_ZN5Print10printFloatEdh+0x178>)
   d4ee2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4ee6:	4620      	mov	r0, r4
   d4ee8:	4629      	mov	r1, r5
   d4eea:	f001 fba3 	bl	d6634 <__aeabi_dcmpgt>
   d4eee:	b108      	cbz	r0, d4ef4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d4ef0:	4944      	ldr	r1, [pc, #272]	; (d5004 <_ZN5Print10printFloatEdh+0x17c>)
   d4ef2:	e7d9      	b.n	d4ea8 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4ef4:	4b44      	ldr	r3, [pc, #272]	; (d5008 <_ZN5Print10printFloatEdh+0x180>)
   d4ef6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4efa:	4620      	mov	r0, r4
   d4efc:	4629      	mov	r1, r5
   d4efe:	f001 fb7b 	bl	d65f8 <__aeabi_dcmplt>
   d4f02:	2800      	cmp	r0, #0
   d4f04:	d1f4      	bne.n	d4ef0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d4f06:	2200      	movs	r2, #0
   d4f08:	2300      	movs	r3, #0
   d4f0a:	4620      	mov	r0, r4
   d4f0c:	4629      	mov	r1, r5
   d4f0e:	f001 fb73 	bl	d65f8 <__aeabi_dcmplt>
   d4f12:	b1d0      	cbz	r0, d4f4a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d4f14:	212d      	movs	r1, #45	; 0x2d
   d4f16:	4630      	mov	r0, r6
   d4f18:	f7ff ff7e 	bl	d4e18 <_ZN5Print5printEc>
     number = -number;
   d4f1c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d4f20:	4682      	mov	sl, r0
     number = -number;
   d4f22:	461d      	mov	r5, r3
  double rounding = 0.5;
   d4f24:	4939      	ldr	r1, [pc, #228]	; (d500c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d4f26:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d5014 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d4f2a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d4f2e:	2000      	movs	r0, #0
    rounding /= 10.0;
   d4f30:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d4f34:	fa5f f38b 	uxtb.w	r3, fp
   d4f38:	429f      	cmp	r7, r3
   d4f3a:	d908      	bls.n	d4f4e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d4f3c:	4642      	mov	r2, r8
   d4f3e:	464b      	mov	r3, r9
   d4f40:	f001 fa12 	bl	d6368 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d4f44:	f10b 0b01 	add.w	fp, fp, #1
   d4f48:	e7f4      	b.n	d4f34 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d4f4a:	4682      	mov	sl, r0
   d4f4c:	e7ea      	b.n	d4f24 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d4f4e:	4622      	mov	r2, r4
   d4f50:	462b      	mov	r3, r5
   d4f52:	f000 ff29 	bl	d5da8 <__adddf3>
   d4f56:	460d      	mov	r5, r1
   d4f58:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d4f5a:	f001 fbb3 	bl	d66c4 <__aeabi_d2uiz>
   d4f5e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d4f60:	f001 f85e 	bl	d6020 <__aeabi_ui2d>
   d4f64:	4602      	mov	r2, r0
   d4f66:	460b      	mov	r3, r1
   d4f68:	4620      	mov	r0, r4
   d4f6a:	4629      	mov	r1, r5
   d4f6c:	f000 ff1a 	bl	d5da4 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4f70:	220a      	movs	r2, #10
   d4f72:	4604      	mov	r4, r0
   d4f74:	460d      	mov	r5, r1
   d4f76:	4630      	mov	r0, r6
   d4f78:	4641      	mov	r1, r8
   d4f7a:	f7ff ff66 	bl	d4e4a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d4f7e:	4482      	add	sl, r0
  if (digits > 0) {
   d4f80:	b127      	cbz	r7, d4f8c <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d4f82:	4923      	ldr	r1, [pc, #140]	; (d5010 <_ZN5Print10printFloatEdh+0x188>)
   d4f84:	4630      	mov	r0, r6
   d4f86:	f7ff ff31 	bl	d4dec <_ZN5Print5writeEPKc>
    n += print(".");
   d4f8a:	4482      	add	sl, r0
    remainder *= 10.0;
   d4f8c:	f8df 9084 	ldr.w	r9, [pc, #132]	; d5014 <_ZN5Print10printFloatEdh+0x18c>
   d4f90:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d4f94:	3f01      	subs	r7, #1
   d4f96:	b2ff      	uxtb	r7, r7
   d4f98:	2fff      	cmp	r7, #255	; 0xff
   d4f9a:	d089      	beq.n	d4eb0 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d4f9c:	4642      	mov	r2, r8
   d4f9e:	464b      	mov	r3, r9
   d4fa0:	4620      	mov	r0, r4
   d4fa2:	4629      	mov	r1, r5
   d4fa4:	f001 f8b6 	bl	d6114 <__aeabi_dmul>
   d4fa8:	4604      	mov	r4, r0
   d4faa:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d4fac:	f001 fb62 	bl	d6674 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d4fb0:	f1b0 0b00 	subs.w	fp, r0, #0
   d4fb4:	da1a      	bge.n	d4fec <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d4fb6:	212d      	movs	r1, #45	; 0x2d
   d4fb8:	4630      	mov	r0, r6
   d4fba:	f7ff ff2d 	bl	d4e18 <_ZN5Print5printEc>
            val = -n;
   d4fbe:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d4fc2:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d4fc4:	220a      	movs	r2, #10
   d4fc6:	4630      	mov	r0, r6
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	f7ff ff3e 	bl	d4e4a <_ZN5Print11printNumberEmh>
   d4fce:	9b01      	ldr	r3, [sp, #4]
   d4fd0:	4418      	add	r0, r3
    n += print(toPrint);
   d4fd2:	4482      	add	sl, r0
    remainder -= toPrint;
   d4fd4:	4658      	mov	r0, fp
   d4fd6:	f001 f833 	bl	d6040 <__aeabi_i2d>
   d4fda:	4602      	mov	r2, r0
   d4fdc:	460b      	mov	r3, r1
   d4fde:	4620      	mov	r0, r4
   d4fe0:	4629      	mov	r1, r5
   d4fe2:	f000 fedf 	bl	d5da4 <__aeabi_dsub>
   d4fe6:	4604      	mov	r4, r0
   d4fe8:	460d      	mov	r5, r1
  while (digits-- > 0)
   d4fea:	e7d3      	b.n	d4f94 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d4fec:	4659      	mov	r1, fp
        size_t t = 0;
   d4fee:	2300      	movs	r3, #0
   d4ff0:	e7e8      	b.n	d4fc4 <_ZN5Print10printFloatEdh+0x13c>
   d4ff2:	bf00      	nop
   d4ff4:	000d6c78 	.word	0x000d6c78
   d4ff8:	7fefffff 	.word	0x7fefffff
   d4ffc:	000d6c7c 	.word	0x000d6c7c
   d5000:	41efffff 	.word	0x41efffff
   d5004:	000d6c80 	.word	0x000d6c80
   d5008:	c1efffff 	.word	0xc1efffff
   d500c:	3fe00000 	.word	0x3fe00000
   d5010:	000d6c84 	.word	0x000d6c84
   d5014:	40240000 	.word	0x40240000

000d5018 <_ZN5Print5printEfi>:
{
   d5018:	b538      	push	{r3, r4, r5, lr}
   d501a:	4604      	mov	r4, r0
   d501c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d5020:	b2cd      	uxtb	r5, r1
   d5022:	f001 f81f 	bl	d6064 <__aeabi_f2d>
   d5026:	ec41 0b10 	vmov	d0, r0, r1
   d502a:	4629      	mov	r1, r5
   d502c:	4620      	mov	r0, r4
}
   d502e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d5032:	f7ff bf29 	b.w	d4e88 <_ZN5Print10printFloatEdh>
	...

000d5038 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5038:	4b01      	ldr	r3, [pc, #4]	; (d5040 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d503a:	4a02      	ldr	r2, [pc, #8]	; (d5044 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d503c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d503e:	4770      	bx	lr
   d5040:	2003e5c4 	.word	0x2003e5c4
   d5044:	000d6c86 	.word	0x000d6c86

000d5048 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5048:	4b02      	ldr	r3, [pc, #8]	; (d5054 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d504a:	681a      	ldr	r2, [r3, #0]
   d504c:	4b02      	ldr	r3, [pc, #8]	; (d5058 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d504e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5050:	4770      	bx	lr
   d5052:	bf00      	nop
   d5054:	2003e51c 	.word	0x2003e51c
   d5058:	2003e5c8 	.word	0x2003e5c8

000d505c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d505c:	2100      	movs	r1, #0
   d505e:	f7ff bc61 	b.w	d4924 <system_delay_ms>

000d5062 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5062:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5064:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5066:	4604      	mov	r4, r0
      if (_M_manager)
   d5068:	b113      	cbz	r3, d5070 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d506a:	2203      	movs	r2, #3
   d506c:	4601      	mov	r1, r0
   d506e:	4798      	blx	r3
    }
   d5070:	4620      	mov	r0, r4
   d5072:	bd10      	pop	{r4, pc}

000d5074 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d5074:	b513      	push	{r0, r1, r4, lr}
   d5076:	460b      	mov	r3, r1
   d5078:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d507a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d507e:	466c      	mov	r4, sp
   d5080:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5084:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5088:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d508c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5090:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5094:	b002      	add	sp, #8
   d5096:	bd10      	pop	{r4, pc}

000d5098 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5098:	4b01      	ldr	r3, [pc, #4]	; (d50a0 <_GLOBAL__sub_I_RGB+0x8>)
   d509a:	2200      	movs	r2, #0
   d509c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d509e:	4770      	bx	lr
   d50a0:	2003e5cc 	.word	0x2003e5cc

000d50a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d50a4:	4b01      	ldr	r3, [pc, #4]	; (d50ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d50a6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d50a8:	4770      	bx	lr
   d50aa:	bf00      	nop
   d50ac:	2003e520 	.word	0x2003e520

000d50b0 <serialEventRun>:
{
   d50b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d50b2:	4b0b      	ldr	r3, [pc, #44]	; (d50e0 <serialEventRun+0x30>)
   d50b4:	b143      	cbz	r3, d50c8 <serialEventRun+0x18>
   d50b6:	f000 fbf9 	bl	d58ac <_Z16_fetch_usbserialv>
   d50ba:	6803      	ldr	r3, [r0, #0]
   d50bc:	691b      	ldr	r3, [r3, #16]
   d50be:	4798      	blx	r3
   d50c0:	2800      	cmp	r0, #0
   d50c2:	dd01      	ble.n	d50c8 <serialEventRun+0x18>
        serialEvent();
   d50c4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d50c8:	4b06      	ldr	r3, [pc, #24]	; (d50e4 <serialEventRun+0x34>)
   d50ca:	b143      	cbz	r3, d50de <serialEventRun+0x2e>
   d50cc:	f000 fc6c 	bl	d59a8 <_Z22__fetch_global_Serial1v>
   d50d0:	6803      	ldr	r3, [r0, #0]
   d50d2:	691b      	ldr	r3, [r3, #16]
   d50d4:	4798      	blx	r3
   d50d6:	2800      	cmp	r0, #0
   d50d8:	dd01      	ble.n	d50de <serialEventRun+0x2e>
        serialEvent1();
   d50da:	f3af 8000 	nop.w
}
   d50de:	bd08      	pop	{r3, pc}
	...

000d50e8 <_post_loop>:
{
   d50e8:	b508      	push	{r3, lr}
	serialEventRun();
   d50ea:	f7ff ffe1 	bl	d50b0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d50ee:	f7ff fb39 	bl	d4764 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d50f2:	4b01      	ldr	r3, [pc, #4]	; (d50f8 <_post_loop+0x10>)
   d50f4:	6018      	str	r0, [r3, #0]
}
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	2003e738 	.word	0x2003e738

000d50fc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d50fc:	4805      	ldr	r0, [pc, #20]	; (d5114 <_Z33system_initialize_user_backup_ramv+0x18>)
   d50fe:	4a06      	ldr	r2, [pc, #24]	; (d5118 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d5100:	4906      	ldr	r1, [pc, #24]	; (d511c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d5102:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5104:	1a12      	subs	r2, r2, r0
   d5106:	f001 fc9d 	bl	d6a44 <memcpy>
    __backup_sram_signature = signature;
   d510a:	4b05      	ldr	r3, [pc, #20]	; (d5120 <_Z33system_initialize_user_backup_ramv+0x24>)
   d510c:	4a05      	ldr	r2, [pc, #20]	; (d5124 <_Z33system_initialize_user_backup_ramv+0x28>)
   d510e:	601a      	str	r2, [r3, #0]
}
   d5110:	bd08      	pop	{r3, pc}
   d5112:	bf00      	nop
   d5114:	2003f400 	.word	0x2003f400
   d5118:	2003f404 	.word	0x2003f404
   d511c:	000d6e08 	.word	0x000d6e08
   d5120:	2003f400 	.word	0x2003f400
   d5124:	9a271c1e 	.word	0x9a271c1e

000d5128 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5128:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d512a:	2300      	movs	r3, #0
   d512c:	9300      	str	r3, [sp, #0]
   d512e:	461a      	mov	r2, r3
   d5130:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5134:	f7ff fc18 	bl	d4968 <system_ctrl_set_result>
}
   d5138:	b003      	add	sp, #12
   d513a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5140 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5140:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5142:	8843      	ldrh	r3, [r0, #2]
   d5144:	2b0a      	cmp	r3, #10
   d5146:	d008      	beq.n	d515a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5148:	2b50      	cmp	r3, #80	; 0x50
   d514a:	d10b      	bne.n	d5164 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d514c:	4b09      	ldr	r3, [pc, #36]	; (d5174 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d514e:	681b      	ldr	r3, [r3, #0]
   d5150:	b14b      	cbz	r3, d5166 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5152:	b003      	add	sp, #12
   d5154:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5158:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d515a:	f7ff ffe5 	bl	d5128 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d515e:	b003      	add	sp, #12
   d5160:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5164:	2300      	movs	r3, #0
   d5166:	9300      	str	r3, [sp, #0]
   d5168:	461a      	mov	r2, r3
   d516a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d516e:	f7ff fbfb 	bl	d4968 <system_ctrl_set_result>
}
   d5172:	e7f4      	b.n	d515e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5174:	2003e5e0 	.word	0x2003e5e0

000d5178 <module_user_init_hook>:
{
   d5178:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d517a:	4812      	ldr	r0, [pc, #72]	; (d51c4 <module_user_init_hook+0x4c>)
   d517c:	2100      	movs	r1, #0
   d517e:	f7ff fc9d 	bl	d4abc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d5182:	4b11      	ldr	r3, [pc, #68]	; (d51c8 <module_user_init_hook+0x50>)
   d5184:	681a      	ldr	r2, [r3, #0]
   d5186:	4b11      	ldr	r3, [pc, #68]	; (d51cc <module_user_init_hook+0x54>)
   d5188:	429a      	cmp	r2, r3
   d518a:	4b11      	ldr	r3, [pc, #68]	; (d51d0 <module_user_init_hook+0x58>)
   d518c:	bf0c      	ite	eq
   d518e:	2201      	moveq	r2, #1
   d5190:	2200      	movne	r2, #0
   d5192:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5194:	d001      	beq.n	d519a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d5196:	f7ff ffb1 	bl	d50fc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d519a:	f7ff fad3 	bl	d4744 <HAL_RNG_GetRandomNumber>
   d519e:	4604      	mov	r4, r0
    srand(seed);
   d51a0:	f001 fc66 	bl	d6a70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d51a4:	4b0b      	ldr	r3, [pc, #44]	; (d51d4 <module_user_init_hook+0x5c>)
   d51a6:	b113      	cbz	r3, d51ae <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d51a8:	4620      	mov	r0, r4
   d51aa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d51ae:	2100      	movs	r1, #0
   d51b0:	4808      	ldr	r0, [pc, #32]	; (d51d4 <module_user_init_hook+0x5c>)
   d51b2:	f7ff fc53 	bl	d4a5c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d51b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d51ba:	4807      	ldr	r0, [pc, #28]	; (d51d8 <module_user_init_hook+0x60>)
   d51bc:	2100      	movs	r1, #0
   d51be:	f7ff bbc9 	b.w	d4954 <system_ctrl_set_app_request_handler>
   d51c2:	bf00      	nop
   d51c4:	000d50a5 	.word	0x000d50a5
   d51c8:	2003f400 	.word	0x2003f400
   d51cc:	9a271c1e 	.word	0x9a271c1e
   d51d0:	2003e5dc 	.word	0x2003e5dc
   d51d4:	00000000 	.word	0x00000000
   d51d8:	000d5141 	.word	0x000d5141

000d51dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d51dc:	4770      	bx	lr

000d51de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d51de:	2000      	movs	r0, #0
   d51e0:	4770      	bx	lr

000d51e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d51e2:	b510      	push	{r4, lr}
   d51e4:	2110      	movs	r1, #16
   d51e6:	4604      	mov	r4, r0
   d51e8:	f000 fdd0 	bl	d5d8c <_ZdlPvj>
   d51ec:	4620      	mov	r0, r4
   d51ee:	bd10      	pop	{r4, pc}

000d51f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d51f0:	b508      	push	{r3, lr}
      { delete this; }
   d51f2:	f7ff fff6 	bl	d51e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d51f6:	bd08      	pop	{r3, pc}

000d51f8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d51f8:	b530      	push	{r4, r5, lr}
        type_(type) {
   d51fa:	2200      	movs	r2, #0
   d51fc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5200:	6002      	str	r2, [r0, #0]
   d5202:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5204:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5206:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5208:	680c      	ldr	r4, [r1, #0]
   d520a:	8085      	strh	r5, [r0, #4]
   d520c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d520e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5210:	bd30      	pop	{r4, r5, pc}

000d5212 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5212:	b510      	push	{r4, lr}
   d5214:	4604      	mov	r4, r0
    free((void*)msg_);
   d5216:	6800      	ldr	r0, [r0, #0]
   d5218:	f7ff fc30 	bl	d4a7c <free>
}
   d521c:	4620      	mov	r0, r4
   d521e:	bd10      	pop	{r4, pc}

000d5220 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5220:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5222:	68c4      	ldr	r4, [r0, #12]
   d5224:	b1f4      	cbz	r4, d5264 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5226:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5228:	2b02      	cmp	r3, #2
   d522a:	d103      	bne.n	d5234 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d522c:	f104 000c 	add.w	r0, r4, #12
   d5230:	f7ff ffef 	bl	d5212 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5234:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5236:	b135      	cbz	r5, d5246 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5238:	4628      	mov	r0, r5
   d523a:	f7ff ff12 	bl	d5062 <_ZNSt14_Function_baseD1Ev>
   d523e:	2110      	movs	r1, #16
   d5240:	4628      	mov	r0, r5
   d5242:	f000 fda3 	bl	d5d8c <_ZdlPvj>
   d5246:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5248:	b135      	cbz	r5, d5258 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d524a:	4628      	mov	r0, r5
   d524c:	f7ff ff09 	bl	d5062 <_ZNSt14_Function_baseD1Ev>
   d5250:	2110      	movs	r1, #16
   d5252:	4628      	mov	r0, r5
   d5254:	f000 fd9a 	bl	d5d8c <_ZdlPvj>
   d5258:	4620      	mov	r0, r4
   d525a:	2114      	movs	r1, #20
   d525c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5260:	f000 bd94 	b.w	d5d8c <_ZdlPvj>
   d5264:	bd38      	pop	{r3, r4, r5, pc}

000d5266 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5266:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5268:	460e      	mov	r6, r1
   d526a:	4604      	mov	r4, r0
   d526c:	f856 3b04 	ldr.w	r3, [r6], #4
   d5270:	9300      	str	r3, [sp, #0]
   d5272:	460d      	mov	r5, r1
   d5274:	a801      	add	r0, sp, #4
   d5276:	4631      	mov	r1, r6
   d5278:	f7ff fd93 	bl	d4da2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d527c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d527e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5280:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5282:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5284:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5286:	2300      	movs	r3, #0
   d5288:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d528a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d528c:	f7fe ff26 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5290:	4630      	mov	r0, r6
   d5292:	f7fe ff23 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5296:	4628      	mov	r0, r5
   d5298:	2108      	movs	r1, #8
   d529a:	f000 fd77 	bl	d5d8c <_ZdlPvj>
        return p;
    }
   d529e:	4620      	mov	r0, r4
   d52a0:	b002      	add	sp, #8
   d52a2:	bd70      	pop	{r4, r5, r6, pc}

000d52a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d52a4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d52a6:	b510      	push	{r4, lr}
      if (_M_empty())
   d52a8:	b90a      	cbnz	r2, d52ae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d52aa:	f000 fd73 	bl	d5d94 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d52ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52b2:	68c3      	ldr	r3, [r0, #12]
   d52b4:	4718      	bx	r3

000d52b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d52b6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d52b8:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d52ba:	f100 0110 	add.w	r1, r0, #16
   d52be:	f7ff fff1 	bl	d52a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d52c2:	bd08      	pop	{r3, pc}

000d52c4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d52c4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d52c6:	b510      	push	{r4, lr}
      if (_M_empty())
   d52c8:	b90a      	cbnz	r2, d52ce <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d52ca:	f000 fd63 	bl	d5d94 <_ZSt25__throw_bad_function_callv>
    }
   d52ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52d2:	68c3      	ldr	r3, [r0, #12]
   d52d4:	4718      	bx	r3

000d52d6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d52d6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d52d8:	6800      	ldr	r0, [r0, #0]
   d52da:	f100 0110 	add.w	r1, r0, #16
   d52de:	f7ff fff1 	bl	d52c4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d52e2:	bd08      	pop	{r3, pc}

000d52e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d52e4:	b538      	push	{r3, r4, r5, lr}
   d52e6:	2300      	movs	r3, #0
   d52e8:	4604      	mov	r4, r0
   d52ea:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d52ec:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d52ee:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d52f0:	f7fe fecf 	bl	d4092 <_Znwj>
   d52f4:	b128      	cbz	r0, d5302 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d52f6:	2301      	movs	r3, #1
   d52f8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d52fc:	4b02      	ldr	r3, [pc, #8]	; (d5308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d52fe:	6003      	str	r3, [r0, #0]
   d5300:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5302:	6020      	str	r0, [r4, #0]
	}
   d5304:	4620      	mov	r0, r4
   d5306:	bd38      	pop	{r3, r4, r5, pc}
   d5308:	000d6cb0 	.word	0x000d6cb0

000d530c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d530c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d530e:	2300      	movs	r3, #0
   d5310:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5312:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5314:	4604      	mov	r4, r0
   d5316:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5318:	b12b      	cbz	r3, d5326 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d531a:	2202      	movs	r2, #2
   d531c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d531e:	68eb      	ldr	r3, [r5, #12]
   d5320:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5322:	68ab      	ldr	r3, [r5, #8]
   d5324:	60a3      	str	r3, [r4, #8]
    }
   d5326:	4620      	mov	r0, r4
   d5328:	bd38      	pop	{r3, r4, r5, pc}
	...

000d532c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d532c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d532e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5330:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5332:	4668      	mov	r0, sp
   d5334:	f7ff ff60 	bl	d51f8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5338:	f04f 0302 	mov.w	r3, #2
   d533c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5340:	2a00      	cmp	r2, #0
   d5342:	d103      	bne.n	d534c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5344:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5348:	2900      	cmp	r1, #0
   d534a:	d1f7      	bne.n	d533c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d534c:	d125      	bne.n	d539a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d534e:	f104 050c 	add.w	r5, r4, #12
   d5352:	4669      	mov	r1, sp
   d5354:	4628      	mov	r0, r5
   d5356:	f7ff ff4f 	bl	d51f8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d535a:	f3bf 8f5b 	dmb	ish
   d535e:	2301      	movs	r3, #1
   d5360:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5362:	2000      	movs	r0, #0
   d5364:	f104 0308 	add.w	r3, r4, #8
   d5368:	f3bf 8f5b 	dmb	ish
   d536c:	e853 6f00 	ldrex	r6, [r3]
   d5370:	e843 0200 	strex	r2, r0, [r3]
   d5374:	2a00      	cmp	r2, #0
   d5376:	d1f9      	bne.n	d536c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5378:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d537c:	b16e      	cbz	r6, d539a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d537e:	f7ff fad9 	bl	d4934 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5382:	b178      	cbz	r0, d53a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5384:	4629      	mov	r1, r5
   d5386:	4630      	mov	r0, r6
   d5388:	f7ff ff8c 	bl	d52a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d538c:	4630      	mov	r0, r6
   d538e:	f7ff fe68 	bl	d5062 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5392:	2110      	movs	r1, #16
   d5394:	4630      	mov	r0, r6
   d5396:	f000 fcf9 	bl	d5d8c <_ZdlPvj>
        p_->setError(std::move(error));
   d539a:	4668      	mov	r0, sp
   d539c:	f7ff ff39 	bl	d5212 <_ZN8particle5ErrorD1Ev>
    }
   d53a0:	b009      	add	sp, #36	; 0x24
   d53a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d53a4:	4631      	mov	r1, r6
   d53a6:	a802      	add	r0, sp, #8
   d53a8:	f7ff ffb0 	bl	d530c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d53ac:	68e0      	ldr	r0, [r4, #12]
   d53ae:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d53b2:	b108      	cbz	r0, d53b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d53b4:	f001 fb80 	bl	d6ab8 <strdup>
        type_(type) {
   d53b8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d53ba:	2010      	movs	r0, #16
   d53bc:	f8ad 501c 	strh.w	r5, [sp, #28]
   d53c0:	f7fe fe67 	bl	d4092 <_Znwj>
   d53c4:	4605      	mov	r5, r0
   d53c6:	b1e8      	cbz	r0, d5404 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d53c8:	2700      	movs	r7, #0
   d53ca:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53cc:	2018      	movs	r0, #24
   d53ce:	f7fe fe60 	bl	d4092 <_Znwj>
   d53d2:	4604      	mov	r4, r0
   d53d4:	b188      	cbz	r0, d53fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d53d6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d53d8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d53da:	a802      	add	r0, sp, #8
   d53dc:	f7ff fe4a 	bl	d5074 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53e0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d53e2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d53e4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d53e8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d53ea:	a906      	add	r1, sp, #24
   d53ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d53ee:	60e3      	str	r3, [r4, #12]
   d53f0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d53f4:	9205      	str	r2, [sp, #20]
   d53f6:	f7ff feff 	bl	d51f8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d53fa:	4b08      	ldr	r3, [pc, #32]	; (d541c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d53fc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d53fe:	4b08      	ldr	r3, [pc, #32]	; (d5420 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5400:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5402:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5404:	a806      	add	r0, sp, #24
   d5406:	f7ff ff04 	bl	d5212 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d540a:	a802      	add	r0, sp, #8
   d540c:	f7ff fe29 	bl	d5062 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5410:	2200      	movs	r2, #0
   d5412:	4629      	mov	r1, r5
   d5414:	4803      	ldr	r0, [pc, #12]	; (d5424 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5416:	f7ff fa95 	bl	d4944 <application_thread_invoke>
   d541a:	e7b7      	b.n	d538c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d541c:	000d52b7 	.word	0x000d52b7
   d5420:	000d554d 	.word	0x000d554d
   d5424:	000d59f5 	.word	0x000d59f5

000d5428 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d542c:	b08a      	sub	sp, #40	; 0x28
   d542e:	4605      	mov	r5, r0
   d5430:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5434:	460c      	mov	r4, r1
   d5436:	4617      	mov	r7, r2
   d5438:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d543a:	f7ff faff 	bl	d4a3c <spark_cloud_flag_connected>
   d543e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5440:	4682      	mov	sl, r0
   d5442:	bb38      	cbnz	r0, d5494 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5444:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5448:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d544a:	a905      	add	r1, sp, #20
   d544c:	4630      	mov	r0, r6
   d544e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5452:	f7ff fed1 	bl	d51f8 <_ZN8particle5ErrorC1EOS0_>
   d5456:	2014      	movs	r0, #20
   d5458:	f7fe fe1b 	bl	d4092 <_Znwj>
   d545c:	4604      	mov	r4, r0
   d545e:	b148      	cbz	r0, d5474 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5460:	2302      	movs	r3, #2
   d5462:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5464:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5466:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d546a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d546c:	4631      	mov	r1, r6
   d546e:	300c      	adds	r0, #12
   d5470:	f7ff fec2 	bl	d51f8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5474:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5476:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5478:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d547c:	f7ff ff32 	bl	d52e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5480:	4630      	mov	r0, r6
   d5482:	f7ff fec6 	bl	d5212 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5486:	a805      	add	r0, sp, #20
   d5488:	f7ff fec3 	bl	d5212 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d548c:	4628      	mov	r0, r5
   d548e:	b00a      	add	sp, #40	; 0x28
   d5490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5494:	230c      	movs	r3, #12
   d5496:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d549a:	2014      	movs	r0, #20
   d549c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d54a0:	9307      	str	r3, [sp, #28]
   d54a2:	f7fe fdf6 	bl	d4092 <_Znwj>
   d54a6:	4601      	mov	r1, r0
   d54a8:	b128      	cbz	r0, d54b6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d54aa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d54ae:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d54b2:	f880 a001 	strb.w	sl, [r0, #1]
   d54b6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d54b8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d54ba:	f7ff ff13 	bl	d52e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d54be:	4b22      	ldr	r3, [pc, #136]	; (d5548 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d54c0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d54c2:	2008      	movs	r0, #8
   d54c4:	f7fe fde5 	bl	d4092 <_Znwj>
   d54c8:	4682      	mov	sl, r0
   d54ca:	b128      	cbz	r0, d54d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d54cc:	9b03      	ldr	r3, [sp, #12]
   d54ce:	f840 3b04 	str.w	r3, [r0], #4
   d54d2:	a904      	add	r1, sp, #16
   d54d4:	f7ff fc65 	bl	d4da2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d54d8:	9600      	str	r6, [sp, #0]
   d54da:	fa5f f389 	uxtb.w	r3, r9
   d54de:	4642      	mov	r2, r8
   d54e0:	4639      	mov	r1, r7
   d54e2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d54e4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d54e8:	f7ff fab0 	bl	d4a4c <spark_send_event>
   d54ec:	b9b8      	cbnz	r0, d551e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d54ee:	9b03      	ldr	r3, [sp, #12]
   d54f0:	785b      	ldrb	r3, [r3, #1]
   d54f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d54f6:	b993      	cbnz	r3, d551e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d54f8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d54fc:	a905      	add	r1, sp, #20
   d54fe:	a803      	add	r0, sp, #12
   d5500:	9205      	str	r2, [sp, #20]
   d5502:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5506:	f7ff ff11 	bl	d532c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d550a:	a805      	add	r0, sp, #20
   d550c:	f7ff fe81 	bl	d5212 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5510:	a805      	add	r0, sp, #20
   d5512:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5514:	f7ff fea7 	bl	d5266 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5518:	a806      	add	r0, sp, #24
   d551a:	f7fe fddf 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d551e:	9b03      	ldr	r3, [sp, #12]
   d5520:	9305      	str	r3, [sp, #20]
   d5522:	a904      	add	r1, sp, #16
   d5524:	a806      	add	r0, sp, #24
   d5526:	f7ff fc3c 	bl	d4da2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d552a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d552c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d552e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5530:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5532:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5534:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5536:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5538:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d553a:	f7fe fdcf 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d553e:	a804      	add	r0, sp, #16
   d5540:	f7fe fdcc 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5544:	e7a2      	b.n	d548c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5546:	bf00      	nop
   d5548:	000d5611 	.word	0x000d5611

000d554c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d554c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d554e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5550:	4605      	mov	r5, r0
	  switch (__op)
   d5552:	d007      	beq.n	d5564 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5554:	2a03      	cmp	r2, #3
   d5556:	d018      	beq.n	d558a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5558:	2a01      	cmp	r2, #1
   d555a:	d101      	bne.n	d5560 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d555c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d555e:	6003      	str	r3, [r0, #0]
	}
   d5560:	2000      	movs	r0, #0
   d5562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5564:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5566:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5568:	f7fe fd93 	bl	d4092 <_Znwj>
   d556c:	4604      	mov	r4, r0
   d556e:	b150      	cbz	r0, d5586 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5570:	4631      	mov	r1, r6
   d5572:	f7ff fecb 	bl	d530c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5576:	6930      	ldr	r0, [r6, #16]
   d5578:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d557c:	b108      	cbz	r0, d5582 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d557e:	f001 fa9b 	bl	d6ab8 <strdup>
        type_(type) {
   d5582:	6120      	str	r0, [r4, #16]
   d5584:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5586:	602c      	str	r4, [r5, #0]
	}
   d5588:	e7ea      	b.n	d5560 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d558a:	6804      	ldr	r4, [r0, #0]
   d558c:	2c00      	cmp	r4, #0
   d558e:	d0e7      	beq.n	d5560 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5590:	f104 0010 	add.w	r0, r4, #16
   d5594:	f7ff fe3d 	bl	d5212 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5598:	4620      	mov	r0, r4
   d559a:	f7ff fd62 	bl	d5062 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d559e:	2118      	movs	r1, #24
   d55a0:	4620      	mov	r0, r4
   d55a2:	f000 fbf3 	bl	d5d8c <_ZdlPvj>
   d55a6:	e7db      	b.n	d5560 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d55a8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d55a8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d55aa:	2300      	movs	r3, #0
   d55ac:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d55ae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d55b0:	4604      	mov	r4, r0
   d55b2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d55b4:	b12b      	cbz	r3, d55c2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d55b6:	2202      	movs	r2, #2
   d55b8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d55ba:	68eb      	ldr	r3, [r5, #12]
   d55bc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d55be:	68ab      	ldr	r3, [r5, #8]
   d55c0:	60a3      	str	r3, [r4, #8]
    }
   d55c2:	4620      	mov	r0, r4
   d55c4:	bd38      	pop	{r3, r4, r5, pc}

000d55c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d55c6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d55c8:	b570      	push	{r4, r5, r6, lr}
   d55ca:	4604      	mov	r4, r0
	  switch (__op)
   d55cc:	d007      	beq.n	d55de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d55ce:	2a03      	cmp	r2, #3
   d55d0:	d012      	beq.n	d55f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d55d2:	2a01      	cmp	r2, #1
   d55d4:	d101      	bne.n	d55da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d55d6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d55d8:	6003      	str	r3, [r0, #0]
	}
   d55da:	2000      	movs	r0, #0
   d55dc:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d55de:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d55e0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d55e2:	f7fe fd56 	bl	d4092 <_Znwj>
   d55e6:	4605      	mov	r5, r0
   d55e8:	b120      	cbz	r0, d55f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d55ea:	4631      	mov	r1, r6
   d55ec:	f7ff ffdc 	bl	d55a8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d55f0:	7c33      	ldrb	r3, [r6, #16]
   d55f2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d55f4:	6025      	str	r5, [r4, #0]
	}
   d55f6:	e7f0      	b.n	d55da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d55f8:	6804      	ldr	r4, [r0, #0]
   d55fa:	2c00      	cmp	r4, #0
   d55fc:	d0ed      	beq.n	d55da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d55fe:	4620      	mov	r0, r4
   d5600:	f7ff fd2f 	bl	d5062 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5604:	2114      	movs	r1, #20
   d5606:	4620      	mov	r0, r4
   d5608:	f000 fbc0 	bl	d5d8c <_ZdlPvj>
   d560c:	e7e5      	b.n	d55da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5610 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5610:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5612:	b089      	sub	sp, #36	; 0x24
   d5614:	4604      	mov	r4, r0
   d5616:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5618:	a801      	add	r0, sp, #4
   d561a:	4611      	mov	r1, r2
   d561c:	f7ff fe23 	bl	d5266 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5620:	b1a4      	cbz	r4, d564c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5622:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5624:	b11d      	cbz	r5, d562e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5626:	4628      	mov	r0, r5
   d5628:	f001 fa46 	bl	d6ab8 <strdup>
   d562c:	4605      	mov	r5, r0
   d562e:	a801      	add	r0, sp, #4
   d5630:	a903      	add	r1, sp, #12
        type_(type) {
   d5632:	9503      	str	r5, [sp, #12]
   d5634:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5638:	f7ff fe78 	bl	d532c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d563c:	a803      	add	r0, sp, #12
   d563e:	f7ff fde8 	bl	d5212 <_ZN8particle5ErrorD1Ev>
   d5642:	a802      	add	r0, sp, #8
   d5644:	f7fe fd4a 	bl	d40dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5648:	b009      	add	sp, #36	; 0x24
   d564a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d564c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d564e:	2301      	movs	r3, #1
   d5650:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5654:	2a00      	cmp	r2, #0
   d5656:	d103      	bne.n	d5660 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5658:	e8c5 3f41 	strexb	r1, r3, [r5]
   d565c:	2900      	cmp	r1, #0
   d565e:	d1f7      	bne.n	d5650 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5660:	d1ef      	bne.n	d5642 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5662:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5664:	f3bf 8f5b 	dmb	ish
   d5668:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d566a:	1d2b      	adds	r3, r5, #4
   d566c:	f3bf 8f5b 	dmb	ish
   d5670:	e853 6f00 	ldrex	r6, [r3]
   d5674:	e843 4200 	strex	r2, r4, [r3]
   d5678:	2a00      	cmp	r2, #0
   d567a:	d1f9      	bne.n	d5670 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d567c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5680:	2e00      	cmp	r6, #0
   d5682:	d0de      	beq.n	d5642 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5684:	4620      	mov	r0, r4
   d5686:	f7ff f955 	bl	d4934 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d568a:	4607      	mov	r7, r0
   d568c:	b160      	cbz	r0, d56a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d568e:	f105 010c 	add.w	r1, r5, #12
   d5692:	4630      	mov	r0, r6
   d5694:	f7ff fe16 	bl	d52c4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5698:	4630      	mov	r0, r6
   d569a:	f7ff fce2 	bl	d5062 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d569e:	2110      	movs	r1, #16
   d56a0:	4630      	mov	r0, r6
   d56a2:	f000 fb73 	bl	d5d8c <_ZdlPvj>
   d56a6:	e7cc      	b.n	d5642 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d56a8:	4631      	mov	r1, r6
   d56aa:	a803      	add	r0, sp, #12
   d56ac:	f7ff ff7c 	bl	d55a8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d56b0:	7b2b      	ldrb	r3, [r5, #12]
   d56b2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d56b6:	2010      	movs	r0, #16
   d56b8:	f7fe fceb 	bl	d4092 <_Znwj>
   d56bc:	4605      	mov	r5, r0
   d56be:	b1d0      	cbz	r0, d56f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d56c0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56c2:	2014      	movs	r0, #20
   d56c4:	f7fe fce5 	bl	d4092 <_Znwj>
   d56c8:	4604      	mov	r4, r0
   d56ca:	b178      	cbz	r0, d56ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d56cc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d56ce:	4601      	mov	r1, r0
   d56d0:	a803      	add	r0, sp, #12
   d56d2:	f7ff fccf 	bl	d5074 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56d6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d56d8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d56da:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56dc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d56de:	9205      	str	r2, [sp, #20]
   d56e0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d56e2:	60e3      	str	r3, [r4, #12]
   d56e4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d56e8:	9206      	str	r2, [sp, #24]
   d56ea:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d56ec:	4b06      	ldr	r3, [pc, #24]	; (d5708 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d56ee:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d56f0:	4b06      	ldr	r3, [pc, #24]	; (d570c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56f2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d56f4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d56f6:	a803      	add	r0, sp, #12
   d56f8:	f7ff fcb3 	bl	d5062 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d56fc:	2200      	movs	r2, #0
   d56fe:	4629      	mov	r1, r5
   d5700:	4803      	ldr	r0, [pc, #12]	; (d5710 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5702:	f7ff f91f 	bl	d4944 <application_thread_invoke>
   d5706:	e7c7      	b.n	d5698 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5708:	000d52d7 	.word	0x000d52d7
   d570c:	000d55c7 	.word	0x000d55c7
   d5710:	000d59f5 	.word	0x000d59f5

000d5714 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5714:	4770      	bx	lr

000d5716 <_ZN9IPAddressD0Ev>:
   d5716:	b510      	push	{r4, lr}
   d5718:	2118      	movs	r1, #24
   d571a:	4604      	mov	r4, r0
   d571c:	f000 fb36 	bl	d5d8c <_ZdlPvj>
   d5720:	4620      	mov	r0, r4
   d5722:	bd10      	pop	{r4, pc}

000d5724 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5724:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5726:	7d03      	ldrb	r3, [r0, #20]
   d5728:	2b06      	cmp	r3, #6
{
   d572a:	b08d      	sub	sp, #52	; 0x34
   d572c:	460e      	mov	r6, r1
   d572e:	f100 0704 	add.w	r7, r0, #4
   d5732:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5736:	d012      	beq.n	d575e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5738:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d573c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5740:	220a      	movs	r2, #10
   d5742:	4630      	mov	r0, r6
   d5744:	f7ff fb81 	bl	d4e4a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5748:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d574a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d574c:	d019      	beq.n	d5782 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d574e:	2c00      	cmp	r4, #0
   d5750:	d0f4      	beq.n	d573c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5752:	212e      	movs	r1, #46	; 0x2e
   d5754:	4630      	mov	r0, r6
   d5756:	f7ff fb5f 	bl	d4e18 <_ZN5Print5printEc>
   d575a:	4404      	add	r4, r0
   d575c:	e7ee      	b.n	d573c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d575e:	232f      	movs	r3, #47	; 0x2f
   d5760:	466a      	mov	r2, sp
   d5762:	4639      	mov	r1, r7
   d5764:	200a      	movs	r0, #10
		buf[0] = 0;
   d5766:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d576a:	f7ff f80b 	bl	d4784 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d576e:	4668      	mov	r0, sp
   d5770:	f001 f9bf 	bl	d6af2 <strlen>
   d5774:	6833      	ldr	r3, [r6, #0]
   d5776:	4602      	mov	r2, r0
   d5778:	68db      	ldr	r3, [r3, #12]
   d577a:	4669      	mov	r1, sp
   d577c:	4630      	mov	r0, r6
   d577e:	4798      	blx	r3
   d5780:	4604      	mov	r4, r0
    }
    return n;
}
   d5782:	4620      	mov	r0, r4
   d5784:	b00d      	add	sp, #52	; 0x34
   d5786:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5788 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5788:	b510      	push	{r4, lr}
   d578a:	4b05      	ldr	r3, [pc, #20]	; (d57a0 <_ZN9IPAddressC1Ev+0x18>)
   d578c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d578e:	2211      	movs	r2, #17
   d5790:	f840 3b04 	str.w	r3, [r0], #4
   d5794:	2100      	movs	r1, #0
   d5796:	f001 f963 	bl	d6a60 <memset>
}
   d579a:	4620      	mov	r0, r4
   d579c:	bd10      	pop	{r4, pc}
   d579e:	bf00      	nop
   d57a0:	000d6ccc 	.word	0x000d6ccc

000d57a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d57a4:	4603      	mov	r3, r0
   d57a6:	4a07      	ldr	r2, [pc, #28]	; (d57c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d57a8:	b510      	push	{r4, lr}
   d57aa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d57ae:	f101 0210 	add.w	r2, r1, #16
   d57b2:	f851 4b04 	ldr.w	r4, [r1], #4
   d57b6:	f843 4b04 	str.w	r4, [r3], #4
   d57ba:	4291      	cmp	r1, r2
   d57bc:	d1f9      	bne.n	d57b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d57be:	780a      	ldrb	r2, [r1, #0]
   d57c0:	701a      	strb	r2, [r3, #0]
}
   d57c2:	bd10      	pop	{r4, pc}
   d57c4:	000d6ccc 	.word	0x000d6ccc

000d57c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d57c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d57ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d57ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d57d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d57d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d57da:	2304      	movs	r3, #4
   d57dc:	6041      	str	r1, [r0, #4]
   d57de:	7503      	strb	r3, [r0, #20]
}
   d57e0:	bd10      	pop	{r4, pc}

000d57e2 <_ZN9IPAddressaSEPKh>:
{
   d57e2:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d57e4:	78cb      	ldrb	r3, [r1, #3]
   d57e6:	9300      	str	r3, [sp, #0]
   d57e8:	788b      	ldrb	r3, [r1, #2]
   d57ea:	784a      	ldrb	r2, [r1, #1]
   d57ec:	7809      	ldrb	r1, [r1, #0]
   d57ee:	f7ff ffeb 	bl	d57c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d57f2:	b002      	add	sp, #8
   d57f4:	bd10      	pop	{r4, pc}

000d57f6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d57f6:	7441      	strb	r1, [r0, #17]
}
   d57f8:	4770      	bx	lr

000d57fa <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d57fa:	4770      	bx	lr

000d57fc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d57fc:	4770      	bx	lr

000d57fe <_ZN9USBSerial4readEv>:
{
   d57fe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5800:	2100      	movs	r1, #0
   d5802:	7c00      	ldrb	r0, [r0, #16]
   d5804:	f7ff f866 	bl	d48d4 <HAL_USB_USART_Receive_Data>
}
   d5808:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d580c:	bd08      	pop	{r3, pc}

000d580e <_ZN9USBSerial4peekEv>:
{
   d580e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5810:	2101      	movs	r1, #1
   d5812:	7c00      	ldrb	r0, [r0, #16]
   d5814:	f7ff f85e 	bl	d48d4 <HAL_USB_USART_Receive_Data>
}
   d5818:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d581c:	bd08      	pop	{r3, pc}

000d581e <_ZN9USBSerial17availableForWriteEv>:
{
   d581e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5820:	7c00      	ldrb	r0, [r0, #16]
   d5822:	f7ff f84f 	bl	d48c4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5826:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d582a:	bd08      	pop	{r3, pc}

000d582c <_ZN9USBSerial9availableEv>:
{
   d582c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d582e:	7c00      	ldrb	r0, [r0, #16]
   d5830:	f7ff f840 	bl	d48b4 <HAL_USB_USART_Available_Data>
}
   d5834:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5838:	bd08      	pop	{r3, pc}

000d583a <_ZN9USBSerial5writeEh>:
{
   d583a:	b513      	push	{r0, r1, r4, lr}
   d583c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d583e:	7c00      	ldrb	r0, [r0, #16]
{
   d5840:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5842:	f7ff f83f 	bl	d48c4 <HAL_USB_USART_Available_Data_For_Write>
   d5846:	2800      	cmp	r0, #0
   d5848:	9901      	ldr	r1, [sp, #4]
   d584a:	dc01      	bgt.n	d5850 <_ZN9USBSerial5writeEh+0x16>
   d584c:	7c60      	ldrb	r0, [r4, #17]
   d584e:	b120      	cbz	r0, d585a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5850:	7c20      	ldrb	r0, [r4, #16]
   d5852:	f7ff f847 	bl	d48e4 <HAL_USB_USART_Send_Data>
   d5856:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d585a:	b002      	add	sp, #8
   d585c:	bd10      	pop	{r4, pc}

000d585e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d585e:	7c00      	ldrb	r0, [r0, #16]
   d5860:	f7ff b848 	b.w	d48f4 <HAL_USB_USART_Flush_Data>

000d5864 <_ZN9USBSerialD0Ev>:
   d5864:	b510      	push	{r4, lr}
   d5866:	2114      	movs	r1, #20
   d5868:	4604      	mov	r4, r0
   d586a:	f000 fa8f 	bl	d5d8c <_ZdlPvj>
   d586e:	4620      	mov	r0, r4
   d5870:	bd10      	pop	{r4, pc}
	...

000d5874 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5874:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d587a:	4604      	mov	r4, r0
   d587c:	4608      	mov	r0, r1
   d587e:	2100      	movs	r1, #0
   d5880:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5884:	4b04      	ldr	r3, [pc, #16]	; (d5898 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5886:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5888:	2301      	movs	r3, #1
  _serial = serial;
   d588a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d588c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d588e:	4611      	mov	r1, r2
   d5890:	f7ff f808 	bl	d48a4 <HAL_USB_USART_Init>
}
   d5894:	4620      	mov	r0, r4
   d5896:	bd10      	pop	{r4, pc}
   d5898:	000d6ce0 	.word	0x000d6ce0

000d589c <_Z19acquireSerialBufferv>:
{
   d589c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d589e:	2214      	movs	r2, #20
{
   d58a0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d58a2:	2100      	movs	r1, #0
   d58a4:	f001 f8dc 	bl	d6a60 <memset>
}
   d58a8:	4620      	mov	r0, r4
   d58aa:	bd10      	pop	{r4, pc}

000d58ac <_Z16_fetch_usbserialv>:
{
   d58ac:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d58ae:	4c0f      	ldr	r4, [pc, #60]	; (d58ec <_Z16_fetch_usbserialv+0x40>)
{
   d58b0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d58b2:	a803      	add	r0, sp, #12
   d58b4:	f7ff fff2 	bl	d589c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d58b8:	7821      	ldrb	r1, [r4, #0]
   d58ba:	f3bf 8f5b 	dmb	ish
   d58be:	f011 0101 	ands.w	r1, r1, #1
   d58c2:	d10f      	bne.n	d58e4 <_Z16_fetch_usbserialv+0x38>
   d58c4:	4620      	mov	r0, r4
   d58c6:	9101      	str	r1, [sp, #4]
   d58c8:	f7fe fbe9 	bl	d409e <__cxa_guard_acquire>
   d58cc:	9901      	ldr	r1, [sp, #4]
   d58ce:	b148      	cbz	r0, d58e4 <_Z16_fetch_usbserialv+0x38>
   d58d0:	aa03      	add	r2, sp, #12
   d58d2:	4807      	ldr	r0, [pc, #28]	; (d58f0 <_Z16_fetch_usbserialv+0x44>)
   d58d4:	f7ff ffce 	bl	d5874 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d58d8:	4620      	mov	r0, r4
   d58da:	f7fe fbe5 	bl	d40a8 <__cxa_guard_release>
   d58de:	4805      	ldr	r0, [pc, #20]	; (d58f4 <_Z16_fetch_usbserialv+0x48>)
   d58e0:	f001 f8aa 	bl	d6a38 <atexit>
	return _usbserial;
}
   d58e4:	4802      	ldr	r0, [pc, #8]	; (d58f0 <_Z16_fetch_usbserialv+0x44>)
   d58e6:	b008      	add	sp, #32
   d58e8:	bd10      	pop	{r4, pc}
   d58ea:	bf00      	nop
   d58ec:	2003e5e4 	.word	0x2003e5e4
   d58f0:	2003e5e8 	.word	0x2003e5e8
   d58f4:	000d57fb 	.word	0x000d57fb

000d58f8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d58f8:	f7fe bf1c 	b.w	d4734 <HAL_Interrupts_Disable_All>

000d58fc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d58fc:	f7fe bf12 	b.w	d4724 <HAL_Interrupts_Enable_All>

000d5900 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5900:	4770      	bx	lr

000d5902 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5902:	7441      	strb	r1, [r0, #17]
}
   d5904:	4770      	bx	lr

000d5906 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5906:	4770      	bx	lr

000d5908 <_ZN11USARTSerial17availableForWriteEv>:
{
   d5908:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d590a:	7c00      	ldrb	r0, [r0, #16]
   d590c:	f7fe ff7a 	bl	d4804 <hal_usart_available_data_for_write>
}
   d5910:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5914:	bd08      	pop	{r3, pc}

000d5916 <_ZN11USARTSerial9availableEv>:
{
   d5916:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5918:	7c00      	ldrb	r0, [r0, #16]
   d591a:	f7fe ff4b 	bl	d47b4 <hal_usart_available>
}
   d591e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5922:	bd08      	pop	{r3, pc}

000d5924 <_ZN11USARTSerial4peekEv>:
{
   d5924:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5926:	7c00      	ldrb	r0, [r0, #16]
   d5928:	f7fe ff54 	bl	d47d4 <hal_usart_peek>
}
   d592c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5930:	bd08      	pop	{r3, pc}

000d5932 <_ZN11USARTSerial4readEv>:
{
   d5932:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5934:	7c00      	ldrb	r0, [r0, #16]
   d5936:	f7fe ff45 	bl	d47c4 <hal_usart_read>
}
   d593a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d593e:	bd08      	pop	{r3, pc}

000d5940 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d5940:	7c00      	ldrb	r0, [r0, #16]
   d5942:	f7fe bf4f 	b.w	d47e4 <hal_usart_flush>

000d5946 <_ZN11USARTSerial5writeEh>:
{
   d5946:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5948:	7c45      	ldrb	r5, [r0, #17]
{
   d594a:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d594c:	b12d      	cbz	r5, d595a <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d594e:	7c20      	ldrb	r0, [r4, #16]
}
   d5950:	b003      	add	sp, #12
   d5952:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5956:	f7fe bf25 	b.w	d47a4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d595a:	7c00      	ldrb	r0, [r0, #16]
   d595c:	9101      	str	r1, [sp, #4]
   d595e:	f7fe ff51 	bl	d4804 <hal_usart_available_data_for_write>
   d5962:	2800      	cmp	r0, #0
   d5964:	9901      	ldr	r1, [sp, #4]
   d5966:	dcf2      	bgt.n	d594e <_ZN11USARTSerial5writeEh+0x8>
}
   d5968:	4628      	mov	r0, r5
   d596a:	b003      	add	sp, #12
   d596c:	bd30      	pop	{r4, r5, pc}

000d596e <_ZN11USARTSerialD0Ev>:
   d596e:	b510      	push	{r4, lr}
   d5970:	2114      	movs	r1, #20
   d5972:	4604      	mov	r4, r0
   d5974:	f000 fa0a 	bl	d5d8c <_ZdlPvj>
   d5978:	4620      	mov	r0, r4
   d597a:	bd10      	pop	{r4, pc}

000d597c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d597c:	b510      	push	{r4, lr}
   d597e:	f04f 0c00 	mov.w	ip, #0
   d5982:	4604      	mov	r4, r0
   d5984:	4608      	mov	r0, r1
   d5986:	4611      	mov	r1, r2
   d5988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d598c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5990:	4a04      	ldr	r2, [pc, #16]	; (d59a4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5992:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5994:	2201      	movs	r2, #1
  _serial = serial;
   d5996:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5998:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d599a:	461a      	mov	r2, r3
   d599c:	f7fe fefa 	bl	d4794 <hal_usart_init>
}
   d59a0:	4620      	mov	r0, r4
   d59a2:	bd10      	pop	{r4, pc}
   d59a4:	000d6d10 	.word	0x000d6d10

000d59a8 <_Z22__fetch_global_Serial1v>:
{
   d59a8:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d59aa:	4c0d      	ldr	r4, [pc, #52]	; (d59e0 <_Z22__fetch_global_Serial1v+0x38>)
   d59ac:	7821      	ldrb	r1, [r4, #0]
   d59ae:	f3bf 8f5b 	dmb	ish
   d59b2:	f011 0101 	ands.w	r1, r1, #1
   d59b6:	d110      	bne.n	d59da <_Z22__fetch_global_Serial1v+0x32>
   d59b8:	4620      	mov	r0, r4
   d59ba:	9101      	str	r1, [sp, #4]
   d59bc:	f7fe fb6f 	bl	d409e <__cxa_guard_acquire>
   d59c0:	9901      	ldr	r1, [sp, #4]
   d59c2:	b150      	cbz	r0, d59da <_Z22__fetch_global_Serial1v+0x32>
   d59c4:	4b07      	ldr	r3, [pc, #28]	; (d59e4 <_Z22__fetch_global_Serial1v+0x3c>)
   d59c6:	4a08      	ldr	r2, [pc, #32]	; (d59e8 <_Z22__fetch_global_Serial1v+0x40>)
   d59c8:	4808      	ldr	r0, [pc, #32]	; (d59ec <_Z22__fetch_global_Serial1v+0x44>)
   d59ca:	f7ff ffd7 	bl	d597c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d59ce:	4620      	mov	r0, r4
   d59d0:	f7fe fb6a 	bl	d40a8 <__cxa_guard_release>
   d59d4:	4806      	ldr	r0, [pc, #24]	; (d59f0 <_Z22__fetch_global_Serial1v+0x48>)
   d59d6:	f001 f82f 	bl	d6a38 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d59da:	4804      	ldr	r0, [pc, #16]	; (d59ec <_Z22__fetch_global_Serial1v+0x44>)
   d59dc:	b002      	add	sp, #8
   d59de:	bd10      	pop	{r4, pc}
   d59e0:	2003e5fc 	.word	0x2003e5fc
   d59e4:	2003e684 	.word	0x2003e684
   d59e8:	2003e600 	.word	0x2003e600
   d59ec:	2003e708 	.word	0x2003e708
   d59f0:	000d5907 	.word	0x000d5907

000d59f4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d59f4:	b510      	push	{r4, lr}
      if (_M_empty())
   d59f6:	6883      	ldr	r3, [r0, #8]
   d59f8:	4604      	mov	r4, r0
   d59fa:	b90b      	cbnz	r3, d5a00 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d59fc:	f000 f9ca 	bl	d5d94 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5a00:	68c3      	ldr	r3, [r0, #12]
   d5a02:	4798      	blx	r3
      if (_M_manager)
   d5a04:	68a3      	ldr	r3, [r4, #8]
   d5a06:	b11b      	cbz	r3, d5a10 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a08:	2203      	movs	r2, #3
   d5a0a:	4621      	mov	r1, r4
   d5a0c:	4620      	mov	r0, r4
   d5a0e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5a10:	4620      	mov	r0, r4
   d5a12:	2110      	movs	r1, #16
}
   d5a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5a18:	f000 b9b8 	b.w	d5d8c <_ZdlPvj>

000d5a1c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5a1c:	4770      	bx	lr

000d5a1e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a20:	4606      	mov	r6, r0
   d5a22:	4615      	mov	r5, r2
   d5a24:	460c      	mov	r4, r1
   d5a26:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5a28:	42bc      	cmp	r4, r7
   d5a2a:	d006      	beq.n	d5a3a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5a2c:	6833      	ldr	r3, [r6, #0]
   d5a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5a32:	689b      	ldr	r3, [r3, #8]
   d5a34:	4630      	mov	r0, r6
   d5a36:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5a38:	e7f6      	b.n	d5a28 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5a3a:	4628      	mov	r0, r5
   d5a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a3e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5a3e:	7c00      	ldrb	r0, [r0, #16]
   d5a40:	2200      	movs	r2, #0
   d5a42:	f7fe bee7 	b.w	d4814 <hal_i2c_write>

000d5a46 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5a46:	7c00      	ldrb	r0, [r0, #16]
   d5a48:	2100      	movs	r1, #0
   d5a4a:	f7fe beeb 	b.w	d4824 <hal_i2c_available>

000d5a4e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5a4e:	7c00      	ldrb	r0, [r0, #16]
   d5a50:	2100      	movs	r1, #0
   d5a52:	f7fe beef 	b.w	d4834 <hal_i2c_read>

000d5a56 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5a56:	7c00      	ldrb	r0, [r0, #16]
   d5a58:	2100      	movs	r1, #0
   d5a5a:	f7fe bef3 	b.w	d4844 <hal_i2c_peek>

000d5a5e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5a5e:	7c00      	ldrb	r0, [r0, #16]
   d5a60:	2100      	movs	r1, #0
   d5a62:	f7fe bef7 	b.w	d4854 <hal_i2c_flush>

000d5a66 <_ZN7TwoWireD0Ev>:
   d5a66:	b510      	push	{r4, lr}
   d5a68:	2114      	movs	r1, #20
   d5a6a:	4604      	mov	r4, r0
   d5a6c:	f000 f98e 	bl	d5d8c <_ZdlPvj>
   d5a70:	4620      	mov	r0, r4
   d5a72:	bd10      	pop	{r4, pc}

000d5a74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5a74:	b510      	push	{r4, lr}
   d5a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a7a:	4604      	mov	r4, r0
   d5a7c:	4608      	mov	r0, r1
   d5a7e:	2100      	movs	r1, #0
   d5a80:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5a84:	4b03      	ldr	r3, [pc, #12]	; (d5a94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5a86:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5a88:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5a8a:	4611      	mov	r1, r2
   d5a8c:	f7fe fef2 	bl	d4874 <hal_i2c_init>
}
   d5a90:	4620      	mov	r0, r4
   d5a92:	bd10      	pop	{r4, pc}
   d5a94:	000d6d40 	.word	0x000d6d40

000d5a98 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5a98:	2200      	movs	r2, #0
   d5a9a:	6840      	ldr	r0, [r0, #4]
   d5a9c:	4611      	mov	r1, r2
   d5a9e:	f7fe bf85 	b.w	d49ac <network_ready>

000d5aa2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5aa2:	2200      	movs	r2, #0
   d5aa4:	6840      	ldr	r0, [r0, #4]
   d5aa6:	4611      	mov	r1, r2
   d5aa8:	f7fe bfa0 	b.w	d49ec <network_listening>

000d5aac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5aac:	2200      	movs	r2, #0
   d5aae:	6840      	ldr	r0, [r0, #4]
   d5ab0:	4611      	mov	r1, r2
   d5ab2:	f7fe bfab 	b.w	d4a0c <network_get_listen_timeout>

000d5ab6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5ab6:	6840      	ldr	r0, [r0, #4]
   d5ab8:	2200      	movs	r2, #0
   d5aba:	f7fe bf9f 	b.w	d49fc <network_set_listen_timeout>

000d5abe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5abe:	6840      	ldr	r0, [r0, #4]
   d5ac0:	2200      	movs	r2, #0
   d5ac2:	f081 0101 	eor.w	r1, r1, #1
   d5ac6:	f7fe bf89 	b.w	d49dc <network_listen>

000d5aca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5aca:	2300      	movs	r3, #0
   d5acc:	6840      	ldr	r0, [r0, #4]
   d5ace:	461a      	mov	r2, r3
   d5ad0:	4619      	mov	r1, r3
   d5ad2:	f7fe bf7b 	b.w	d49cc <network_off>

000d5ad6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5ad6:	2300      	movs	r3, #0
   d5ad8:	6840      	ldr	r0, [r0, #4]
   d5ada:	461a      	mov	r2, r3
   d5adc:	4619      	mov	r1, r3
   d5ade:	f7fe bf6d 	b.w	d49bc <network_on>

000d5ae2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5ae2:	2200      	movs	r2, #0
   d5ae4:	6840      	ldr	r0, [r0, #4]
   d5ae6:	4611      	mov	r1, r2
   d5ae8:	f7fe bf50 	b.w	d498c <network_connecting>

000d5aec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5aec:	6840      	ldr	r0, [r0, #4]
   d5aee:	2200      	movs	r2, #0
   d5af0:	2102      	movs	r1, #2
   d5af2:	f7fe bf53 	b.w	d499c <network_disconnect>

000d5af6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5af6:	2300      	movs	r3, #0
   d5af8:	6840      	ldr	r0, [r0, #4]
   d5afa:	461a      	mov	r2, r3
   d5afc:	f7fe bf3e 	b.w	d497c <network_connect>

000d5b00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5b00:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5b02:	2204      	movs	r2, #4
   d5b04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5b06:	4a02      	ldr	r2, [pc, #8]	; (d5b10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5b08:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5b0a:	4770      	bx	lr
   d5b0c:	2003e71c 	.word	0x2003e71c
   d5b10:	000d6d68 	.word	0x000d6d68

000d5b14 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5b14:	2300      	movs	r3, #0
   d5b16:	6840      	ldr	r0, [r0, #4]
   d5b18:	461a      	mov	r2, r3
   d5b1a:	f7fe bf2f 	b.w	d497c <network_connect>

000d5b1e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5b1e:	6840      	ldr	r0, [r0, #4]
   d5b20:	2200      	movs	r2, #0
   d5b22:	2102      	movs	r1, #2
   d5b24:	f7fe bf3a 	b.w	d499c <network_disconnect>

000d5b28 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5b28:	2200      	movs	r2, #0
   d5b2a:	6840      	ldr	r0, [r0, #4]
   d5b2c:	4611      	mov	r1, r2
   d5b2e:	f7fe bf2d 	b.w	d498c <network_connecting>

000d5b32 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5b32:	2200      	movs	r2, #0
   d5b34:	6840      	ldr	r0, [r0, #4]
   d5b36:	4611      	mov	r1, r2
   d5b38:	f7fe bf38 	b.w	d49ac <network_ready>

000d5b3c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5b3c:	2300      	movs	r3, #0
   d5b3e:	6840      	ldr	r0, [r0, #4]
   d5b40:	461a      	mov	r2, r3
   d5b42:	4619      	mov	r1, r3
   d5b44:	f7fe bf3a 	b.w	d49bc <network_on>

000d5b48 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5b48:	2300      	movs	r3, #0
   d5b4a:	6840      	ldr	r0, [r0, #4]
   d5b4c:	461a      	mov	r2, r3
   d5b4e:	4619      	mov	r1, r3
   d5b50:	f7fe bf3c 	b.w	d49cc <network_off>

000d5b54 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5b54:	6840      	ldr	r0, [r0, #4]
   d5b56:	2100      	movs	r1, #0
   d5b58:	f7fe bf60 	b.w	d4a1c <network_is_on>

000d5b5c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5b5c:	6840      	ldr	r0, [r0, #4]
   d5b5e:	2100      	movs	r1, #0
   d5b60:	f7fe bf64 	b.w	d4a2c <network_is_off>

000d5b64 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5b64:	6840      	ldr	r0, [r0, #4]
   d5b66:	2200      	movs	r2, #0
   d5b68:	f081 0101 	eor.w	r1, r1, #1
   d5b6c:	f7fe bf36 	b.w	d49dc <network_listen>

000d5b70 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5b70:	6840      	ldr	r0, [r0, #4]
   d5b72:	2200      	movs	r2, #0
   d5b74:	f7fe bf42 	b.w	d49fc <network_set_listen_timeout>

000d5b78 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5b78:	2200      	movs	r2, #0
   d5b7a:	6840      	ldr	r0, [r0, #4]
   d5b7c:	4611      	mov	r1, r2
   d5b7e:	f7fe bf45 	b.w	d4a0c <network_get_listen_timeout>

000d5b82 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5b82:	2200      	movs	r2, #0
   d5b84:	6840      	ldr	r0, [r0, #4]
   d5b86:	4611      	mov	r1, r2
   d5b88:	f7fe bf30 	b.w	d49ec <network_listening>

000d5b8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5b90:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5b92:	b095      	sub	sp, #84	; 0x54
   d5b94:	4616      	mov	r6, r2
   d5b96:	460d      	mov	r5, r1
   d5b98:	4607      	mov	r7, r0
    IPAddress addr;
   d5b9a:	f7ff fdf5 	bl	d5788 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5b9e:	4621      	mov	r1, r4
   d5ba0:	2218      	movs	r2, #24
   d5ba2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5ba4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5ba6:	f000 ff5b 	bl	d6a60 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5baa:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5bac:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5bb0:	4621      	mov	r1, r4
   d5bb2:	466b      	mov	r3, sp
   d5bb4:	aa0c      	add	r2, sp, #48	; 0x30
   d5bb6:	4630      	mov	r0, r6
   d5bb8:	f7fe fd9c 	bl	d46f4 <netdb_getaddrinfo>
    if (!r) {
   d5bbc:	4604      	mov	r4, r0
   d5bbe:	2800      	cmp	r0, #0
   d5bc0:	d146      	bne.n	d5c50 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5bc2:	4602      	mov	r2, r0
   d5bc4:	2101      	movs	r1, #1
   d5bc6:	6868      	ldr	r0, [r5, #4]
   d5bc8:	f7fe fef0 	bl	d49ac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5bcc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5bce:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5bd0:	4622      	mov	r2, r4
   d5bd2:	6868      	ldr	r0, [r5, #4]
   d5bd4:	f7fe feea 	bl	d49ac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5bd8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5bda:	4681      	mov	r9, r0
        bool ok = false;
   d5bdc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5bde:	2e00      	cmp	r6, #0
   d5be0:	d036      	beq.n	d5c50 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5be2:	2900      	cmp	r1, #0
   d5be4:	d134      	bne.n	d5c50 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5be6:	6873      	ldr	r3, [r6, #4]
   d5be8:	2b02      	cmp	r3, #2
   d5bea:	d003      	beq.n	d5bf4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5bec:	2b0a      	cmp	r3, #10
   d5bee:	d00b      	beq.n	d5c08 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5bf0:	69f6      	ldr	r6, [r6, #28]
   d5bf2:	e7f4      	b.n	d5bde <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5bf4:	f1b8 0f00 	cmp.w	r8, #0
   d5bf8:	d004      	beq.n	d5c04 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5bfa:	6971      	ldr	r1, [r6, #20]
   d5bfc:	4638      	mov	r0, r7
   d5bfe:	3104      	adds	r1, #4
   d5c00:	f7ff fdef 	bl	d57e2 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5c04:	4641      	mov	r1, r8
   d5c06:	e7f3      	b.n	d5bf0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5c08:	f1b9 0f00 	cmp.w	r9, #0
   d5c0c:	d101      	bne.n	d5c12 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5c0e:	4649      	mov	r1, r9
   d5c10:	e7ee      	b.n	d5bf0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5c12:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5c14:	2210      	movs	r2, #16
   d5c16:	a801      	add	r0, sp, #4
   d5c18:	f000 ff22 	bl	d6a60 <memset>
                    a.v = 6;
   d5c1c:	2306      	movs	r3, #6
   d5c1e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5c22:	ad01      	add	r5, sp, #4
   d5c24:	f104 0308 	add.w	r3, r4, #8
   d5c28:	3418      	adds	r4, #24
   d5c2a:	6818      	ldr	r0, [r3, #0]
   d5c2c:	6859      	ldr	r1, [r3, #4]
   d5c2e:	462a      	mov	r2, r5
   d5c30:	c203      	stmia	r2!, {r0, r1}
   d5c32:	3308      	adds	r3, #8
   d5c34:	42a3      	cmp	r3, r4
   d5c36:	4615      	mov	r5, r2
   d5c38:	d1f7      	bne.n	d5c2a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5c3a:	a901      	add	r1, sp, #4
   d5c3c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5c3e:	ad07      	add	r5, sp, #28
   d5c40:	f7ff fdb0 	bl	d57a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c46:	1d3c      	adds	r4, r7, #4
   d5c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c4a:	682b      	ldr	r3, [r5, #0]
   d5c4c:	7023      	strb	r3, [r4, #0]
   d5c4e:	e7de      	b.n	d5c0e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5c50:	9800      	ldr	r0, [sp, #0]
   d5c52:	f7fe fd47 	bl	d46e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5c56:	4638      	mov	r0, r7
   d5c58:	b015      	add	sp, #84	; 0x54
   d5c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5c60 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5c60:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5c62:	4a03      	ldr	r2, [pc, #12]	; (d5c70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5c64:	601a      	str	r2, [r3, #0]
   d5c66:	2200      	movs	r2, #0
   d5c68:	605a      	str	r2, [r3, #4]

} // spark
   d5c6a:	4770      	bx	lr
   d5c6c:	2003e724 	.word	0x2003e724
   d5c70:	000d6da4 	.word	0x000d6da4

000d5c74 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5c74:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5c76:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5c78:	d902      	bls.n	d5c80 <pinAvailable+0xc>
    return false;
   d5c7a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5c7c:	b002      	add	sp, #8
   d5c7e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5c80:	f1a0 030b 	sub.w	r3, r0, #11
   d5c84:	2b02      	cmp	r3, #2
   d5c86:	d81a      	bhi.n	d5cbe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5c88:	4c17      	ldr	r4, [pc, #92]	; (d5ce8 <pinAvailable+0x74>)
   d5c8a:	7821      	ldrb	r1, [r4, #0]
   d5c8c:	f3bf 8f5b 	dmb	ish
   d5c90:	f011 0101 	ands.w	r1, r1, #1
   d5c94:	d10b      	bne.n	d5cae <pinAvailable+0x3a>
   d5c96:	4620      	mov	r0, r4
   d5c98:	9101      	str	r1, [sp, #4]
   d5c9a:	f7fe fa00 	bl	d409e <__cxa_guard_acquire>
   d5c9e:	9901      	ldr	r1, [sp, #4]
   d5ca0:	b128      	cbz	r0, d5cae <pinAvailable+0x3a>
   d5ca2:	4812      	ldr	r0, [pc, #72]	; (d5cec <pinAvailable+0x78>)
   d5ca4:	f7fe ff50 	bl	d4b48 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5ca8:	4620      	mov	r0, r4
   d5caa:	f7fe f9fd 	bl	d40a8 <__cxa_guard_release>
   d5cae:	4b0f      	ldr	r3, [pc, #60]	; (d5cec <pinAvailable+0x78>)
   d5cb0:	7818      	ldrb	r0, [r3, #0]
   d5cb2:	f7fe fdef 	bl	d4894 <hal_spi_is_enabled>
   d5cb6:	2800      	cmp	r0, #0
   d5cb8:	d1df      	bne.n	d5c7a <pinAvailable+0x6>
  return true; // 'pin' is available
   d5cba:	2001      	movs	r0, #1
   d5cbc:	e7de      	b.n	d5c7c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5cbe:	2801      	cmp	r0, #1
   d5cc0:	d809      	bhi.n	d5cd6 <pinAvailable+0x62>
   d5cc2:	f000 f83f 	bl	d5d44 <_Z19__fetch_global_Wirev>
   d5cc6:	2100      	movs	r1, #0
   d5cc8:	7c00      	ldrb	r0, [r0, #16]
   d5cca:	f7fe fdcb 	bl	d4864 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5cce:	f080 0001 	eor.w	r0, r0, #1
   d5cd2:	b2c0      	uxtb	r0, r0
   d5cd4:	e7d2      	b.n	d5c7c <pinAvailable+0x8>
   d5cd6:	3809      	subs	r0, #9
   d5cd8:	2801      	cmp	r0, #1
   d5cda:	d8ee      	bhi.n	d5cba <pinAvailable+0x46>
   d5cdc:	f7ff fe64 	bl	d59a8 <_Z22__fetch_global_Serial1v>
   d5ce0:	7c00      	ldrb	r0, [r0, #16]
   d5ce2:	f7fe fd87 	bl	d47f4 <hal_usart_is_enabled>
   d5ce6:	e7f2      	b.n	d5cce <pinAvailable+0x5a>
   d5ce8:	2003e72c 	.word	0x2003e72c
   d5cec:	2003e730 	.word	0x2003e730

000d5cf0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5cf0:	2823      	cmp	r0, #35	; 0x23
{
   d5cf2:	b538      	push	{r3, r4, r5, lr}
   d5cf4:	4604      	mov	r4, r0
   d5cf6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5cf8:	d80a      	bhi.n	d5d10 <pinMode+0x20>
   d5cfa:	29ff      	cmp	r1, #255	; 0xff
   d5cfc:	d008      	beq.n	d5d10 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5cfe:	f7ff ffb9 	bl	d5c74 <pinAvailable>
   d5d02:	b128      	cbz	r0, d5d10 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5d04:	4629      	mov	r1, r5
   d5d06:	4620      	mov	r0, r4
}
   d5d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5d0c:	f7fe bd02 	b.w	d4714 <HAL_Pin_Mode>
}
   d5d10:	bd38      	pop	{r3, r4, r5, pc}

000d5d12 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5d12:	4770      	bx	lr

000d5d14 <_Z17acquireWireBufferv>:
{
   d5d14:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5d16:	2300      	movs	r3, #0
   d5d18:	2520      	movs	r5, #32
   d5d1a:	8043      	strh	r3, [r0, #2]
   d5d1c:	2314      	movs	r3, #20
{
   d5d1e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5d20:	8003      	strh	r3, [r0, #0]
   d5d22:	6085      	str	r5, [r0, #8]
   d5d24:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5d26:	4906      	ldr	r1, [pc, #24]	; (d5d40 <_Z17acquireWireBufferv+0x2c>)
   d5d28:	4628      	mov	r0, r5
   d5d2a:	f000 f831 	bl	d5d90 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5d2e:	4904      	ldr	r1, [pc, #16]	; (d5d40 <_Z17acquireWireBufferv+0x2c>)
	};
   d5d30:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5d32:	4628      	mov	r0, r5
   d5d34:	f000 f82c 	bl	d5d90 <_ZnajRKSt9nothrow_t>
	};
   d5d38:	60e0      	str	r0, [r4, #12]
}
   d5d3a:	4620      	mov	r0, r4
   d5d3c:	bd38      	pop	{r3, r4, r5, pc}
   d5d3e:	bf00      	nop
   d5d40:	000d6dd8 	.word	0x000d6dd8

000d5d44 <_Z19__fetch_global_Wirev>:
{
   d5d44:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5d46:	4d0e      	ldr	r5, [pc, #56]	; (d5d80 <_Z19__fetch_global_Wirev+0x3c>)
   d5d48:	7829      	ldrb	r1, [r5, #0]
   d5d4a:	f3bf 8f5b 	dmb	ish
   d5d4e:	f011 0401 	ands.w	r4, r1, #1
{
   d5d52:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5d54:	d111      	bne.n	d5d7a <_Z19__fetch_global_Wirev+0x36>
   d5d56:	4628      	mov	r0, r5
   d5d58:	f7fe f9a1 	bl	d409e <__cxa_guard_acquire>
   d5d5c:	b168      	cbz	r0, d5d7a <_Z19__fetch_global_Wirev+0x36>
   d5d5e:	a801      	add	r0, sp, #4
   d5d60:	f7ff ffd8 	bl	d5d14 <_Z17acquireWireBufferv>
   d5d64:	aa01      	add	r2, sp, #4
   d5d66:	4621      	mov	r1, r4
   d5d68:	4806      	ldr	r0, [pc, #24]	; (d5d84 <_Z19__fetch_global_Wirev+0x40>)
   d5d6a:	f7ff fe83 	bl	d5a74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5d6e:	4628      	mov	r0, r5
   d5d70:	f7fe f99a 	bl	d40a8 <__cxa_guard_release>
   d5d74:	4804      	ldr	r0, [pc, #16]	; (d5d88 <_Z19__fetch_global_Wirev+0x44>)
   d5d76:	f000 fe5f 	bl	d6a38 <atexit>
	return wire;
}
   d5d7a:	4802      	ldr	r0, [pc, #8]	; (d5d84 <_Z19__fetch_global_Wirev+0x40>)
   d5d7c:	b007      	add	sp, #28
   d5d7e:	bd30      	pop	{r4, r5, pc}
   d5d80:	2003e73c 	.word	0x2003e73c
   d5d84:	2003e740 	.word	0x2003e740
   d5d88:	000d5d13 	.word	0x000d5d13

000d5d8c <_ZdlPvj>:
   d5d8c:	f7fe b985 	b.w	d409a <_ZdlPv>

000d5d90 <_ZnajRKSt9nothrow_t>:
   d5d90:	f7fe b981 	b.w	d4096 <_Znaj>

000d5d94 <_ZSt25__throw_bad_function_callv>:
   d5d94:	b508      	push	{r3, lr}
   d5d96:	f7fe fe81 	bl	d4a9c <abort>
	...

000d5d9c <__aeabi_drsub>:
   d5d9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5da0:	e002      	b.n	d5da8 <__adddf3>
   d5da2:	bf00      	nop

000d5da4 <__aeabi_dsub>:
   d5da4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5da8 <__adddf3>:
   d5da8:	b530      	push	{r4, r5, lr}
   d5daa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5dae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5db2:	ea94 0f05 	teq	r4, r5
   d5db6:	bf08      	it	eq
   d5db8:	ea90 0f02 	teqeq	r0, r2
   d5dbc:	bf1f      	itttt	ne
   d5dbe:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5dc2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5dc6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5dca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5dce:	f000 80e2 	beq.w	d5f96 <__adddf3+0x1ee>
   d5dd2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5dd6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5dda:	bfb8      	it	lt
   d5ddc:	426d      	neglt	r5, r5
   d5dde:	dd0c      	ble.n	d5dfa <__adddf3+0x52>
   d5de0:	442c      	add	r4, r5
   d5de2:	ea80 0202 	eor.w	r2, r0, r2
   d5de6:	ea81 0303 	eor.w	r3, r1, r3
   d5dea:	ea82 0000 	eor.w	r0, r2, r0
   d5dee:	ea83 0101 	eor.w	r1, r3, r1
   d5df2:	ea80 0202 	eor.w	r2, r0, r2
   d5df6:	ea81 0303 	eor.w	r3, r1, r3
   d5dfa:	2d36      	cmp	r5, #54	; 0x36
   d5dfc:	bf88      	it	hi
   d5dfe:	bd30      	pophi	{r4, r5, pc}
   d5e00:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5e04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5e08:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5e0c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5e10:	d002      	beq.n	d5e18 <__adddf3+0x70>
   d5e12:	4240      	negs	r0, r0
   d5e14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5e18:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5e1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5e20:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5e24:	d002      	beq.n	d5e2c <__adddf3+0x84>
   d5e26:	4252      	negs	r2, r2
   d5e28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5e2c:	ea94 0f05 	teq	r4, r5
   d5e30:	f000 80a7 	beq.w	d5f82 <__adddf3+0x1da>
   d5e34:	f1a4 0401 	sub.w	r4, r4, #1
   d5e38:	f1d5 0e20 	rsbs	lr, r5, #32
   d5e3c:	db0d      	blt.n	d5e5a <__adddf3+0xb2>
   d5e3e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5e42:	fa22 f205 	lsr.w	r2, r2, r5
   d5e46:	1880      	adds	r0, r0, r2
   d5e48:	f141 0100 	adc.w	r1, r1, #0
   d5e4c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5e50:	1880      	adds	r0, r0, r2
   d5e52:	fa43 f305 	asr.w	r3, r3, r5
   d5e56:	4159      	adcs	r1, r3
   d5e58:	e00e      	b.n	d5e78 <__adddf3+0xd0>
   d5e5a:	f1a5 0520 	sub.w	r5, r5, #32
   d5e5e:	f10e 0e20 	add.w	lr, lr, #32
   d5e62:	2a01      	cmp	r2, #1
   d5e64:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5e68:	bf28      	it	cs
   d5e6a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5e6e:	fa43 f305 	asr.w	r3, r3, r5
   d5e72:	18c0      	adds	r0, r0, r3
   d5e74:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5e78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e7c:	d507      	bpl.n	d5e8e <__adddf3+0xe6>
   d5e7e:	f04f 0e00 	mov.w	lr, #0
   d5e82:	f1dc 0c00 	rsbs	ip, ip, #0
   d5e86:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5e8a:	eb6e 0101 	sbc.w	r1, lr, r1
   d5e8e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5e92:	d31b      	bcc.n	d5ecc <__adddf3+0x124>
   d5e94:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5e98:	d30c      	bcc.n	d5eb4 <__adddf3+0x10c>
   d5e9a:	0849      	lsrs	r1, r1, #1
   d5e9c:	ea5f 0030 	movs.w	r0, r0, rrx
   d5ea0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5ea4:	f104 0401 	add.w	r4, r4, #1
   d5ea8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5eac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5eb0:	f080 809a 	bcs.w	d5fe8 <__adddf3+0x240>
   d5eb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5eb8:	bf08      	it	eq
   d5eba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5ebe:	f150 0000 	adcs.w	r0, r0, #0
   d5ec2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5ec6:	ea41 0105 	orr.w	r1, r1, r5
   d5eca:	bd30      	pop	{r4, r5, pc}
   d5ecc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5ed0:	4140      	adcs	r0, r0
   d5ed2:	eb41 0101 	adc.w	r1, r1, r1
   d5ed6:	3c01      	subs	r4, #1
   d5ed8:	bf28      	it	cs
   d5eda:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5ede:	d2e9      	bcs.n	d5eb4 <__adddf3+0x10c>
   d5ee0:	f091 0f00 	teq	r1, #0
   d5ee4:	bf04      	itt	eq
   d5ee6:	4601      	moveq	r1, r0
   d5ee8:	2000      	moveq	r0, #0
   d5eea:	fab1 f381 	clz	r3, r1
   d5eee:	bf08      	it	eq
   d5ef0:	3320      	addeq	r3, #32
   d5ef2:	f1a3 030b 	sub.w	r3, r3, #11
   d5ef6:	f1b3 0220 	subs.w	r2, r3, #32
   d5efa:	da0c      	bge.n	d5f16 <__adddf3+0x16e>
   d5efc:	320c      	adds	r2, #12
   d5efe:	dd08      	ble.n	d5f12 <__adddf3+0x16a>
   d5f00:	f102 0c14 	add.w	ip, r2, #20
   d5f04:	f1c2 020c 	rsb	r2, r2, #12
   d5f08:	fa01 f00c 	lsl.w	r0, r1, ip
   d5f0c:	fa21 f102 	lsr.w	r1, r1, r2
   d5f10:	e00c      	b.n	d5f2c <__adddf3+0x184>
   d5f12:	f102 0214 	add.w	r2, r2, #20
   d5f16:	bfd8      	it	le
   d5f18:	f1c2 0c20 	rsble	ip, r2, #32
   d5f1c:	fa01 f102 	lsl.w	r1, r1, r2
   d5f20:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5f24:	bfdc      	itt	le
   d5f26:	ea41 010c 	orrle.w	r1, r1, ip
   d5f2a:	4090      	lslle	r0, r2
   d5f2c:	1ae4      	subs	r4, r4, r3
   d5f2e:	bfa2      	ittt	ge
   d5f30:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5f34:	4329      	orrge	r1, r5
   d5f36:	bd30      	popge	{r4, r5, pc}
   d5f38:	ea6f 0404 	mvn.w	r4, r4
   d5f3c:	3c1f      	subs	r4, #31
   d5f3e:	da1c      	bge.n	d5f7a <__adddf3+0x1d2>
   d5f40:	340c      	adds	r4, #12
   d5f42:	dc0e      	bgt.n	d5f62 <__adddf3+0x1ba>
   d5f44:	f104 0414 	add.w	r4, r4, #20
   d5f48:	f1c4 0220 	rsb	r2, r4, #32
   d5f4c:	fa20 f004 	lsr.w	r0, r0, r4
   d5f50:	fa01 f302 	lsl.w	r3, r1, r2
   d5f54:	ea40 0003 	orr.w	r0, r0, r3
   d5f58:	fa21 f304 	lsr.w	r3, r1, r4
   d5f5c:	ea45 0103 	orr.w	r1, r5, r3
   d5f60:	bd30      	pop	{r4, r5, pc}
   d5f62:	f1c4 040c 	rsb	r4, r4, #12
   d5f66:	f1c4 0220 	rsb	r2, r4, #32
   d5f6a:	fa20 f002 	lsr.w	r0, r0, r2
   d5f6e:	fa01 f304 	lsl.w	r3, r1, r4
   d5f72:	ea40 0003 	orr.w	r0, r0, r3
   d5f76:	4629      	mov	r1, r5
   d5f78:	bd30      	pop	{r4, r5, pc}
   d5f7a:	fa21 f004 	lsr.w	r0, r1, r4
   d5f7e:	4629      	mov	r1, r5
   d5f80:	bd30      	pop	{r4, r5, pc}
   d5f82:	f094 0f00 	teq	r4, #0
   d5f86:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5f8a:	bf06      	itte	eq
   d5f8c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5f90:	3401      	addeq	r4, #1
   d5f92:	3d01      	subne	r5, #1
   d5f94:	e74e      	b.n	d5e34 <__adddf3+0x8c>
   d5f96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5f9a:	bf18      	it	ne
   d5f9c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5fa0:	d029      	beq.n	d5ff6 <__adddf3+0x24e>
   d5fa2:	ea94 0f05 	teq	r4, r5
   d5fa6:	bf08      	it	eq
   d5fa8:	ea90 0f02 	teqeq	r0, r2
   d5fac:	d005      	beq.n	d5fba <__adddf3+0x212>
   d5fae:	ea54 0c00 	orrs.w	ip, r4, r0
   d5fb2:	bf04      	itt	eq
   d5fb4:	4619      	moveq	r1, r3
   d5fb6:	4610      	moveq	r0, r2
   d5fb8:	bd30      	pop	{r4, r5, pc}
   d5fba:	ea91 0f03 	teq	r1, r3
   d5fbe:	bf1e      	ittt	ne
   d5fc0:	2100      	movne	r1, #0
   d5fc2:	2000      	movne	r0, #0
   d5fc4:	bd30      	popne	{r4, r5, pc}
   d5fc6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5fca:	d105      	bne.n	d5fd8 <__adddf3+0x230>
   d5fcc:	0040      	lsls	r0, r0, #1
   d5fce:	4149      	adcs	r1, r1
   d5fd0:	bf28      	it	cs
   d5fd2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5fd6:	bd30      	pop	{r4, r5, pc}
   d5fd8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5fdc:	bf3c      	itt	cc
   d5fde:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5fe2:	bd30      	popcc	{r4, r5, pc}
   d5fe4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5fe8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5fec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5ff0:	f04f 0000 	mov.w	r0, #0
   d5ff4:	bd30      	pop	{r4, r5, pc}
   d5ff6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5ffa:	bf1a      	itte	ne
   d5ffc:	4619      	movne	r1, r3
   d5ffe:	4610      	movne	r0, r2
   d6000:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6004:	bf1c      	itt	ne
   d6006:	460b      	movne	r3, r1
   d6008:	4602      	movne	r2, r0
   d600a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d600e:	bf06      	itte	eq
   d6010:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6014:	ea91 0f03 	teqeq	r1, r3
   d6018:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d601c:	bd30      	pop	{r4, r5, pc}
   d601e:	bf00      	nop

000d6020 <__aeabi_ui2d>:
   d6020:	f090 0f00 	teq	r0, #0
   d6024:	bf04      	itt	eq
   d6026:	2100      	moveq	r1, #0
   d6028:	4770      	bxeq	lr
   d602a:	b530      	push	{r4, r5, lr}
   d602c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6030:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6034:	f04f 0500 	mov.w	r5, #0
   d6038:	f04f 0100 	mov.w	r1, #0
   d603c:	e750      	b.n	d5ee0 <__adddf3+0x138>
   d603e:	bf00      	nop

000d6040 <__aeabi_i2d>:
   d6040:	f090 0f00 	teq	r0, #0
   d6044:	bf04      	itt	eq
   d6046:	2100      	moveq	r1, #0
   d6048:	4770      	bxeq	lr
   d604a:	b530      	push	{r4, r5, lr}
   d604c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6050:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6054:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6058:	bf48      	it	mi
   d605a:	4240      	negmi	r0, r0
   d605c:	f04f 0100 	mov.w	r1, #0
   d6060:	e73e      	b.n	d5ee0 <__adddf3+0x138>
   d6062:	bf00      	nop

000d6064 <__aeabi_f2d>:
   d6064:	0042      	lsls	r2, r0, #1
   d6066:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d606a:	ea4f 0131 	mov.w	r1, r1, rrx
   d606e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6072:	bf1f      	itttt	ne
   d6074:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6078:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d607c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6080:	4770      	bxne	lr
   d6082:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6086:	bf08      	it	eq
   d6088:	4770      	bxeq	lr
   d608a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d608e:	bf04      	itt	eq
   d6090:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6094:	4770      	bxeq	lr
   d6096:	b530      	push	{r4, r5, lr}
   d6098:	f44f 7460 	mov.w	r4, #896	; 0x380
   d609c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d60a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d60a4:	e71c      	b.n	d5ee0 <__adddf3+0x138>
   d60a6:	bf00      	nop

000d60a8 <__aeabi_ul2d>:
   d60a8:	ea50 0201 	orrs.w	r2, r0, r1
   d60ac:	bf08      	it	eq
   d60ae:	4770      	bxeq	lr
   d60b0:	b530      	push	{r4, r5, lr}
   d60b2:	f04f 0500 	mov.w	r5, #0
   d60b6:	e00a      	b.n	d60ce <__aeabi_l2d+0x16>

000d60b8 <__aeabi_l2d>:
   d60b8:	ea50 0201 	orrs.w	r2, r0, r1
   d60bc:	bf08      	it	eq
   d60be:	4770      	bxeq	lr
   d60c0:	b530      	push	{r4, r5, lr}
   d60c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d60c6:	d502      	bpl.n	d60ce <__aeabi_l2d+0x16>
   d60c8:	4240      	negs	r0, r0
   d60ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d60ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d60d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d60d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d60da:	f43f aed8 	beq.w	d5e8e <__adddf3+0xe6>
   d60de:	f04f 0203 	mov.w	r2, #3
   d60e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d60e6:	bf18      	it	ne
   d60e8:	3203      	addne	r2, #3
   d60ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d60ee:	bf18      	it	ne
   d60f0:	3203      	addne	r2, #3
   d60f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d60f6:	f1c2 0320 	rsb	r3, r2, #32
   d60fa:	fa00 fc03 	lsl.w	ip, r0, r3
   d60fe:	fa20 f002 	lsr.w	r0, r0, r2
   d6102:	fa01 fe03 	lsl.w	lr, r1, r3
   d6106:	ea40 000e 	orr.w	r0, r0, lr
   d610a:	fa21 f102 	lsr.w	r1, r1, r2
   d610e:	4414      	add	r4, r2
   d6110:	e6bd      	b.n	d5e8e <__adddf3+0xe6>
   d6112:	bf00      	nop

000d6114 <__aeabi_dmul>:
   d6114:	b570      	push	{r4, r5, r6, lr}
   d6116:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d611a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d611e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6122:	bf1d      	ittte	ne
   d6124:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6128:	ea94 0f0c 	teqne	r4, ip
   d612c:	ea95 0f0c 	teqne	r5, ip
   d6130:	f000 f8de 	bleq	d62f0 <__aeabi_dmul+0x1dc>
   d6134:	442c      	add	r4, r5
   d6136:	ea81 0603 	eor.w	r6, r1, r3
   d613a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d613e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6142:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6146:	bf18      	it	ne
   d6148:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d614c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6154:	d038      	beq.n	d61c8 <__aeabi_dmul+0xb4>
   d6156:	fba0 ce02 	umull	ip, lr, r0, r2
   d615a:	f04f 0500 	mov.w	r5, #0
   d615e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6162:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6166:	fbe0 e503 	umlal	lr, r5, r0, r3
   d616a:	f04f 0600 	mov.w	r6, #0
   d616e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6172:	f09c 0f00 	teq	ip, #0
   d6176:	bf18      	it	ne
   d6178:	f04e 0e01 	orrne.w	lr, lr, #1
   d617c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6180:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6184:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6188:	d204      	bcs.n	d6194 <__aeabi_dmul+0x80>
   d618a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d618e:	416d      	adcs	r5, r5
   d6190:	eb46 0606 	adc.w	r6, r6, r6
   d6194:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6198:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d619c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d61a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d61a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d61a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d61ac:	bf88      	it	hi
   d61ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d61b2:	d81e      	bhi.n	d61f2 <__aeabi_dmul+0xde>
   d61b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d61b8:	bf08      	it	eq
   d61ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d61be:	f150 0000 	adcs.w	r0, r0, #0
   d61c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d61c6:	bd70      	pop	{r4, r5, r6, pc}
   d61c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d61cc:	ea46 0101 	orr.w	r1, r6, r1
   d61d0:	ea40 0002 	orr.w	r0, r0, r2
   d61d4:	ea81 0103 	eor.w	r1, r1, r3
   d61d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d61dc:	bfc2      	ittt	gt
   d61de:	ebd4 050c 	rsbsgt	r5, r4, ip
   d61e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d61e6:	bd70      	popgt	{r4, r5, r6, pc}
   d61e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d61ec:	f04f 0e00 	mov.w	lr, #0
   d61f0:	3c01      	subs	r4, #1
   d61f2:	f300 80ab 	bgt.w	d634c <__aeabi_dmul+0x238>
   d61f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d61fa:	bfde      	ittt	le
   d61fc:	2000      	movle	r0, #0
   d61fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6202:	bd70      	pople	{r4, r5, r6, pc}
   d6204:	f1c4 0400 	rsb	r4, r4, #0
   d6208:	3c20      	subs	r4, #32
   d620a:	da35      	bge.n	d6278 <__aeabi_dmul+0x164>
   d620c:	340c      	adds	r4, #12
   d620e:	dc1b      	bgt.n	d6248 <__aeabi_dmul+0x134>
   d6210:	f104 0414 	add.w	r4, r4, #20
   d6214:	f1c4 0520 	rsb	r5, r4, #32
   d6218:	fa00 f305 	lsl.w	r3, r0, r5
   d621c:	fa20 f004 	lsr.w	r0, r0, r4
   d6220:	fa01 f205 	lsl.w	r2, r1, r5
   d6224:	ea40 0002 	orr.w	r0, r0, r2
   d6228:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d622c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6230:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6234:	fa21 f604 	lsr.w	r6, r1, r4
   d6238:	eb42 0106 	adc.w	r1, r2, r6
   d623c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6240:	bf08      	it	eq
   d6242:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6246:	bd70      	pop	{r4, r5, r6, pc}
   d6248:	f1c4 040c 	rsb	r4, r4, #12
   d624c:	f1c4 0520 	rsb	r5, r4, #32
   d6250:	fa00 f304 	lsl.w	r3, r0, r4
   d6254:	fa20 f005 	lsr.w	r0, r0, r5
   d6258:	fa01 f204 	lsl.w	r2, r1, r4
   d625c:	ea40 0002 	orr.w	r0, r0, r2
   d6260:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6264:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6268:	f141 0100 	adc.w	r1, r1, #0
   d626c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6270:	bf08      	it	eq
   d6272:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6276:	bd70      	pop	{r4, r5, r6, pc}
   d6278:	f1c4 0520 	rsb	r5, r4, #32
   d627c:	fa00 f205 	lsl.w	r2, r0, r5
   d6280:	ea4e 0e02 	orr.w	lr, lr, r2
   d6284:	fa20 f304 	lsr.w	r3, r0, r4
   d6288:	fa01 f205 	lsl.w	r2, r1, r5
   d628c:	ea43 0302 	orr.w	r3, r3, r2
   d6290:	fa21 f004 	lsr.w	r0, r1, r4
   d6294:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6298:	fa21 f204 	lsr.w	r2, r1, r4
   d629c:	ea20 0002 	bic.w	r0, r0, r2
   d62a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d62a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d62a8:	bf08      	it	eq
   d62aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d62ae:	bd70      	pop	{r4, r5, r6, pc}
   d62b0:	f094 0f00 	teq	r4, #0
   d62b4:	d10f      	bne.n	d62d6 <__aeabi_dmul+0x1c2>
   d62b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d62ba:	0040      	lsls	r0, r0, #1
   d62bc:	eb41 0101 	adc.w	r1, r1, r1
   d62c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d62c4:	bf08      	it	eq
   d62c6:	3c01      	subeq	r4, #1
   d62c8:	d0f7      	beq.n	d62ba <__aeabi_dmul+0x1a6>
   d62ca:	ea41 0106 	orr.w	r1, r1, r6
   d62ce:	f095 0f00 	teq	r5, #0
   d62d2:	bf18      	it	ne
   d62d4:	4770      	bxne	lr
   d62d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d62da:	0052      	lsls	r2, r2, #1
   d62dc:	eb43 0303 	adc.w	r3, r3, r3
   d62e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d62e4:	bf08      	it	eq
   d62e6:	3d01      	subeq	r5, #1
   d62e8:	d0f7      	beq.n	d62da <__aeabi_dmul+0x1c6>
   d62ea:	ea43 0306 	orr.w	r3, r3, r6
   d62ee:	4770      	bx	lr
   d62f0:	ea94 0f0c 	teq	r4, ip
   d62f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d62f8:	bf18      	it	ne
   d62fa:	ea95 0f0c 	teqne	r5, ip
   d62fe:	d00c      	beq.n	d631a <__aeabi_dmul+0x206>
   d6300:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6304:	bf18      	it	ne
   d6306:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d630a:	d1d1      	bne.n	d62b0 <__aeabi_dmul+0x19c>
   d630c:	ea81 0103 	eor.w	r1, r1, r3
   d6310:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6314:	f04f 0000 	mov.w	r0, #0
   d6318:	bd70      	pop	{r4, r5, r6, pc}
   d631a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d631e:	bf06      	itte	eq
   d6320:	4610      	moveq	r0, r2
   d6322:	4619      	moveq	r1, r3
   d6324:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6328:	d019      	beq.n	d635e <__aeabi_dmul+0x24a>
   d632a:	ea94 0f0c 	teq	r4, ip
   d632e:	d102      	bne.n	d6336 <__aeabi_dmul+0x222>
   d6330:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6334:	d113      	bne.n	d635e <__aeabi_dmul+0x24a>
   d6336:	ea95 0f0c 	teq	r5, ip
   d633a:	d105      	bne.n	d6348 <__aeabi_dmul+0x234>
   d633c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6340:	bf1c      	itt	ne
   d6342:	4610      	movne	r0, r2
   d6344:	4619      	movne	r1, r3
   d6346:	d10a      	bne.n	d635e <__aeabi_dmul+0x24a>
   d6348:	ea81 0103 	eor.w	r1, r1, r3
   d634c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6350:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6354:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6358:	f04f 0000 	mov.w	r0, #0
   d635c:	bd70      	pop	{r4, r5, r6, pc}
   d635e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6362:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6366:	bd70      	pop	{r4, r5, r6, pc}

000d6368 <__aeabi_ddiv>:
   d6368:	b570      	push	{r4, r5, r6, lr}
   d636a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d636e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6372:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6376:	bf1d      	ittte	ne
   d6378:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d637c:	ea94 0f0c 	teqne	r4, ip
   d6380:	ea95 0f0c 	teqne	r5, ip
   d6384:	f000 f8a7 	bleq	d64d6 <__aeabi_ddiv+0x16e>
   d6388:	eba4 0405 	sub.w	r4, r4, r5
   d638c:	ea81 0e03 	eor.w	lr, r1, r3
   d6390:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6394:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6398:	f000 8088 	beq.w	d64ac <__aeabi_ddiv+0x144>
   d639c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d63a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d63a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d63a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d63ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d63b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d63b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d63b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d63bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d63c0:	429d      	cmp	r5, r3
   d63c2:	bf08      	it	eq
   d63c4:	4296      	cmpeq	r6, r2
   d63c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d63ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d63ce:	d202      	bcs.n	d63d6 <__aeabi_ddiv+0x6e>
   d63d0:	085b      	lsrs	r3, r3, #1
   d63d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d63d6:	1ab6      	subs	r6, r6, r2
   d63d8:	eb65 0503 	sbc.w	r5, r5, r3
   d63dc:	085b      	lsrs	r3, r3, #1
   d63de:	ea4f 0232 	mov.w	r2, r2, rrx
   d63e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d63e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d63ea:	ebb6 0e02 	subs.w	lr, r6, r2
   d63ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d63f2:	bf22      	ittt	cs
   d63f4:	1ab6      	subcs	r6, r6, r2
   d63f6:	4675      	movcs	r5, lr
   d63f8:	ea40 000c 	orrcs.w	r0, r0, ip
   d63fc:	085b      	lsrs	r3, r3, #1
   d63fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d6402:	ebb6 0e02 	subs.w	lr, r6, r2
   d6406:	eb75 0e03 	sbcs.w	lr, r5, r3
   d640a:	bf22      	ittt	cs
   d640c:	1ab6      	subcs	r6, r6, r2
   d640e:	4675      	movcs	r5, lr
   d6410:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6414:	085b      	lsrs	r3, r3, #1
   d6416:	ea4f 0232 	mov.w	r2, r2, rrx
   d641a:	ebb6 0e02 	subs.w	lr, r6, r2
   d641e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6422:	bf22      	ittt	cs
   d6424:	1ab6      	subcs	r6, r6, r2
   d6426:	4675      	movcs	r5, lr
   d6428:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d642c:	085b      	lsrs	r3, r3, #1
   d642e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6432:	ebb6 0e02 	subs.w	lr, r6, r2
   d6436:	eb75 0e03 	sbcs.w	lr, r5, r3
   d643a:	bf22      	ittt	cs
   d643c:	1ab6      	subcs	r6, r6, r2
   d643e:	4675      	movcs	r5, lr
   d6440:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6444:	ea55 0e06 	orrs.w	lr, r5, r6
   d6448:	d018      	beq.n	d647c <__aeabi_ddiv+0x114>
   d644a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d644e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6452:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6456:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d645a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d645e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6462:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6466:	d1c0      	bne.n	d63ea <__aeabi_ddiv+0x82>
   d6468:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d646c:	d10b      	bne.n	d6486 <__aeabi_ddiv+0x11e>
   d646e:	ea41 0100 	orr.w	r1, r1, r0
   d6472:	f04f 0000 	mov.w	r0, #0
   d6476:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d647a:	e7b6      	b.n	d63ea <__aeabi_ddiv+0x82>
   d647c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6480:	bf04      	itt	eq
   d6482:	4301      	orreq	r1, r0
   d6484:	2000      	moveq	r0, #0
   d6486:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d648a:	bf88      	it	hi
   d648c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6490:	f63f aeaf 	bhi.w	d61f2 <__aeabi_dmul+0xde>
   d6494:	ebb5 0c03 	subs.w	ip, r5, r3
   d6498:	bf04      	itt	eq
   d649a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d649e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d64a2:	f150 0000 	adcs.w	r0, r0, #0
   d64a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d64aa:	bd70      	pop	{r4, r5, r6, pc}
   d64ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d64b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d64b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d64b8:	bfc2      	ittt	gt
   d64ba:	ebd4 050c 	rsbsgt	r5, r4, ip
   d64be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d64c2:	bd70      	popgt	{r4, r5, r6, pc}
   d64c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d64c8:	f04f 0e00 	mov.w	lr, #0
   d64cc:	3c01      	subs	r4, #1
   d64ce:	e690      	b.n	d61f2 <__aeabi_dmul+0xde>
   d64d0:	ea45 0e06 	orr.w	lr, r5, r6
   d64d4:	e68d      	b.n	d61f2 <__aeabi_dmul+0xde>
   d64d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d64da:	ea94 0f0c 	teq	r4, ip
   d64de:	bf08      	it	eq
   d64e0:	ea95 0f0c 	teqeq	r5, ip
   d64e4:	f43f af3b 	beq.w	d635e <__aeabi_dmul+0x24a>
   d64e8:	ea94 0f0c 	teq	r4, ip
   d64ec:	d10a      	bne.n	d6504 <__aeabi_ddiv+0x19c>
   d64ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d64f2:	f47f af34 	bne.w	d635e <__aeabi_dmul+0x24a>
   d64f6:	ea95 0f0c 	teq	r5, ip
   d64fa:	f47f af25 	bne.w	d6348 <__aeabi_dmul+0x234>
   d64fe:	4610      	mov	r0, r2
   d6500:	4619      	mov	r1, r3
   d6502:	e72c      	b.n	d635e <__aeabi_dmul+0x24a>
   d6504:	ea95 0f0c 	teq	r5, ip
   d6508:	d106      	bne.n	d6518 <__aeabi_ddiv+0x1b0>
   d650a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d650e:	f43f aefd 	beq.w	d630c <__aeabi_dmul+0x1f8>
   d6512:	4610      	mov	r0, r2
   d6514:	4619      	mov	r1, r3
   d6516:	e722      	b.n	d635e <__aeabi_dmul+0x24a>
   d6518:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d651c:	bf18      	it	ne
   d651e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6522:	f47f aec5 	bne.w	d62b0 <__aeabi_dmul+0x19c>
   d6526:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d652a:	f47f af0d 	bne.w	d6348 <__aeabi_dmul+0x234>
   d652e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6532:	f47f aeeb 	bne.w	d630c <__aeabi_dmul+0x1f8>
   d6536:	e712      	b.n	d635e <__aeabi_dmul+0x24a>

000d6538 <__gedf2>:
   d6538:	f04f 3cff 	mov.w	ip, #4294967295
   d653c:	e006      	b.n	d654c <__cmpdf2+0x4>
   d653e:	bf00      	nop

000d6540 <__ledf2>:
   d6540:	f04f 0c01 	mov.w	ip, #1
   d6544:	e002      	b.n	d654c <__cmpdf2+0x4>
   d6546:	bf00      	nop

000d6548 <__cmpdf2>:
   d6548:	f04f 0c01 	mov.w	ip, #1
   d654c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6550:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6554:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6558:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d655c:	bf18      	it	ne
   d655e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6562:	d01b      	beq.n	d659c <__cmpdf2+0x54>
   d6564:	b001      	add	sp, #4
   d6566:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d656a:	bf0c      	ite	eq
   d656c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6570:	ea91 0f03 	teqne	r1, r3
   d6574:	bf02      	ittt	eq
   d6576:	ea90 0f02 	teqeq	r0, r2
   d657a:	2000      	moveq	r0, #0
   d657c:	4770      	bxeq	lr
   d657e:	f110 0f00 	cmn.w	r0, #0
   d6582:	ea91 0f03 	teq	r1, r3
   d6586:	bf58      	it	pl
   d6588:	4299      	cmppl	r1, r3
   d658a:	bf08      	it	eq
   d658c:	4290      	cmpeq	r0, r2
   d658e:	bf2c      	ite	cs
   d6590:	17d8      	asrcs	r0, r3, #31
   d6592:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6596:	f040 0001 	orr.w	r0, r0, #1
   d659a:	4770      	bx	lr
   d659c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d65a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d65a4:	d102      	bne.n	d65ac <__cmpdf2+0x64>
   d65a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d65aa:	d107      	bne.n	d65bc <__cmpdf2+0x74>
   d65ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d65b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d65b4:	d1d6      	bne.n	d6564 <__cmpdf2+0x1c>
   d65b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d65ba:	d0d3      	beq.n	d6564 <__cmpdf2+0x1c>
   d65bc:	f85d 0b04 	ldr.w	r0, [sp], #4
   d65c0:	4770      	bx	lr
   d65c2:	bf00      	nop

000d65c4 <__aeabi_cdrcmple>:
   d65c4:	4684      	mov	ip, r0
   d65c6:	4610      	mov	r0, r2
   d65c8:	4662      	mov	r2, ip
   d65ca:	468c      	mov	ip, r1
   d65cc:	4619      	mov	r1, r3
   d65ce:	4663      	mov	r3, ip
   d65d0:	e000      	b.n	d65d4 <__aeabi_cdcmpeq>
   d65d2:	bf00      	nop

000d65d4 <__aeabi_cdcmpeq>:
   d65d4:	b501      	push	{r0, lr}
   d65d6:	f7ff ffb7 	bl	d6548 <__cmpdf2>
   d65da:	2800      	cmp	r0, #0
   d65dc:	bf48      	it	mi
   d65de:	f110 0f00 	cmnmi.w	r0, #0
   d65e2:	bd01      	pop	{r0, pc}

000d65e4 <__aeabi_dcmpeq>:
   d65e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d65e8:	f7ff fff4 	bl	d65d4 <__aeabi_cdcmpeq>
   d65ec:	bf0c      	ite	eq
   d65ee:	2001      	moveq	r0, #1
   d65f0:	2000      	movne	r0, #0
   d65f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d65f6:	bf00      	nop

000d65f8 <__aeabi_dcmplt>:
   d65f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d65fc:	f7ff ffea 	bl	d65d4 <__aeabi_cdcmpeq>
   d6600:	bf34      	ite	cc
   d6602:	2001      	movcc	r0, #1
   d6604:	2000      	movcs	r0, #0
   d6606:	f85d fb08 	ldr.w	pc, [sp], #8
   d660a:	bf00      	nop

000d660c <__aeabi_dcmple>:
   d660c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6610:	f7ff ffe0 	bl	d65d4 <__aeabi_cdcmpeq>
   d6614:	bf94      	ite	ls
   d6616:	2001      	movls	r0, #1
   d6618:	2000      	movhi	r0, #0
   d661a:	f85d fb08 	ldr.w	pc, [sp], #8
   d661e:	bf00      	nop

000d6620 <__aeabi_dcmpge>:
   d6620:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6624:	f7ff ffce 	bl	d65c4 <__aeabi_cdrcmple>
   d6628:	bf94      	ite	ls
   d662a:	2001      	movls	r0, #1
   d662c:	2000      	movhi	r0, #0
   d662e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6632:	bf00      	nop

000d6634 <__aeabi_dcmpgt>:
   d6634:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6638:	f7ff ffc4 	bl	d65c4 <__aeabi_cdrcmple>
   d663c:	bf34      	ite	cc
   d663e:	2001      	movcc	r0, #1
   d6640:	2000      	movcs	r0, #0
   d6642:	f85d fb08 	ldr.w	pc, [sp], #8
   d6646:	bf00      	nop

000d6648 <__aeabi_dcmpun>:
   d6648:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d664c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6650:	d102      	bne.n	d6658 <__aeabi_dcmpun+0x10>
   d6652:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6656:	d10a      	bne.n	d666e <__aeabi_dcmpun+0x26>
   d6658:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d665c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6660:	d102      	bne.n	d6668 <__aeabi_dcmpun+0x20>
   d6662:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6666:	d102      	bne.n	d666e <__aeabi_dcmpun+0x26>
   d6668:	f04f 0000 	mov.w	r0, #0
   d666c:	4770      	bx	lr
   d666e:	f04f 0001 	mov.w	r0, #1
   d6672:	4770      	bx	lr

000d6674 <__aeabi_d2iz>:
   d6674:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6678:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d667c:	d215      	bcs.n	d66aa <__aeabi_d2iz+0x36>
   d667e:	d511      	bpl.n	d66a4 <__aeabi_d2iz+0x30>
   d6680:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6684:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6688:	d912      	bls.n	d66b0 <__aeabi_d2iz+0x3c>
   d668a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d668e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6692:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6696:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d669a:	fa23 f002 	lsr.w	r0, r3, r2
   d669e:	bf18      	it	ne
   d66a0:	4240      	negne	r0, r0
   d66a2:	4770      	bx	lr
   d66a4:	f04f 0000 	mov.w	r0, #0
   d66a8:	4770      	bx	lr
   d66aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d66ae:	d105      	bne.n	d66bc <__aeabi_d2iz+0x48>
   d66b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d66b4:	bf08      	it	eq
   d66b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d66ba:	4770      	bx	lr
   d66bc:	f04f 0000 	mov.w	r0, #0
   d66c0:	4770      	bx	lr
   d66c2:	bf00      	nop

000d66c4 <__aeabi_d2uiz>:
   d66c4:	004a      	lsls	r2, r1, #1
   d66c6:	d211      	bcs.n	d66ec <__aeabi_d2uiz+0x28>
   d66c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d66cc:	d211      	bcs.n	d66f2 <__aeabi_d2uiz+0x2e>
   d66ce:	d50d      	bpl.n	d66ec <__aeabi_d2uiz+0x28>
   d66d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d66d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d66d8:	d40e      	bmi.n	d66f8 <__aeabi_d2uiz+0x34>
   d66da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d66de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d66e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d66e6:	fa23 f002 	lsr.w	r0, r3, r2
   d66ea:	4770      	bx	lr
   d66ec:	f04f 0000 	mov.w	r0, #0
   d66f0:	4770      	bx	lr
   d66f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d66f6:	d102      	bne.n	d66fe <__aeabi_d2uiz+0x3a>
   d66f8:	f04f 30ff 	mov.w	r0, #4294967295
   d66fc:	4770      	bx	lr
   d66fe:	f04f 0000 	mov.w	r0, #0
   d6702:	4770      	bx	lr

000d6704 <__aeabi_uldivmod>:
   d6704:	b953      	cbnz	r3, d671c <__aeabi_uldivmod+0x18>
   d6706:	b94a      	cbnz	r2, d671c <__aeabi_uldivmod+0x18>
   d6708:	2900      	cmp	r1, #0
   d670a:	bf08      	it	eq
   d670c:	2800      	cmpeq	r0, #0
   d670e:	bf1c      	itt	ne
   d6710:	f04f 31ff 	movne.w	r1, #4294967295
   d6714:	f04f 30ff 	movne.w	r0, #4294967295
   d6718:	f000 b98c 	b.w	d6a34 <__aeabi_idiv0>
   d671c:	f1ad 0c08 	sub.w	ip, sp, #8
   d6720:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6724:	f000 f824 	bl	d6770 <__udivmoddi4>
   d6728:	f8dd e004 	ldr.w	lr, [sp, #4]
   d672c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6730:	b004      	add	sp, #16
   d6732:	4770      	bx	lr

000d6734 <__aeabi_d2ulz>:
   d6734:	b5d0      	push	{r4, r6, r7, lr}
   d6736:	4b0c      	ldr	r3, [pc, #48]	; (d6768 <__aeabi_d2ulz+0x34>)
   d6738:	2200      	movs	r2, #0
   d673a:	4606      	mov	r6, r0
   d673c:	460f      	mov	r7, r1
   d673e:	f7ff fce9 	bl	d6114 <__aeabi_dmul>
   d6742:	f7ff ffbf 	bl	d66c4 <__aeabi_d2uiz>
   d6746:	4604      	mov	r4, r0
   d6748:	f7ff fc6a 	bl	d6020 <__aeabi_ui2d>
   d674c:	4b07      	ldr	r3, [pc, #28]	; (d676c <__aeabi_d2ulz+0x38>)
   d674e:	2200      	movs	r2, #0
   d6750:	f7ff fce0 	bl	d6114 <__aeabi_dmul>
   d6754:	4602      	mov	r2, r0
   d6756:	460b      	mov	r3, r1
   d6758:	4630      	mov	r0, r6
   d675a:	4639      	mov	r1, r7
   d675c:	f7ff fb22 	bl	d5da4 <__aeabi_dsub>
   d6760:	f7ff ffb0 	bl	d66c4 <__aeabi_d2uiz>
   d6764:	4621      	mov	r1, r4
   d6766:	bdd0      	pop	{r4, r6, r7, pc}
   d6768:	3df00000 	.word	0x3df00000
   d676c:	41f00000 	.word	0x41f00000

000d6770 <__udivmoddi4>:
   d6770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6774:	9d08      	ldr	r5, [sp, #32]
   d6776:	4604      	mov	r4, r0
   d6778:	468c      	mov	ip, r1
   d677a:	2b00      	cmp	r3, #0
   d677c:	f040 8083 	bne.w	d6886 <__udivmoddi4+0x116>
   d6780:	428a      	cmp	r2, r1
   d6782:	4617      	mov	r7, r2
   d6784:	d947      	bls.n	d6816 <__udivmoddi4+0xa6>
   d6786:	fab2 f282 	clz	r2, r2
   d678a:	b142      	cbz	r2, d679e <__udivmoddi4+0x2e>
   d678c:	f1c2 0020 	rsb	r0, r2, #32
   d6790:	fa24 f000 	lsr.w	r0, r4, r0
   d6794:	4091      	lsls	r1, r2
   d6796:	4097      	lsls	r7, r2
   d6798:	ea40 0c01 	orr.w	ip, r0, r1
   d679c:	4094      	lsls	r4, r2
   d679e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d67a2:	0c23      	lsrs	r3, r4, #16
   d67a4:	fbbc f6f8 	udiv	r6, ip, r8
   d67a8:	fa1f fe87 	uxth.w	lr, r7
   d67ac:	fb08 c116 	mls	r1, r8, r6, ip
   d67b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d67b4:	fb06 f10e 	mul.w	r1, r6, lr
   d67b8:	4299      	cmp	r1, r3
   d67ba:	d909      	bls.n	d67d0 <__udivmoddi4+0x60>
   d67bc:	18fb      	adds	r3, r7, r3
   d67be:	f106 30ff 	add.w	r0, r6, #4294967295
   d67c2:	f080 8119 	bcs.w	d69f8 <__udivmoddi4+0x288>
   d67c6:	4299      	cmp	r1, r3
   d67c8:	f240 8116 	bls.w	d69f8 <__udivmoddi4+0x288>
   d67cc:	3e02      	subs	r6, #2
   d67ce:	443b      	add	r3, r7
   d67d0:	1a5b      	subs	r3, r3, r1
   d67d2:	b2a4      	uxth	r4, r4
   d67d4:	fbb3 f0f8 	udiv	r0, r3, r8
   d67d8:	fb08 3310 	mls	r3, r8, r0, r3
   d67dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d67e0:	fb00 fe0e 	mul.w	lr, r0, lr
   d67e4:	45a6      	cmp	lr, r4
   d67e6:	d909      	bls.n	d67fc <__udivmoddi4+0x8c>
   d67e8:	193c      	adds	r4, r7, r4
   d67ea:	f100 33ff 	add.w	r3, r0, #4294967295
   d67ee:	f080 8105 	bcs.w	d69fc <__udivmoddi4+0x28c>
   d67f2:	45a6      	cmp	lr, r4
   d67f4:	f240 8102 	bls.w	d69fc <__udivmoddi4+0x28c>
   d67f8:	3802      	subs	r0, #2
   d67fa:	443c      	add	r4, r7
   d67fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d6800:	eba4 040e 	sub.w	r4, r4, lr
   d6804:	2600      	movs	r6, #0
   d6806:	b11d      	cbz	r5, d6810 <__udivmoddi4+0xa0>
   d6808:	40d4      	lsrs	r4, r2
   d680a:	2300      	movs	r3, #0
   d680c:	e9c5 4300 	strd	r4, r3, [r5]
   d6810:	4631      	mov	r1, r6
   d6812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6816:	b902      	cbnz	r2, d681a <__udivmoddi4+0xaa>
   d6818:	deff      	udf	#255	; 0xff
   d681a:	fab2 f282 	clz	r2, r2
   d681e:	2a00      	cmp	r2, #0
   d6820:	d150      	bne.n	d68c4 <__udivmoddi4+0x154>
   d6822:	1bcb      	subs	r3, r1, r7
   d6824:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d6828:	fa1f f887 	uxth.w	r8, r7
   d682c:	2601      	movs	r6, #1
   d682e:	fbb3 fcfe 	udiv	ip, r3, lr
   d6832:	0c21      	lsrs	r1, r4, #16
   d6834:	fb0e 331c 	mls	r3, lr, ip, r3
   d6838:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d683c:	fb08 f30c 	mul.w	r3, r8, ip
   d6840:	428b      	cmp	r3, r1
   d6842:	d907      	bls.n	d6854 <__udivmoddi4+0xe4>
   d6844:	1879      	adds	r1, r7, r1
   d6846:	f10c 30ff 	add.w	r0, ip, #4294967295
   d684a:	d202      	bcs.n	d6852 <__udivmoddi4+0xe2>
   d684c:	428b      	cmp	r3, r1
   d684e:	f200 80e9 	bhi.w	d6a24 <__udivmoddi4+0x2b4>
   d6852:	4684      	mov	ip, r0
   d6854:	1ac9      	subs	r1, r1, r3
   d6856:	b2a3      	uxth	r3, r4
   d6858:	fbb1 f0fe 	udiv	r0, r1, lr
   d685c:	fb0e 1110 	mls	r1, lr, r0, r1
   d6860:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d6864:	fb08 f800 	mul.w	r8, r8, r0
   d6868:	45a0      	cmp	r8, r4
   d686a:	d907      	bls.n	d687c <__udivmoddi4+0x10c>
   d686c:	193c      	adds	r4, r7, r4
   d686e:	f100 33ff 	add.w	r3, r0, #4294967295
   d6872:	d202      	bcs.n	d687a <__udivmoddi4+0x10a>
   d6874:	45a0      	cmp	r8, r4
   d6876:	f200 80d9 	bhi.w	d6a2c <__udivmoddi4+0x2bc>
   d687a:	4618      	mov	r0, r3
   d687c:	eba4 0408 	sub.w	r4, r4, r8
   d6880:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d6884:	e7bf      	b.n	d6806 <__udivmoddi4+0x96>
   d6886:	428b      	cmp	r3, r1
   d6888:	d909      	bls.n	d689e <__udivmoddi4+0x12e>
   d688a:	2d00      	cmp	r5, #0
   d688c:	f000 80b1 	beq.w	d69f2 <__udivmoddi4+0x282>
   d6890:	2600      	movs	r6, #0
   d6892:	e9c5 0100 	strd	r0, r1, [r5]
   d6896:	4630      	mov	r0, r6
   d6898:	4631      	mov	r1, r6
   d689a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d689e:	fab3 f683 	clz	r6, r3
   d68a2:	2e00      	cmp	r6, #0
   d68a4:	d14a      	bne.n	d693c <__udivmoddi4+0x1cc>
   d68a6:	428b      	cmp	r3, r1
   d68a8:	d302      	bcc.n	d68b0 <__udivmoddi4+0x140>
   d68aa:	4282      	cmp	r2, r0
   d68ac:	f200 80b8 	bhi.w	d6a20 <__udivmoddi4+0x2b0>
   d68b0:	1a84      	subs	r4, r0, r2
   d68b2:	eb61 0103 	sbc.w	r1, r1, r3
   d68b6:	2001      	movs	r0, #1
   d68b8:	468c      	mov	ip, r1
   d68ba:	2d00      	cmp	r5, #0
   d68bc:	d0a8      	beq.n	d6810 <__udivmoddi4+0xa0>
   d68be:	e9c5 4c00 	strd	r4, ip, [r5]
   d68c2:	e7a5      	b.n	d6810 <__udivmoddi4+0xa0>
   d68c4:	f1c2 0320 	rsb	r3, r2, #32
   d68c8:	fa20 f603 	lsr.w	r6, r0, r3
   d68cc:	4097      	lsls	r7, r2
   d68ce:	fa01 f002 	lsl.w	r0, r1, r2
   d68d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d68d6:	40d9      	lsrs	r1, r3
   d68d8:	4330      	orrs	r0, r6
   d68da:	0c03      	lsrs	r3, r0, #16
   d68dc:	fbb1 f6fe 	udiv	r6, r1, lr
   d68e0:	fa1f f887 	uxth.w	r8, r7
   d68e4:	fb0e 1116 	mls	r1, lr, r6, r1
   d68e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d68ec:	fb06 f108 	mul.w	r1, r6, r8
   d68f0:	4299      	cmp	r1, r3
   d68f2:	fa04 f402 	lsl.w	r4, r4, r2
   d68f6:	d909      	bls.n	d690c <__udivmoddi4+0x19c>
   d68f8:	18fb      	adds	r3, r7, r3
   d68fa:	f106 3cff 	add.w	ip, r6, #4294967295
   d68fe:	f080 808d 	bcs.w	d6a1c <__udivmoddi4+0x2ac>
   d6902:	4299      	cmp	r1, r3
   d6904:	f240 808a 	bls.w	d6a1c <__udivmoddi4+0x2ac>
   d6908:	3e02      	subs	r6, #2
   d690a:	443b      	add	r3, r7
   d690c:	1a5b      	subs	r3, r3, r1
   d690e:	b281      	uxth	r1, r0
   d6910:	fbb3 f0fe 	udiv	r0, r3, lr
   d6914:	fb0e 3310 	mls	r3, lr, r0, r3
   d6918:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d691c:	fb00 f308 	mul.w	r3, r0, r8
   d6920:	428b      	cmp	r3, r1
   d6922:	d907      	bls.n	d6934 <__udivmoddi4+0x1c4>
   d6924:	1879      	adds	r1, r7, r1
   d6926:	f100 3cff 	add.w	ip, r0, #4294967295
   d692a:	d273      	bcs.n	d6a14 <__udivmoddi4+0x2a4>
   d692c:	428b      	cmp	r3, r1
   d692e:	d971      	bls.n	d6a14 <__udivmoddi4+0x2a4>
   d6930:	3802      	subs	r0, #2
   d6932:	4439      	add	r1, r7
   d6934:	1acb      	subs	r3, r1, r3
   d6936:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d693a:	e778      	b.n	d682e <__udivmoddi4+0xbe>
   d693c:	f1c6 0c20 	rsb	ip, r6, #32
   d6940:	fa03 f406 	lsl.w	r4, r3, r6
   d6944:	fa22 f30c 	lsr.w	r3, r2, ip
   d6948:	431c      	orrs	r4, r3
   d694a:	fa20 f70c 	lsr.w	r7, r0, ip
   d694e:	fa01 f306 	lsl.w	r3, r1, r6
   d6952:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d6956:	fa21 f10c 	lsr.w	r1, r1, ip
   d695a:	431f      	orrs	r7, r3
   d695c:	0c3b      	lsrs	r3, r7, #16
   d695e:	fbb1 f9fe 	udiv	r9, r1, lr
   d6962:	fa1f f884 	uxth.w	r8, r4
   d6966:	fb0e 1119 	mls	r1, lr, r9, r1
   d696a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d696e:	fb09 fa08 	mul.w	sl, r9, r8
   d6972:	458a      	cmp	sl, r1
   d6974:	fa02 f206 	lsl.w	r2, r2, r6
   d6978:	fa00 f306 	lsl.w	r3, r0, r6
   d697c:	d908      	bls.n	d6990 <__udivmoddi4+0x220>
   d697e:	1861      	adds	r1, r4, r1
   d6980:	f109 30ff 	add.w	r0, r9, #4294967295
   d6984:	d248      	bcs.n	d6a18 <__udivmoddi4+0x2a8>
   d6986:	458a      	cmp	sl, r1
   d6988:	d946      	bls.n	d6a18 <__udivmoddi4+0x2a8>
   d698a:	f1a9 0902 	sub.w	r9, r9, #2
   d698e:	4421      	add	r1, r4
   d6990:	eba1 010a 	sub.w	r1, r1, sl
   d6994:	b2bf      	uxth	r7, r7
   d6996:	fbb1 f0fe 	udiv	r0, r1, lr
   d699a:	fb0e 1110 	mls	r1, lr, r0, r1
   d699e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d69a2:	fb00 f808 	mul.w	r8, r0, r8
   d69a6:	45b8      	cmp	r8, r7
   d69a8:	d907      	bls.n	d69ba <__udivmoddi4+0x24a>
   d69aa:	19e7      	adds	r7, r4, r7
   d69ac:	f100 31ff 	add.w	r1, r0, #4294967295
   d69b0:	d22e      	bcs.n	d6a10 <__udivmoddi4+0x2a0>
   d69b2:	45b8      	cmp	r8, r7
   d69b4:	d92c      	bls.n	d6a10 <__udivmoddi4+0x2a0>
   d69b6:	3802      	subs	r0, #2
   d69b8:	4427      	add	r7, r4
   d69ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d69be:	eba7 0708 	sub.w	r7, r7, r8
   d69c2:	fba0 8902 	umull	r8, r9, r0, r2
   d69c6:	454f      	cmp	r7, r9
   d69c8:	46c6      	mov	lr, r8
   d69ca:	4649      	mov	r1, r9
   d69cc:	d31a      	bcc.n	d6a04 <__udivmoddi4+0x294>
   d69ce:	d017      	beq.n	d6a00 <__udivmoddi4+0x290>
   d69d0:	b15d      	cbz	r5, d69ea <__udivmoddi4+0x27a>
   d69d2:	ebb3 020e 	subs.w	r2, r3, lr
   d69d6:	eb67 0701 	sbc.w	r7, r7, r1
   d69da:	fa07 fc0c 	lsl.w	ip, r7, ip
   d69de:	40f2      	lsrs	r2, r6
   d69e0:	ea4c 0202 	orr.w	r2, ip, r2
   d69e4:	40f7      	lsrs	r7, r6
   d69e6:	e9c5 2700 	strd	r2, r7, [r5]
   d69ea:	2600      	movs	r6, #0
   d69ec:	4631      	mov	r1, r6
   d69ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d69f2:	462e      	mov	r6, r5
   d69f4:	4628      	mov	r0, r5
   d69f6:	e70b      	b.n	d6810 <__udivmoddi4+0xa0>
   d69f8:	4606      	mov	r6, r0
   d69fa:	e6e9      	b.n	d67d0 <__udivmoddi4+0x60>
   d69fc:	4618      	mov	r0, r3
   d69fe:	e6fd      	b.n	d67fc <__udivmoddi4+0x8c>
   d6a00:	4543      	cmp	r3, r8
   d6a02:	d2e5      	bcs.n	d69d0 <__udivmoddi4+0x260>
   d6a04:	ebb8 0e02 	subs.w	lr, r8, r2
   d6a08:	eb69 0104 	sbc.w	r1, r9, r4
   d6a0c:	3801      	subs	r0, #1
   d6a0e:	e7df      	b.n	d69d0 <__udivmoddi4+0x260>
   d6a10:	4608      	mov	r0, r1
   d6a12:	e7d2      	b.n	d69ba <__udivmoddi4+0x24a>
   d6a14:	4660      	mov	r0, ip
   d6a16:	e78d      	b.n	d6934 <__udivmoddi4+0x1c4>
   d6a18:	4681      	mov	r9, r0
   d6a1a:	e7b9      	b.n	d6990 <__udivmoddi4+0x220>
   d6a1c:	4666      	mov	r6, ip
   d6a1e:	e775      	b.n	d690c <__udivmoddi4+0x19c>
   d6a20:	4630      	mov	r0, r6
   d6a22:	e74a      	b.n	d68ba <__udivmoddi4+0x14a>
   d6a24:	f1ac 0c02 	sub.w	ip, ip, #2
   d6a28:	4439      	add	r1, r7
   d6a2a:	e713      	b.n	d6854 <__udivmoddi4+0xe4>
   d6a2c:	3802      	subs	r0, #2
   d6a2e:	443c      	add	r4, r7
   d6a30:	e724      	b.n	d687c <__udivmoddi4+0x10c>
   d6a32:	bf00      	nop

000d6a34 <__aeabi_idiv0>:
   d6a34:	4770      	bx	lr
   d6a36:	bf00      	nop

000d6a38 <atexit>:
   d6a38:	2300      	movs	r3, #0
   d6a3a:	4601      	mov	r1, r0
   d6a3c:	461a      	mov	r2, r3
   d6a3e:	4618      	mov	r0, r3
   d6a40:	f000 b860 	b.w	d6b04 <__register_exitproc>

000d6a44 <memcpy>:
   d6a44:	440a      	add	r2, r1
   d6a46:	4291      	cmp	r1, r2
   d6a48:	f100 33ff 	add.w	r3, r0, #4294967295
   d6a4c:	d100      	bne.n	d6a50 <memcpy+0xc>
   d6a4e:	4770      	bx	lr
   d6a50:	b510      	push	{r4, lr}
   d6a52:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6a56:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6a5a:	4291      	cmp	r1, r2
   d6a5c:	d1f9      	bne.n	d6a52 <memcpy+0xe>
   d6a5e:	bd10      	pop	{r4, pc}

000d6a60 <memset>:
   d6a60:	4402      	add	r2, r0
   d6a62:	4603      	mov	r3, r0
   d6a64:	4293      	cmp	r3, r2
   d6a66:	d100      	bne.n	d6a6a <memset+0xa>
   d6a68:	4770      	bx	lr
   d6a6a:	f803 1b01 	strb.w	r1, [r3], #1
   d6a6e:	e7f9      	b.n	d6a64 <memset+0x4>

000d6a70 <srand>:
   d6a70:	b538      	push	{r3, r4, r5, lr}
   d6a72:	4b0d      	ldr	r3, [pc, #52]	; (d6aa8 <srand+0x38>)
   d6a74:	681d      	ldr	r5, [r3, #0]
   d6a76:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6a78:	4604      	mov	r4, r0
   d6a7a:	b97b      	cbnz	r3, d6a9c <srand+0x2c>
   d6a7c:	2018      	movs	r0, #24
   d6a7e:	f7fd fff5 	bl	d4a6c <malloc>
   d6a82:	4a0a      	ldr	r2, [pc, #40]	; (d6aac <srand+0x3c>)
   d6a84:	4b0a      	ldr	r3, [pc, #40]	; (d6ab0 <srand+0x40>)
   d6a86:	63a8      	str	r0, [r5, #56]	; 0x38
   d6a88:	e9c0 2300 	strd	r2, r3, [r0]
   d6a8c:	4b09      	ldr	r3, [pc, #36]	; (d6ab4 <srand+0x44>)
   d6a8e:	6083      	str	r3, [r0, #8]
   d6a90:	230b      	movs	r3, #11
   d6a92:	8183      	strh	r3, [r0, #12]
   d6a94:	2201      	movs	r2, #1
   d6a96:	2300      	movs	r3, #0
   d6a98:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6a9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6a9e:	2200      	movs	r2, #0
   d6aa0:	611c      	str	r4, [r3, #16]
   d6aa2:	615a      	str	r2, [r3, #20]
   d6aa4:	bd38      	pop	{r3, r4, r5, pc}
   d6aa6:	bf00      	nop
   d6aa8:	2003e520 	.word	0x2003e520
   d6aac:	abcd330e 	.word	0xabcd330e
   d6ab0:	e66d1234 	.word	0xe66d1234
   d6ab4:	0005deec 	.word	0x0005deec

000d6ab8 <strdup>:
   d6ab8:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <strdup+0xc>)
   d6aba:	4601      	mov	r1, r0
   d6abc:	6818      	ldr	r0, [r3, #0]
   d6abe:	f000 b803 	b.w	d6ac8 <_strdup_r>
   d6ac2:	bf00      	nop
   d6ac4:	2003e520 	.word	0x2003e520

000d6ac8 <_strdup_r>:
   d6ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6aca:	4604      	mov	r4, r0
   d6acc:	4608      	mov	r0, r1
   d6ace:	460d      	mov	r5, r1
   d6ad0:	f000 f80f 	bl	d6af2 <strlen>
   d6ad4:	1c42      	adds	r2, r0, #1
   d6ad6:	4611      	mov	r1, r2
   d6ad8:	4620      	mov	r0, r4
   d6ada:	9201      	str	r2, [sp, #4]
   d6adc:	f7fd ffe6 	bl	d4aac <_malloc_r>
   d6ae0:	4604      	mov	r4, r0
   d6ae2:	b118      	cbz	r0, d6aec <_strdup_r+0x24>
   d6ae4:	9a01      	ldr	r2, [sp, #4]
   d6ae6:	4629      	mov	r1, r5
   d6ae8:	f7ff ffac 	bl	d6a44 <memcpy>
   d6aec:	4620      	mov	r0, r4
   d6aee:	b003      	add	sp, #12
   d6af0:	bd30      	pop	{r4, r5, pc}

000d6af2 <strlen>:
   d6af2:	4603      	mov	r3, r0
   d6af4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6af8:	2a00      	cmp	r2, #0
   d6afa:	d1fb      	bne.n	d6af4 <strlen+0x2>
   d6afc:	1a18      	subs	r0, r3, r0
   d6afe:	3801      	subs	r0, #1
   d6b00:	4770      	bx	lr
	...

000d6b04 <__register_exitproc>:
   d6b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6b08:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d6bc4 <__register_exitproc+0xc0>
   d6b0c:	4606      	mov	r6, r0
   d6b0e:	f8d8 0000 	ldr.w	r0, [r8]
   d6b12:	461f      	mov	r7, r3
   d6b14:	460d      	mov	r5, r1
   d6b16:	4691      	mov	r9, r2
   d6b18:	f000 f856 	bl	d6bc8 <__retarget_lock_acquire_recursive>
   d6b1c:	4b25      	ldr	r3, [pc, #148]	; (d6bb4 <__register_exitproc+0xb0>)
   d6b1e:	681c      	ldr	r4, [r3, #0]
   d6b20:	b934      	cbnz	r4, d6b30 <__register_exitproc+0x2c>
   d6b22:	4c25      	ldr	r4, [pc, #148]	; (d6bb8 <__register_exitproc+0xb4>)
   d6b24:	601c      	str	r4, [r3, #0]
   d6b26:	4b25      	ldr	r3, [pc, #148]	; (d6bbc <__register_exitproc+0xb8>)
   d6b28:	b113      	cbz	r3, d6b30 <__register_exitproc+0x2c>
   d6b2a:	681b      	ldr	r3, [r3, #0]
   d6b2c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d6b30:	6863      	ldr	r3, [r4, #4]
   d6b32:	2b1f      	cmp	r3, #31
   d6b34:	dd07      	ble.n	d6b46 <__register_exitproc+0x42>
   d6b36:	f8d8 0000 	ldr.w	r0, [r8]
   d6b3a:	f000 f847 	bl	d6bcc <__retarget_lock_release_recursive>
   d6b3e:	f04f 30ff 	mov.w	r0, #4294967295
   d6b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6b46:	b34e      	cbz	r6, d6b9c <__register_exitproc+0x98>
   d6b48:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d6b4c:	b988      	cbnz	r0, d6b72 <__register_exitproc+0x6e>
   d6b4e:	4b1c      	ldr	r3, [pc, #112]	; (d6bc0 <__register_exitproc+0xbc>)
   d6b50:	b923      	cbnz	r3, d6b5c <__register_exitproc+0x58>
   d6b52:	f8d8 0000 	ldr.w	r0, [r8]
   d6b56:	f000 f838 	bl	d6bca <__retarget_lock_release>
   d6b5a:	e7f0      	b.n	d6b3e <__register_exitproc+0x3a>
   d6b5c:	f44f 7084 	mov.w	r0, #264	; 0x108
   d6b60:	f7fd ff84 	bl	d4a6c <malloc>
   d6b64:	2800      	cmp	r0, #0
   d6b66:	d0f4      	beq.n	d6b52 <__register_exitproc+0x4e>
   d6b68:	2300      	movs	r3, #0
   d6b6a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d6b6e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d6b72:	6863      	ldr	r3, [r4, #4]
   d6b74:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d6b78:	2201      	movs	r2, #1
   d6b7a:	409a      	lsls	r2, r3
   d6b7c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d6b80:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d6b84:	4313      	orrs	r3, r2
   d6b86:	2e02      	cmp	r6, #2
   d6b88:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d6b8c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d6b90:	bf02      	ittt	eq
   d6b92:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d6b96:	431a      	orreq	r2, r3
   d6b98:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d6b9c:	6863      	ldr	r3, [r4, #4]
   d6b9e:	f8d8 0000 	ldr.w	r0, [r8]
   d6ba2:	1c5a      	adds	r2, r3, #1
   d6ba4:	3302      	adds	r3, #2
   d6ba6:	6062      	str	r2, [r4, #4]
   d6ba8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d6bac:	f000 f80e 	bl	d6bcc <__retarget_lock_release_recursive>
   d6bb0:	2000      	movs	r0, #0
   d6bb2:	e7c6      	b.n	d6b42 <__register_exitproc+0x3e>
   d6bb4:	2003e7e0 	.word	0x2003e7e0
   d6bb8:	2003e754 	.word	0x2003e754
   d6bbc:	00000000 	.word	0x00000000
   d6bc0:	000d4a6d 	.word	0x000d4a6d
   d6bc4:	2003e584 	.word	0x2003e584

000d6bc8 <__retarget_lock_acquire_recursive>:
   d6bc8:	4770      	bx	lr

000d6bca <__retarget_lock_release>:
   d6bca:	4770      	bx	lr

000d6bcc <__retarget_lock_release_recursive>:
   d6bcc:	4770      	bx	lr

000d6bce <link_code_end>:
	...

000d6bd0 <dynalib_user>:
   d6bd0:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6be0:	0000 0000 4844 3154 2031 6542 6967 216e     ....DHT11 Begin!
   d6bf0:	2121 4600 6961 656c 2064 6f74 7220 6165     !!.Failed to rea
   d6c00:	2064 7266 6d6f 4420 5448 3131 7320 6e65     d from DHT11 sen
   d6c10:	6f73 2172 4800 6d75 6469 203a 2500 2020     sor!.Humid: .%  
   d6c20:	5400 6d65 3a70 0020 432a 0020 7548 696d     .Temp: .*C .Humi
   d6c30:	6964 7974 003a 6554 706d 003a               dity:.Temp:.

000d6c3c <_ZTVN5spark13EthernetClassE>:
	...
   d6c44:	4b2b 000d 4b21 000d 4b17 000d 4b0d 000d     +K..!K...K...K..
   d6c54:	4b01 000d 4af5 000d 5b55 000d 5b5d 000d     .K...J..U[..][..
   d6c64:	4ae9 000d 4ae1 000d 4ad7 000d 4acd 000d     .J...J...J...J..
   d6c74:	5b8d 000d 616e 006e 6e69 0066 766f 0066     .[..nan.inf.ovf.
   d6c84:	002e 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   d6c94:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d6ca4:	0065 0000                                   e...

000d6ca8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6cb0:	51dd 000d 51e3 000d 5221 000d 51f1 000d     .Q...Q..!R...Q..
   d6cc0:	51df 000d                                   .Q..

000d6cc4 <_ZTV9IPAddress>:
	...
   d6ccc:	5725 000d 5715 000d 5717 000d               %W...W...W..

000d6cd8 <_ZTV9USBSerial>:
	...
   d6ce0:	57fd 000d 5865 000d 583b 000d 4dc1 000d     .W..eX..;X...M..
   d6cf0:	582d 000d 57ff 000d 580f 000d 585f 000d     -X...W...X.._X..
   d6d00:	581f 000d 57f7 000d                         .X...W..

000d6d08 <_ZTV11USARTSerial>:
	...
   d6d10:	5901 000d 596f 000d 5947 000d 4dc1 000d     .Y..oY..GY...M..
   d6d20:	5917 000d 5933 000d 5925 000d 5941 000d     .Y..3Y..%Y..AY..
   d6d30:	5903 000d 5909 000d                         .Y...Y..

000d6d38 <_ZTV7TwoWire>:
	...
   d6d40:	5a1d 000d 5a67 000d 5a3f 000d 5a1f 000d     .Z..gZ..?Z...Z..
   d6d50:	5a47 000d 5a4f 000d 5a57 000d 5a5f 000d     GZ..OZ..WZ.._Z..

000d6d60 <_ZTVN5spark9WiFiClassE>:
	...
   d6d68:	5af7 000d 5aed 000d 5ae3 000d 5a99 000d     .Z...Z...Z...Z..
   d6d78:	5ad7 000d 5acb 000d 5b55 000d 5b5d 000d     .Z...Z..U[..][..
   d6d88:	5abf 000d 5ab7 000d 5aad 000d 5aa3 000d     .Z...Z...Z...Z..
   d6d98:	5b8d 000d                                   .[..

000d6d9c <_ZTVN5spark12NetworkClassE>:
	...
   d6da4:	5b15 000d 5b1f 000d 5b29 000d 5b33 000d     .[...[..)[..3[..
   d6db4:	5b3d 000d 5b49 000d 5b55 000d 5b5d 000d     =[..I[..U[..][..
   d6dc4:	5b65 000d 5b71 000d 5b79 000d 5b83 000d     e[..q[..y[...[..
   d6dd4:	5b8d 000d                                   .[..

000d6dd8 <_ZSt7nothrow>:
	...

000d6dd9 <link_const_variable_data_end>:
   d6dd9:	00          	.byte	0x00
	...

000d6ddc <link_constructors_location>:
   d6ddc:	000d4269 	.word	0x000d4269
   d6de0:	000d4b35 	.word	0x000d4b35
   d6de4:	000d4b5d 	.word	0x000d4b5d
   d6de8:	000d4db1 	.word	0x000d4db1
   d6dec:	000d5039 	.word	0x000d5039
   d6df0:	000d5049 	.word	0x000d5049
   d6df4:	000d5099 	.word	0x000d5099
   d6df8:	000d5b01 	.word	0x000d5b01
   d6dfc:	000d5c61 	.word	0x000d5c61
